// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TelemetryType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
	Spec   *TelemetrySpec         `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
type TelemetrySpec struct {
	// Optional.
	AccessLogging []TelemetrySpecAccesslogging `pulumi:"accessLogging"`
	// Optional.
	Metrics []TelemetrySpecMetrics `pulumi:"metrics"`
	// Optional.
	Selector *TelemetrySpecSelector `pulumi:"selector"`
	// Optional.
	Tracing []TelemetrySpecTracing `pulumi:"tracing"`
}

// TelemetrySpecInput is an input type that accepts TelemetrySpecArgs and TelemetrySpecOutput values.
// You can construct a concrete instance of `TelemetrySpecInput` via:
//
//	TelemetrySpecArgs{...}
type TelemetrySpecInput interface {
	pulumi.Input

	ToTelemetrySpecOutput() TelemetrySpecOutput
	ToTelemetrySpecOutputWithContext(context.Context) TelemetrySpecOutput
}

// Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
type TelemetrySpecArgs struct {
	// Optional.
	AccessLogging TelemetrySpecAccessloggingArrayInput `pulumi:"accessLogging"`
	// Optional.
	Metrics TelemetrySpecMetricsArrayInput `pulumi:"metrics"`
	// Optional.
	Selector TelemetrySpecSelectorPtrInput `pulumi:"selector"`
	// Optional.
	Tracing TelemetrySpecTracingArrayInput `pulumi:"tracing"`
}

func (TelemetrySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpec)(nil)).Elem()
}

func (i TelemetrySpecArgs) ToTelemetrySpecOutput() TelemetrySpecOutput {
	return i.ToTelemetrySpecOutputWithContext(context.Background())
}

func (i TelemetrySpecArgs) ToTelemetrySpecOutputWithContext(ctx context.Context) TelemetrySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecOutput)
}

func (i TelemetrySpecArgs) ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput {
	return i.ToTelemetrySpecPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecArgs) ToTelemetrySpecPtrOutputWithContext(ctx context.Context) TelemetrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecOutput).ToTelemetrySpecPtrOutputWithContext(ctx)
}

// TelemetrySpecPtrInput is an input type that accepts TelemetrySpecArgs, TelemetrySpecPtr and TelemetrySpecPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecPtrInput` via:
//
//	        TelemetrySpecArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecPtrInput interface {
	pulumi.Input

	ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput
	ToTelemetrySpecPtrOutputWithContext(context.Context) TelemetrySpecPtrOutput
}

type telemetrySpecPtrType TelemetrySpecArgs

func TelemetrySpecPtr(v *TelemetrySpecArgs) TelemetrySpecPtrInput {
	return (*telemetrySpecPtrType)(v)
}

func (*telemetrySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpec)(nil)).Elem()
}

func (i *telemetrySpecPtrType) ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput {
	return i.ToTelemetrySpecPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecPtrType) ToTelemetrySpecPtrOutputWithContext(ctx context.Context) TelemetrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecPtrOutput)
}

// Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
type TelemetrySpecOutput struct{ *pulumi.OutputState }

func (TelemetrySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpec)(nil)).Elem()
}

func (o TelemetrySpecOutput) ToTelemetrySpecOutput() TelemetrySpecOutput {
	return o
}

func (o TelemetrySpecOutput) ToTelemetrySpecOutputWithContext(ctx context.Context) TelemetrySpecOutput {
	return o
}

func (o TelemetrySpecOutput) ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput {
	return o.ToTelemetrySpecPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecOutput) ToTelemetrySpecPtrOutputWithContext(ctx context.Context) TelemetrySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpec) *TelemetrySpec {
		return &v
	}).(TelemetrySpecPtrOutput)
}

// Optional.
func (o TelemetrySpecOutput) AccessLogging() TelemetrySpecAccessloggingArrayOutput {
	return o.ApplyT(func(v TelemetrySpec) []TelemetrySpecAccesslogging { return v.AccessLogging }).(TelemetrySpecAccessloggingArrayOutput)
}

// Optional.
func (o TelemetrySpecOutput) Metrics() TelemetrySpecMetricsArrayOutput {
	return o.ApplyT(func(v TelemetrySpec) []TelemetrySpecMetrics { return v.Metrics }).(TelemetrySpecMetricsArrayOutput)
}

// Optional.
func (o TelemetrySpecOutput) Selector() TelemetrySpecSelectorPtrOutput {
	return o.ApplyT(func(v TelemetrySpec) *TelemetrySpecSelector { return v.Selector }).(TelemetrySpecSelectorPtrOutput)
}

// Optional.
func (o TelemetrySpecOutput) Tracing() TelemetrySpecTracingArrayOutput {
	return o.ApplyT(func(v TelemetrySpec) []TelemetrySpecTracing { return v.Tracing }).(TelemetrySpecTracingArrayOutput)
}

type TelemetrySpecPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpec)(nil)).Elem()
}

func (o TelemetrySpecPtrOutput) ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput {
	return o
}

func (o TelemetrySpecPtrOutput) ToTelemetrySpecPtrOutputWithContext(ctx context.Context) TelemetrySpecPtrOutput {
	return o
}

func (o TelemetrySpecPtrOutput) Elem() TelemetrySpecOutput {
	return o.ApplyT(func(v *TelemetrySpec) TelemetrySpec {
		if v != nil {
			return *v
		}
		var ret TelemetrySpec
		return ret
	}).(TelemetrySpecOutput)
}

// Optional.
func (o TelemetrySpecPtrOutput) AccessLogging() TelemetrySpecAccessloggingArrayOutput {
	return o.ApplyT(func(v *TelemetrySpec) []TelemetrySpecAccesslogging {
		if v == nil {
			return nil
		}
		return v.AccessLogging
	}).(TelemetrySpecAccessloggingArrayOutput)
}

// Optional.
func (o TelemetrySpecPtrOutput) Metrics() TelemetrySpecMetricsArrayOutput {
	return o.ApplyT(func(v *TelemetrySpec) []TelemetrySpecMetrics {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(TelemetrySpecMetricsArrayOutput)
}

// Optional.
func (o TelemetrySpecPtrOutput) Selector() TelemetrySpecSelectorPtrOutput {
	return o.ApplyT(func(v *TelemetrySpec) *TelemetrySpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(TelemetrySpecSelectorPtrOutput)
}

// Optional.
func (o TelemetrySpecPtrOutput) Tracing() TelemetrySpecTracingArrayOutput {
	return o.ApplyT(func(v *TelemetrySpec) []TelemetrySpecTracing {
		if v == nil {
			return nil
		}
		return v.Tracing
	}).(TelemetrySpecTracingArrayOutput)
}

type TelemetrySpecAccesslogging struct {
	// Controls logging.
	Disabled *bool `pulumi:"disabled"`
	// Optional.
	Filter *TelemetrySpecAccessloggingFilter `pulumi:"filter"`
	// Allows tailoring of logging behavior to specific conditions.
	Match *TelemetrySpecAccessloggingMatch `pulumi:"match"`
	// Optional.
	Providers []TelemetrySpecAccessloggingProviders `pulumi:"providers"`
}

// TelemetrySpecAccessloggingInput is an input type that accepts TelemetrySpecAccessloggingArgs and TelemetrySpecAccessloggingOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessloggingInput` via:
//
//	TelemetrySpecAccessloggingArgs{...}
type TelemetrySpecAccessloggingInput interface {
	pulumi.Input

	ToTelemetrySpecAccessloggingOutput() TelemetrySpecAccessloggingOutput
	ToTelemetrySpecAccessloggingOutputWithContext(context.Context) TelemetrySpecAccessloggingOutput
}

type TelemetrySpecAccessloggingArgs struct {
	// Controls logging.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Optional.
	Filter TelemetrySpecAccessloggingFilterPtrInput `pulumi:"filter"`
	// Allows tailoring of logging behavior to specific conditions.
	Match TelemetrySpecAccessloggingMatchPtrInput `pulumi:"match"`
	// Optional.
	Providers TelemetrySpecAccessloggingProvidersArrayInput `pulumi:"providers"`
}

func (TelemetrySpecAccessloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccesslogging)(nil)).Elem()
}

func (i TelemetrySpecAccessloggingArgs) ToTelemetrySpecAccessloggingOutput() TelemetrySpecAccessloggingOutput {
	return i.ToTelemetrySpecAccessloggingOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessloggingArgs) ToTelemetrySpecAccessloggingOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessloggingOutput)
}

// TelemetrySpecAccessloggingArrayInput is an input type that accepts TelemetrySpecAccessloggingArray and TelemetrySpecAccessloggingArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessloggingArrayInput` via:
//
//	TelemetrySpecAccessloggingArray{ TelemetrySpecAccessloggingArgs{...} }
type TelemetrySpecAccessloggingArrayInput interface {
	pulumi.Input

	ToTelemetrySpecAccessloggingArrayOutput() TelemetrySpecAccessloggingArrayOutput
	ToTelemetrySpecAccessloggingArrayOutputWithContext(context.Context) TelemetrySpecAccessloggingArrayOutput
}

type TelemetrySpecAccessloggingArray []TelemetrySpecAccessloggingInput

func (TelemetrySpecAccessloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccesslogging)(nil)).Elem()
}

func (i TelemetrySpecAccessloggingArray) ToTelemetrySpecAccessloggingArrayOutput() TelemetrySpecAccessloggingArrayOutput {
	return i.ToTelemetrySpecAccessloggingArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessloggingArray) ToTelemetrySpecAccessloggingArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessloggingArrayOutput)
}

type TelemetrySpecAccessloggingOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccesslogging)(nil)).Elem()
}

func (o TelemetrySpecAccessloggingOutput) ToTelemetrySpecAccessloggingOutput() TelemetrySpecAccessloggingOutput {
	return o
}

func (o TelemetrySpecAccessloggingOutput) ToTelemetrySpecAccessloggingOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingOutput {
	return o
}

// Controls logging.
func (o TelemetrySpecAccessloggingOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccesslogging) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Optional.
func (o TelemetrySpecAccessloggingOutput) Filter() TelemetrySpecAccessloggingFilterPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccesslogging) *TelemetrySpecAccessloggingFilter { return v.Filter }).(TelemetrySpecAccessloggingFilterPtrOutput)
}

// Allows tailoring of logging behavior to specific conditions.
func (o TelemetrySpecAccessloggingOutput) Match() TelemetrySpecAccessloggingMatchPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccesslogging) *TelemetrySpecAccessloggingMatch { return v.Match }).(TelemetrySpecAccessloggingMatchPtrOutput)
}

// Optional.
func (o TelemetrySpecAccessloggingOutput) Providers() TelemetrySpecAccessloggingProvidersArrayOutput {
	return o.ApplyT(func(v TelemetrySpecAccesslogging) []TelemetrySpecAccessloggingProviders { return v.Providers }).(TelemetrySpecAccessloggingProvidersArrayOutput)
}

type TelemetrySpecAccessloggingArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccesslogging)(nil)).Elem()
}

func (o TelemetrySpecAccessloggingArrayOutput) ToTelemetrySpecAccessloggingArrayOutput() TelemetrySpecAccessloggingArrayOutput {
	return o
}

func (o TelemetrySpecAccessloggingArrayOutput) ToTelemetrySpecAccessloggingArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingArrayOutput {
	return o
}

func (o TelemetrySpecAccessloggingArrayOutput) Index(i pulumi.IntInput) TelemetrySpecAccessloggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecAccesslogging {
		return vs[0].([]TelemetrySpecAccesslogging)[vs[1].(int)]
	}).(TelemetrySpecAccessloggingOutput)
}

// Optional.
type TelemetrySpecAccessloggingFilter struct {
	// CEL expression for selecting when requests/connections should be logged.
	Expression *string `pulumi:"expression"`
}

// TelemetrySpecAccessloggingFilterInput is an input type that accepts TelemetrySpecAccessloggingFilterArgs and TelemetrySpecAccessloggingFilterOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessloggingFilterInput` via:
//
//	TelemetrySpecAccessloggingFilterArgs{...}
type TelemetrySpecAccessloggingFilterInput interface {
	pulumi.Input

	ToTelemetrySpecAccessloggingFilterOutput() TelemetrySpecAccessloggingFilterOutput
	ToTelemetrySpecAccessloggingFilterOutputWithContext(context.Context) TelemetrySpecAccessloggingFilterOutput
}

// Optional.
type TelemetrySpecAccessloggingFilterArgs struct {
	// CEL expression for selecting when requests/connections should be logged.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
}

func (TelemetrySpecAccessloggingFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessloggingFilter)(nil)).Elem()
}

func (i TelemetrySpecAccessloggingFilterArgs) ToTelemetrySpecAccessloggingFilterOutput() TelemetrySpecAccessloggingFilterOutput {
	return i.ToTelemetrySpecAccessloggingFilterOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessloggingFilterArgs) ToTelemetrySpecAccessloggingFilterOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessloggingFilterOutput)
}

func (i TelemetrySpecAccessloggingFilterArgs) ToTelemetrySpecAccessloggingFilterPtrOutput() TelemetrySpecAccessloggingFilterPtrOutput {
	return i.ToTelemetrySpecAccessloggingFilterPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessloggingFilterArgs) ToTelemetrySpecAccessloggingFilterPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessloggingFilterOutput).ToTelemetrySpecAccessloggingFilterPtrOutputWithContext(ctx)
}

// TelemetrySpecAccessloggingFilterPtrInput is an input type that accepts TelemetrySpecAccessloggingFilterArgs, TelemetrySpecAccessloggingFilterPtr and TelemetrySpecAccessloggingFilterPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessloggingFilterPtrInput` via:
//
//	        TelemetrySpecAccessloggingFilterArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecAccessloggingFilterPtrInput interface {
	pulumi.Input

	ToTelemetrySpecAccessloggingFilterPtrOutput() TelemetrySpecAccessloggingFilterPtrOutput
	ToTelemetrySpecAccessloggingFilterPtrOutputWithContext(context.Context) TelemetrySpecAccessloggingFilterPtrOutput
}

type telemetrySpecAccessloggingFilterPtrType TelemetrySpecAccessloggingFilterArgs

func TelemetrySpecAccessloggingFilterPtr(v *TelemetrySpecAccessloggingFilterArgs) TelemetrySpecAccessloggingFilterPtrInput {
	return (*telemetrySpecAccessloggingFilterPtrType)(v)
}

func (*telemetrySpecAccessloggingFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessloggingFilter)(nil)).Elem()
}

func (i *telemetrySpecAccessloggingFilterPtrType) ToTelemetrySpecAccessloggingFilterPtrOutput() TelemetrySpecAccessloggingFilterPtrOutput {
	return i.ToTelemetrySpecAccessloggingFilterPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecAccessloggingFilterPtrType) ToTelemetrySpecAccessloggingFilterPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessloggingFilterPtrOutput)
}

// Optional.
type TelemetrySpecAccessloggingFilterOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessloggingFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessloggingFilter)(nil)).Elem()
}

func (o TelemetrySpecAccessloggingFilterOutput) ToTelemetrySpecAccessloggingFilterOutput() TelemetrySpecAccessloggingFilterOutput {
	return o
}

func (o TelemetrySpecAccessloggingFilterOutput) ToTelemetrySpecAccessloggingFilterOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingFilterOutput {
	return o
}

func (o TelemetrySpecAccessloggingFilterOutput) ToTelemetrySpecAccessloggingFilterPtrOutput() TelemetrySpecAccessloggingFilterPtrOutput {
	return o.ToTelemetrySpecAccessloggingFilterPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecAccessloggingFilterOutput) ToTelemetrySpecAccessloggingFilterPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecAccessloggingFilter) *TelemetrySpecAccessloggingFilter {
		return &v
	}).(TelemetrySpecAccessloggingFilterPtrOutput)
}

// CEL expression for selecting when requests/connections should be logged.
func (o TelemetrySpecAccessloggingFilterOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessloggingFilter) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

type TelemetrySpecAccessloggingFilterPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessloggingFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessloggingFilter)(nil)).Elem()
}

func (o TelemetrySpecAccessloggingFilterPtrOutput) ToTelemetrySpecAccessloggingFilterPtrOutput() TelemetrySpecAccessloggingFilterPtrOutput {
	return o
}

func (o TelemetrySpecAccessloggingFilterPtrOutput) ToTelemetrySpecAccessloggingFilterPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingFilterPtrOutput {
	return o
}

func (o TelemetrySpecAccessloggingFilterPtrOutput) Elem() TelemetrySpecAccessloggingFilterOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessloggingFilter) TelemetrySpecAccessloggingFilter {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecAccessloggingFilter
		return ret
	}).(TelemetrySpecAccessloggingFilterOutput)
}

// CEL expression for selecting when requests/connections should be logged.
func (o TelemetrySpecAccessloggingFilterPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessloggingFilter) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Allows tailoring of logging behavior to specific conditions.
type TelemetrySpecAccessloggingMatch struct {
	Mode *string `pulumi:"mode"`
}

// TelemetrySpecAccessloggingMatchInput is an input type that accepts TelemetrySpecAccessloggingMatchArgs and TelemetrySpecAccessloggingMatchOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessloggingMatchInput` via:
//
//	TelemetrySpecAccessloggingMatchArgs{...}
type TelemetrySpecAccessloggingMatchInput interface {
	pulumi.Input

	ToTelemetrySpecAccessloggingMatchOutput() TelemetrySpecAccessloggingMatchOutput
	ToTelemetrySpecAccessloggingMatchOutputWithContext(context.Context) TelemetrySpecAccessloggingMatchOutput
}

// Allows tailoring of logging behavior to specific conditions.
type TelemetrySpecAccessloggingMatchArgs struct {
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (TelemetrySpecAccessloggingMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessloggingMatch)(nil)).Elem()
}

func (i TelemetrySpecAccessloggingMatchArgs) ToTelemetrySpecAccessloggingMatchOutput() TelemetrySpecAccessloggingMatchOutput {
	return i.ToTelemetrySpecAccessloggingMatchOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessloggingMatchArgs) ToTelemetrySpecAccessloggingMatchOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessloggingMatchOutput)
}

func (i TelemetrySpecAccessloggingMatchArgs) ToTelemetrySpecAccessloggingMatchPtrOutput() TelemetrySpecAccessloggingMatchPtrOutput {
	return i.ToTelemetrySpecAccessloggingMatchPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessloggingMatchArgs) ToTelemetrySpecAccessloggingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessloggingMatchOutput).ToTelemetrySpecAccessloggingMatchPtrOutputWithContext(ctx)
}

// TelemetrySpecAccessloggingMatchPtrInput is an input type that accepts TelemetrySpecAccessloggingMatchArgs, TelemetrySpecAccessloggingMatchPtr and TelemetrySpecAccessloggingMatchPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessloggingMatchPtrInput` via:
//
//	        TelemetrySpecAccessloggingMatchArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecAccessloggingMatchPtrInput interface {
	pulumi.Input

	ToTelemetrySpecAccessloggingMatchPtrOutput() TelemetrySpecAccessloggingMatchPtrOutput
	ToTelemetrySpecAccessloggingMatchPtrOutputWithContext(context.Context) TelemetrySpecAccessloggingMatchPtrOutput
}

type telemetrySpecAccessloggingMatchPtrType TelemetrySpecAccessloggingMatchArgs

func TelemetrySpecAccessloggingMatchPtr(v *TelemetrySpecAccessloggingMatchArgs) TelemetrySpecAccessloggingMatchPtrInput {
	return (*telemetrySpecAccessloggingMatchPtrType)(v)
}

func (*telemetrySpecAccessloggingMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessloggingMatch)(nil)).Elem()
}

func (i *telemetrySpecAccessloggingMatchPtrType) ToTelemetrySpecAccessloggingMatchPtrOutput() TelemetrySpecAccessloggingMatchPtrOutput {
	return i.ToTelemetrySpecAccessloggingMatchPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecAccessloggingMatchPtrType) ToTelemetrySpecAccessloggingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessloggingMatchPtrOutput)
}

// Allows tailoring of logging behavior to specific conditions.
type TelemetrySpecAccessloggingMatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessloggingMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessloggingMatch)(nil)).Elem()
}

func (o TelemetrySpecAccessloggingMatchOutput) ToTelemetrySpecAccessloggingMatchOutput() TelemetrySpecAccessloggingMatchOutput {
	return o
}

func (o TelemetrySpecAccessloggingMatchOutput) ToTelemetrySpecAccessloggingMatchOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingMatchOutput {
	return o
}

func (o TelemetrySpecAccessloggingMatchOutput) ToTelemetrySpecAccessloggingMatchPtrOutput() TelemetrySpecAccessloggingMatchPtrOutput {
	return o.ToTelemetrySpecAccessloggingMatchPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecAccessloggingMatchOutput) ToTelemetrySpecAccessloggingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecAccessloggingMatch) *TelemetrySpecAccessloggingMatch {
		return &v
	}).(TelemetrySpecAccessloggingMatchPtrOutput)
}

func (o TelemetrySpecAccessloggingMatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessloggingMatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type TelemetrySpecAccessloggingMatchPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessloggingMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessloggingMatch)(nil)).Elem()
}

func (o TelemetrySpecAccessloggingMatchPtrOutput) ToTelemetrySpecAccessloggingMatchPtrOutput() TelemetrySpecAccessloggingMatchPtrOutput {
	return o
}

func (o TelemetrySpecAccessloggingMatchPtrOutput) ToTelemetrySpecAccessloggingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingMatchPtrOutput {
	return o
}

func (o TelemetrySpecAccessloggingMatchPtrOutput) Elem() TelemetrySpecAccessloggingMatchOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessloggingMatch) TelemetrySpecAccessloggingMatch {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecAccessloggingMatch
		return ret
	}).(TelemetrySpecAccessloggingMatchOutput)
}

func (o TelemetrySpecAccessloggingMatchPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessloggingMatch) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

type TelemetrySpecAccessloggingProviders struct {
	// Required.
	Name *string `pulumi:"name"`
}

// TelemetrySpecAccessloggingProvidersInput is an input type that accepts TelemetrySpecAccessloggingProvidersArgs and TelemetrySpecAccessloggingProvidersOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessloggingProvidersInput` via:
//
//	TelemetrySpecAccessloggingProvidersArgs{...}
type TelemetrySpecAccessloggingProvidersInput interface {
	pulumi.Input

	ToTelemetrySpecAccessloggingProvidersOutput() TelemetrySpecAccessloggingProvidersOutput
	ToTelemetrySpecAccessloggingProvidersOutputWithContext(context.Context) TelemetrySpecAccessloggingProvidersOutput
}

type TelemetrySpecAccessloggingProvidersArgs struct {
	// Required.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TelemetrySpecAccessloggingProvidersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessloggingProviders)(nil)).Elem()
}

func (i TelemetrySpecAccessloggingProvidersArgs) ToTelemetrySpecAccessloggingProvidersOutput() TelemetrySpecAccessloggingProvidersOutput {
	return i.ToTelemetrySpecAccessloggingProvidersOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessloggingProvidersArgs) ToTelemetrySpecAccessloggingProvidersOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingProvidersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessloggingProvidersOutput)
}

// TelemetrySpecAccessloggingProvidersArrayInput is an input type that accepts TelemetrySpecAccessloggingProvidersArray and TelemetrySpecAccessloggingProvidersArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessloggingProvidersArrayInput` via:
//
//	TelemetrySpecAccessloggingProvidersArray{ TelemetrySpecAccessloggingProvidersArgs{...} }
type TelemetrySpecAccessloggingProvidersArrayInput interface {
	pulumi.Input

	ToTelemetrySpecAccessloggingProvidersArrayOutput() TelemetrySpecAccessloggingProvidersArrayOutput
	ToTelemetrySpecAccessloggingProvidersArrayOutputWithContext(context.Context) TelemetrySpecAccessloggingProvidersArrayOutput
}

type TelemetrySpecAccessloggingProvidersArray []TelemetrySpecAccessloggingProvidersInput

func (TelemetrySpecAccessloggingProvidersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccessloggingProviders)(nil)).Elem()
}

func (i TelemetrySpecAccessloggingProvidersArray) ToTelemetrySpecAccessloggingProvidersArrayOutput() TelemetrySpecAccessloggingProvidersArrayOutput {
	return i.ToTelemetrySpecAccessloggingProvidersArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessloggingProvidersArray) ToTelemetrySpecAccessloggingProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingProvidersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessloggingProvidersArrayOutput)
}

type TelemetrySpecAccessloggingProvidersOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessloggingProvidersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessloggingProviders)(nil)).Elem()
}

func (o TelemetrySpecAccessloggingProvidersOutput) ToTelemetrySpecAccessloggingProvidersOutput() TelemetrySpecAccessloggingProvidersOutput {
	return o
}

func (o TelemetrySpecAccessloggingProvidersOutput) ToTelemetrySpecAccessloggingProvidersOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingProvidersOutput {
	return o
}

// Required.
func (o TelemetrySpecAccessloggingProvidersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessloggingProviders) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TelemetrySpecAccessloggingProvidersArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessloggingProvidersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccessloggingProviders)(nil)).Elem()
}

func (o TelemetrySpecAccessloggingProvidersArrayOutput) ToTelemetrySpecAccessloggingProvidersArrayOutput() TelemetrySpecAccessloggingProvidersArrayOutput {
	return o
}

func (o TelemetrySpecAccessloggingProvidersArrayOutput) ToTelemetrySpecAccessloggingProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessloggingProvidersArrayOutput {
	return o
}

func (o TelemetrySpecAccessloggingProvidersArrayOutput) Index(i pulumi.IntInput) TelemetrySpecAccessloggingProvidersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecAccessloggingProviders {
		return vs[0].([]TelemetrySpecAccessloggingProviders)[vs[1].(int)]
	}).(TelemetrySpecAccessloggingProvidersOutput)
}

type TelemetrySpecMetrics struct {
	// Optional.
	Overrides []TelemetrySpecMetricsOverrides `pulumi:"overrides"`
	// Optional.
	Providers []TelemetrySpecMetricsProviders `pulumi:"providers"`
}

// TelemetrySpecMetricsInput is an input type that accepts TelemetrySpecMetricsArgs and TelemetrySpecMetricsOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsInput` via:
//
//	TelemetrySpecMetricsArgs{...}
type TelemetrySpecMetricsInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOutput() TelemetrySpecMetricsOutput
	ToTelemetrySpecMetricsOutputWithContext(context.Context) TelemetrySpecMetricsOutput
}

type TelemetrySpecMetricsArgs struct {
	// Optional.
	Overrides TelemetrySpecMetricsOverridesArrayInput `pulumi:"overrides"`
	// Optional.
	Providers TelemetrySpecMetricsProvidersArrayInput `pulumi:"providers"`
}

func (TelemetrySpecMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetrics)(nil)).Elem()
}

func (i TelemetrySpecMetricsArgs) ToTelemetrySpecMetricsOutput() TelemetrySpecMetricsOutput {
	return i.ToTelemetrySpecMetricsOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsArgs) ToTelemetrySpecMetricsOutputWithContext(ctx context.Context) TelemetrySpecMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOutput)
}

// TelemetrySpecMetricsArrayInput is an input type that accepts TelemetrySpecMetricsArray and TelemetrySpecMetricsArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsArrayInput` via:
//
//	TelemetrySpecMetricsArray{ TelemetrySpecMetricsArgs{...} }
type TelemetrySpecMetricsArrayInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsArrayOutput() TelemetrySpecMetricsArrayOutput
	ToTelemetrySpecMetricsArrayOutputWithContext(context.Context) TelemetrySpecMetricsArrayOutput
}

type TelemetrySpecMetricsArray []TelemetrySpecMetricsInput

func (TelemetrySpecMetricsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetrics)(nil)).Elem()
}

func (i TelemetrySpecMetricsArray) ToTelemetrySpecMetricsArrayOutput() TelemetrySpecMetricsArrayOutput {
	return i.ToTelemetrySpecMetricsArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsArray) ToTelemetrySpecMetricsArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsArrayOutput)
}

type TelemetrySpecMetricsOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetrics)(nil)).Elem()
}

func (o TelemetrySpecMetricsOutput) ToTelemetrySpecMetricsOutput() TelemetrySpecMetricsOutput {
	return o
}

func (o TelemetrySpecMetricsOutput) ToTelemetrySpecMetricsOutputWithContext(ctx context.Context) TelemetrySpecMetricsOutput {
	return o
}

// Optional.
func (o TelemetrySpecMetricsOutput) Overrides() TelemetrySpecMetricsOverridesArrayOutput {
	return o.ApplyT(func(v TelemetrySpecMetrics) []TelemetrySpecMetricsOverrides { return v.Overrides }).(TelemetrySpecMetricsOverridesArrayOutput)
}

// Optional.
func (o TelemetrySpecMetricsOutput) Providers() TelemetrySpecMetricsProvidersArrayOutput {
	return o.ApplyT(func(v TelemetrySpecMetrics) []TelemetrySpecMetricsProviders { return v.Providers }).(TelemetrySpecMetricsProvidersArrayOutput)
}

type TelemetrySpecMetricsArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetrics)(nil)).Elem()
}

func (o TelemetrySpecMetricsArrayOutput) ToTelemetrySpecMetricsArrayOutput() TelemetrySpecMetricsArrayOutput {
	return o
}

func (o TelemetrySpecMetricsArrayOutput) ToTelemetrySpecMetricsArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsArrayOutput {
	return o
}

func (o TelemetrySpecMetricsArrayOutput) Index(i pulumi.IntInput) TelemetrySpecMetricsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecMetrics {
		return vs[0].([]TelemetrySpecMetrics)[vs[1].(int)]
	}).(TelemetrySpecMetricsOutput)
}

type TelemetrySpecMetricsOverrides struct {
	// Optional.
	Disabled *bool `pulumi:"disabled"`
	// Match allows provides the scope of the override.
	Match interface{} `pulumi:"match"`
	// Optional.
	TagOverrides map[string]TelemetrySpecMetricsOverridesTagoverrides `pulumi:"tagOverrides"`
}

// TelemetrySpecMetricsOverridesInput is an input type that accepts TelemetrySpecMetricsOverridesArgs and TelemetrySpecMetricsOverridesOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesInput` via:
//
//	TelemetrySpecMetricsOverridesArgs{...}
type TelemetrySpecMetricsOverridesInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesOutput() TelemetrySpecMetricsOverridesOutput
	ToTelemetrySpecMetricsOverridesOutputWithContext(context.Context) TelemetrySpecMetricsOverridesOutput
}

type TelemetrySpecMetricsOverridesArgs struct {
	// Optional.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Match allows provides the scope of the override.
	Match pulumi.Input `pulumi:"match"`
	// Optional.
	TagOverrides TelemetrySpecMetricsOverridesTagoverridesMapInput `pulumi:"tagOverrides"`
}

func (TelemetrySpecMetricsOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverrides)(nil)).Elem()
}

func (i TelemetrySpecMetricsOverridesArgs) ToTelemetrySpecMetricsOverridesOutput() TelemetrySpecMetricsOverridesOutput {
	return i.ToTelemetrySpecMetricsOverridesOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesArgs) ToTelemetrySpecMetricsOverridesOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesOutput)
}

// TelemetrySpecMetricsOverridesArrayInput is an input type that accepts TelemetrySpecMetricsOverridesArray and TelemetrySpecMetricsOverridesArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesArrayInput` via:
//
//	TelemetrySpecMetricsOverridesArray{ TelemetrySpecMetricsOverridesArgs{...} }
type TelemetrySpecMetricsOverridesArrayInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesArrayOutput() TelemetrySpecMetricsOverridesArrayOutput
	ToTelemetrySpecMetricsOverridesArrayOutputWithContext(context.Context) TelemetrySpecMetricsOverridesArrayOutput
}

type TelemetrySpecMetricsOverridesArray []TelemetrySpecMetricsOverridesInput

func (TelemetrySpecMetricsOverridesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsOverrides)(nil)).Elem()
}

func (i TelemetrySpecMetricsOverridesArray) ToTelemetrySpecMetricsOverridesArrayOutput() TelemetrySpecMetricsOverridesArrayOutput {
	return i.ToTelemetrySpecMetricsOverridesArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesArray) ToTelemetrySpecMetricsOverridesArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesArrayOutput)
}

type TelemetrySpecMetricsOverridesOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverrides)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesOutput) ToTelemetrySpecMetricsOverridesOutput() TelemetrySpecMetricsOverridesOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesOutput) ToTelemetrySpecMetricsOverridesOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesOutput {
	return o
}

// Optional.
func (o TelemetrySpecMetricsOverridesOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverrides) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Match allows provides the scope of the override.
func (o TelemetrySpecMetricsOverridesOutput) Match() pulumi.AnyOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverrides) interface{} { return v.Match }).(pulumi.AnyOutput)
}

// Optional.
func (o TelemetrySpecMetricsOverridesOutput) TagOverrides() TelemetrySpecMetricsOverridesTagoverridesMapOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverrides) map[string]TelemetrySpecMetricsOverridesTagoverrides {
		return v.TagOverrides
	}).(TelemetrySpecMetricsOverridesTagoverridesMapOutput)
}

type TelemetrySpecMetricsOverridesArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsOverrides)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesArrayOutput) ToTelemetrySpecMetricsOverridesArrayOutput() TelemetrySpecMetricsOverridesArrayOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesArrayOutput) ToTelemetrySpecMetricsOverridesArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesArrayOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesArrayOutput) Index(i pulumi.IntInput) TelemetrySpecMetricsOverridesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecMetricsOverrides {
		return vs[0].([]TelemetrySpecMetricsOverrides)[vs[1].(int)]
	}).(TelemetrySpecMetricsOverridesOutput)
}

type TelemetrySpecMetricsOverridesTagoverrides struct {
	// Operation controls whether or not to update/add a tag, or to remove it.
	Operation *string `pulumi:"operation"`
	// Value is only considered if the operation is `UPSERT`.
	Value *string `pulumi:"value"`
}

// TelemetrySpecMetricsOverridesTagoverridesInput is an input type that accepts TelemetrySpecMetricsOverridesTagoverridesArgs and TelemetrySpecMetricsOverridesTagoverridesOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesTagoverridesInput` via:
//
//	TelemetrySpecMetricsOverridesTagoverridesArgs{...}
type TelemetrySpecMetricsOverridesTagoverridesInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesTagoverridesOutput() TelemetrySpecMetricsOverridesTagoverridesOutput
	ToTelemetrySpecMetricsOverridesTagoverridesOutputWithContext(context.Context) TelemetrySpecMetricsOverridesTagoverridesOutput
}

type TelemetrySpecMetricsOverridesTagoverridesArgs struct {
	// Operation controls whether or not to update/add a tag, or to remove it.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
	// Value is only considered if the operation is `UPSERT`.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TelemetrySpecMetricsOverridesTagoverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverridesTagoverrides)(nil)).Elem()
}

func (i TelemetrySpecMetricsOverridesTagoverridesArgs) ToTelemetrySpecMetricsOverridesTagoverridesOutput() TelemetrySpecMetricsOverridesTagoverridesOutput {
	return i.ToTelemetrySpecMetricsOverridesTagoverridesOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesTagoverridesArgs) ToTelemetrySpecMetricsOverridesTagoverridesOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesTagoverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesTagoverridesOutput)
}

// TelemetrySpecMetricsOverridesTagoverridesMapInput is an input type that accepts TelemetrySpecMetricsOverridesTagoverridesMap and TelemetrySpecMetricsOverridesTagoverridesMapOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesTagoverridesMapInput` via:
//
//	TelemetrySpecMetricsOverridesTagoverridesMap{ "key": TelemetrySpecMetricsOverridesTagoverridesArgs{...} }
type TelemetrySpecMetricsOverridesTagoverridesMapInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesTagoverridesMapOutput() TelemetrySpecMetricsOverridesTagoverridesMapOutput
	ToTelemetrySpecMetricsOverridesTagoverridesMapOutputWithContext(context.Context) TelemetrySpecMetricsOverridesTagoverridesMapOutput
}

type TelemetrySpecMetricsOverridesTagoverridesMap map[string]TelemetrySpecMetricsOverridesTagoverridesInput

func (TelemetrySpecMetricsOverridesTagoverridesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TelemetrySpecMetricsOverridesTagoverrides)(nil)).Elem()
}

func (i TelemetrySpecMetricsOverridesTagoverridesMap) ToTelemetrySpecMetricsOverridesTagoverridesMapOutput() TelemetrySpecMetricsOverridesTagoverridesMapOutput {
	return i.ToTelemetrySpecMetricsOverridesTagoverridesMapOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesTagoverridesMap) ToTelemetrySpecMetricsOverridesTagoverridesMapOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesTagoverridesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesTagoverridesMapOutput)
}

type TelemetrySpecMetricsOverridesTagoverridesOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesTagoverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverridesTagoverrides)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesTagoverridesOutput) ToTelemetrySpecMetricsOverridesTagoverridesOutput() TelemetrySpecMetricsOverridesTagoverridesOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesTagoverridesOutput) ToTelemetrySpecMetricsOverridesTagoverridesOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesTagoverridesOutput {
	return o
}

// Operation controls whether or not to update/add a tag, or to remove it.
func (o TelemetrySpecMetricsOverridesTagoverridesOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverridesTagoverrides) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

// Value is only considered if the operation is `UPSERT`.
func (o TelemetrySpecMetricsOverridesTagoverridesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverridesTagoverrides) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TelemetrySpecMetricsOverridesTagoverridesMapOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesTagoverridesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TelemetrySpecMetricsOverridesTagoverrides)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesTagoverridesMapOutput) ToTelemetrySpecMetricsOverridesTagoverridesMapOutput() TelemetrySpecMetricsOverridesTagoverridesMapOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesTagoverridesMapOutput) ToTelemetrySpecMetricsOverridesTagoverridesMapOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesTagoverridesMapOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesTagoverridesMapOutput) MapIndex(k pulumi.StringInput) TelemetrySpecMetricsOverridesTagoverridesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TelemetrySpecMetricsOverridesTagoverrides {
		return vs[0].(map[string]TelemetrySpecMetricsOverridesTagoverrides)[vs[1].(string)]
	}).(TelemetrySpecMetricsOverridesTagoverridesOutput)
}

type TelemetrySpecMetricsProviders struct {
	// Required.
	Name *string `pulumi:"name"`
}

// TelemetrySpecMetricsProvidersInput is an input type that accepts TelemetrySpecMetricsProvidersArgs and TelemetrySpecMetricsProvidersOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsProvidersInput` via:
//
//	TelemetrySpecMetricsProvidersArgs{...}
type TelemetrySpecMetricsProvidersInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsProvidersOutput() TelemetrySpecMetricsProvidersOutput
	ToTelemetrySpecMetricsProvidersOutputWithContext(context.Context) TelemetrySpecMetricsProvidersOutput
}

type TelemetrySpecMetricsProvidersArgs struct {
	// Required.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TelemetrySpecMetricsProvidersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsProviders)(nil)).Elem()
}

func (i TelemetrySpecMetricsProvidersArgs) ToTelemetrySpecMetricsProvidersOutput() TelemetrySpecMetricsProvidersOutput {
	return i.ToTelemetrySpecMetricsProvidersOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsProvidersArgs) ToTelemetrySpecMetricsProvidersOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsProvidersOutput)
}

// TelemetrySpecMetricsProvidersArrayInput is an input type that accepts TelemetrySpecMetricsProvidersArray and TelemetrySpecMetricsProvidersArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsProvidersArrayInput` via:
//
//	TelemetrySpecMetricsProvidersArray{ TelemetrySpecMetricsProvidersArgs{...} }
type TelemetrySpecMetricsProvidersArrayInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsProvidersArrayOutput() TelemetrySpecMetricsProvidersArrayOutput
	ToTelemetrySpecMetricsProvidersArrayOutputWithContext(context.Context) TelemetrySpecMetricsProvidersArrayOutput
}

type TelemetrySpecMetricsProvidersArray []TelemetrySpecMetricsProvidersInput

func (TelemetrySpecMetricsProvidersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsProviders)(nil)).Elem()
}

func (i TelemetrySpecMetricsProvidersArray) ToTelemetrySpecMetricsProvidersArrayOutput() TelemetrySpecMetricsProvidersArrayOutput {
	return i.ToTelemetrySpecMetricsProvidersArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsProvidersArray) ToTelemetrySpecMetricsProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsProvidersArrayOutput)
}

type TelemetrySpecMetricsProvidersOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsProvidersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsProviders)(nil)).Elem()
}

func (o TelemetrySpecMetricsProvidersOutput) ToTelemetrySpecMetricsProvidersOutput() TelemetrySpecMetricsProvidersOutput {
	return o
}

func (o TelemetrySpecMetricsProvidersOutput) ToTelemetrySpecMetricsProvidersOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersOutput {
	return o
}

// Required.
func (o TelemetrySpecMetricsProvidersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsProviders) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TelemetrySpecMetricsProvidersArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsProvidersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsProviders)(nil)).Elem()
}

func (o TelemetrySpecMetricsProvidersArrayOutput) ToTelemetrySpecMetricsProvidersArrayOutput() TelemetrySpecMetricsProvidersArrayOutput {
	return o
}

func (o TelemetrySpecMetricsProvidersArrayOutput) ToTelemetrySpecMetricsProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersArrayOutput {
	return o
}

func (o TelemetrySpecMetricsProvidersArrayOutput) Index(i pulumi.IntInput) TelemetrySpecMetricsProvidersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecMetricsProviders {
		return vs[0].([]TelemetrySpecMetricsProviders)[vs[1].(int)]
	}).(TelemetrySpecMetricsProvidersOutput)
}

// Optional.
type TelemetrySpecSelector struct {
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// TelemetrySpecSelectorInput is an input type that accepts TelemetrySpecSelectorArgs and TelemetrySpecSelectorOutput values.
// You can construct a concrete instance of `TelemetrySpecSelectorInput` via:
//
//	TelemetrySpecSelectorArgs{...}
type TelemetrySpecSelectorInput interface {
	pulumi.Input

	ToTelemetrySpecSelectorOutput() TelemetrySpecSelectorOutput
	ToTelemetrySpecSelectorOutputWithContext(context.Context) TelemetrySpecSelectorOutput
}

// Optional.
type TelemetrySpecSelectorArgs struct {
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (TelemetrySpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecSelector)(nil)).Elem()
}

func (i TelemetrySpecSelectorArgs) ToTelemetrySpecSelectorOutput() TelemetrySpecSelectorOutput {
	return i.ToTelemetrySpecSelectorOutputWithContext(context.Background())
}

func (i TelemetrySpecSelectorArgs) ToTelemetrySpecSelectorOutputWithContext(ctx context.Context) TelemetrySpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecSelectorOutput)
}

func (i TelemetrySpecSelectorArgs) ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput {
	return i.ToTelemetrySpecSelectorPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecSelectorArgs) ToTelemetrySpecSelectorPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecSelectorOutput).ToTelemetrySpecSelectorPtrOutputWithContext(ctx)
}

// TelemetrySpecSelectorPtrInput is an input type that accepts TelemetrySpecSelectorArgs, TelemetrySpecSelectorPtr and TelemetrySpecSelectorPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecSelectorPtrInput` via:
//
//	        TelemetrySpecSelectorArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecSelectorPtrInput interface {
	pulumi.Input

	ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput
	ToTelemetrySpecSelectorPtrOutputWithContext(context.Context) TelemetrySpecSelectorPtrOutput
}

type telemetrySpecSelectorPtrType TelemetrySpecSelectorArgs

func TelemetrySpecSelectorPtr(v *TelemetrySpecSelectorArgs) TelemetrySpecSelectorPtrInput {
	return (*telemetrySpecSelectorPtrType)(v)
}

func (*telemetrySpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecSelector)(nil)).Elem()
}

func (i *telemetrySpecSelectorPtrType) ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput {
	return i.ToTelemetrySpecSelectorPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecSelectorPtrType) ToTelemetrySpecSelectorPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecSelectorPtrOutput)
}

// Optional.
type TelemetrySpecSelectorOutput struct{ *pulumi.OutputState }

func (TelemetrySpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecSelector)(nil)).Elem()
}

func (o TelemetrySpecSelectorOutput) ToTelemetrySpecSelectorOutput() TelemetrySpecSelectorOutput {
	return o
}

func (o TelemetrySpecSelectorOutput) ToTelemetrySpecSelectorOutputWithContext(ctx context.Context) TelemetrySpecSelectorOutput {
	return o
}

func (o TelemetrySpecSelectorOutput) ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput {
	return o.ToTelemetrySpecSelectorPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecSelectorOutput) ToTelemetrySpecSelectorPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecSelector) *TelemetrySpecSelector {
		return &v
	}).(TelemetrySpecSelectorPtrOutput)
}

func (o TelemetrySpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TelemetrySpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type TelemetrySpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecSelector)(nil)).Elem()
}

func (o TelemetrySpecSelectorPtrOutput) ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput {
	return o
}

func (o TelemetrySpecSelectorPtrOutput) ToTelemetrySpecSelectorPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPtrOutput {
	return o
}

func (o TelemetrySpecSelectorPtrOutput) Elem() TelemetrySpecSelectorOutput {
	return o.ApplyT(func(v *TelemetrySpecSelector) TelemetrySpecSelector {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecSelector
		return ret
	}).(TelemetrySpecSelectorOutput)
}

func (o TelemetrySpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TelemetrySpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type TelemetrySpecSelectorMatchlabels struct {
}

type TelemetrySpecTracing struct {
	// Optional.
	CustomTags map[string]interface{} `pulumi:"customTags"`
	// Controls span reporting.
	DisableSpanReporting *bool `pulumi:"disableSpanReporting"`
	// Allows tailoring of behavior to specific conditions.
	Match *TelemetrySpecTracingMatch `pulumi:"match"`
	// Optional.
	Providers                    []TelemetrySpecTracingProviders `pulumi:"providers"`
	RandomSamplingPercentage     *float64                        `pulumi:"randomSamplingPercentage"`
	UseRequestIdForTraceSampling *bool                           `pulumi:"useRequestIdForTraceSampling"`
}

// TelemetrySpecTracingInput is an input type that accepts TelemetrySpecTracingArgs and TelemetrySpecTracingOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingInput` via:
//
//	TelemetrySpecTracingArgs{...}
type TelemetrySpecTracingInput interface {
	pulumi.Input

	ToTelemetrySpecTracingOutput() TelemetrySpecTracingOutput
	ToTelemetrySpecTracingOutputWithContext(context.Context) TelemetrySpecTracingOutput
}

type TelemetrySpecTracingArgs struct {
	// Optional.
	CustomTags pulumi.MapInput `pulumi:"customTags"`
	// Controls span reporting.
	DisableSpanReporting pulumi.BoolPtrInput `pulumi:"disableSpanReporting"`
	// Allows tailoring of behavior to specific conditions.
	Match TelemetrySpecTracingMatchPtrInput `pulumi:"match"`
	// Optional.
	Providers                    TelemetrySpecTracingProvidersArrayInput `pulumi:"providers"`
	RandomSamplingPercentage     pulumi.Float64PtrInput                  `pulumi:"randomSamplingPercentage"`
	UseRequestIdForTraceSampling pulumi.BoolPtrInput                     `pulumi:"useRequestIdForTraceSampling"`
}

func (TelemetrySpecTracingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracing)(nil)).Elem()
}

func (i TelemetrySpecTracingArgs) ToTelemetrySpecTracingOutput() TelemetrySpecTracingOutput {
	return i.ToTelemetrySpecTracingOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingArgs) ToTelemetrySpecTracingOutputWithContext(ctx context.Context) TelemetrySpecTracingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingOutput)
}

// TelemetrySpecTracingArrayInput is an input type that accepts TelemetrySpecTracingArray and TelemetrySpecTracingArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingArrayInput` via:
//
//	TelemetrySpecTracingArray{ TelemetrySpecTracingArgs{...} }
type TelemetrySpecTracingArrayInput interface {
	pulumi.Input

	ToTelemetrySpecTracingArrayOutput() TelemetrySpecTracingArrayOutput
	ToTelemetrySpecTracingArrayOutputWithContext(context.Context) TelemetrySpecTracingArrayOutput
}

type TelemetrySpecTracingArray []TelemetrySpecTracingInput

func (TelemetrySpecTracingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracing)(nil)).Elem()
}

func (i TelemetrySpecTracingArray) ToTelemetrySpecTracingArrayOutput() TelemetrySpecTracingArrayOutput {
	return i.ToTelemetrySpecTracingArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingArray) ToTelemetrySpecTracingArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingArrayOutput)
}

type TelemetrySpecTracingOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracing)(nil)).Elem()
}

func (o TelemetrySpecTracingOutput) ToTelemetrySpecTracingOutput() TelemetrySpecTracingOutput {
	return o
}

func (o TelemetrySpecTracingOutput) ToTelemetrySpecTracingOutputWithContext(ctx context.Context) TelemetrySpecTracingOutput {
	return o
}

// Optional.
func (o TelemetrySpecTracingOutput) CustomTags() pulumi.MapOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) map[string]interface{} { return v.CustomTags }).(pulumi.MapOutput)
}

// Controls span reporting.
func (o TelemetrySpecTracingOutput) DisableSpanReporting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) *bool { return v.DisableSpanReporting }).(pulumi.BoolPtrOutput)
}

// Allows tailoring of behavior to specific conditions.
func (o TelemetrySpecTracingOutput) Match() TelemetrySpecTracingMatchPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) *TelemetrySpecTracingMatch { return v.Match }).(TelemetrySpecTracingMatchPtrOutput)
}

// Optional.
func (o TelemetrySpecTracingOutput) Providers() TelemetrySpecTracingProvidersArrayOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) []TelemetrySpecTracingProviders { return v.Providers }).(TelemetrySpecTracingProvidersArrayOutput)
}

func (o TelemetrySpecTracingOutput) RandomSamplingPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) *float64 { return v.RandomSamplingPercentage }).(pulumi.Float64PtrOutput)
}

func (o TelemetrySpecTracingOutput) UseRequestIdForTraceSampling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) *bool { return v.UseRequestIdForTraceSampling }).(pulumi.BoolPtrOutput)
}

type TelemetrySpecTracingArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracing)(nil)).Elem()
}

func (o TelemetrySpecTracingArrayOutput) ToTelemetrySpecTracingArrayOutput() TelemetrySpecTracingArrayOutput {
	return o
}

func (o TelemetrySpecTracingArrayOutput) ToTelemetrySpecTracingArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingArrayOutput {
	return o
}

func (o TelemetrySpecTracingArrayOutput) Index(i pulumi.IntInput) TelemetrySpecTracingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecTracing {
		return vs[0].([]TelemetrySpecTracing)[vs[1].(int)]
	}).(TelemetrySpecTracingOutput)
}

// Optional.
type TelemetrySpecTracingCustomtags struct {
}

// Allows tailoring of behavior to specific conditions.
type TelemetrySpecTracingMatch struct {
	Mode *string `pulumi:"mode"`
}

// TelemetrySpecTracingMatchInput is an input type that accepts TelemetrySpecTracingMatchArgs and TelemetrySpecTracingMatchOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingMatchInput` via:
//
//	TelemetrySpecTracingMatchArgs{...}
type TelemetrySpecTracingMatchInput interface {
	pulumi.Input

	ToTelemetrySpecTracingMatchOutput() TelemetrySpecTracingMatchOutput
	ToTelemetrySpecTracingMatchOutputWithContext(context.Context) TelemetrySpecTracingMatchOutput
}

// Allows tailoring of behavior to specific conditions.
type TelemetrySpecTracingMatchArgs struct {
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (TelemetrySpecTracingMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingMatch)(nil)).Elem()
}

func (i TelemetrySpecTracingMatchArgs) ToTelemetrySpecTracingMatchOutput() TelemetrySpecTracingMatchOutput {
	return i.ToTelemetrySpecTracingMatchOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingMatchArgs) ToTelemetrySpecTracingMatchOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingMatchOutput)
}

func (i TelemetrySpecTracingMatchArgs) ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput {
	return i.ToTelemetrySpecTracingMatchPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingMatchArgs) ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingMatchOutput).ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx)
}

// TelemetrySpecTracingMatchPtrInput is an input type that accepts TelemetrySpecTracingMatchArgs, TelemetrySpecTracingMatchPtr and TelemetrySpecTracingMatchPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingMatchPtrInput` via:
//
//	        TelemetrySpecTracingMatchArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecTracingMatchPtrInput interface {
	pulumi.Input

	ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput
	ToTelemetrySpecTracingMatchPtrOutputWithContext(context.Context) TelemetrySpecTracingMatchPtrOutput
}

type telemetrySpecTracingMatchPtrType TelemetrySpecTracingMatchArgs

func TelemetrySpecTracingMatchPtr(v *TelemetrySpecTracingMatchArgs) TelemetrySpecTracingMatchPtrInput {
	return (*telemetrySpecTracingMatchPtrType)(v)
}

func (*telemetrySpecTracingMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecTracingMatch)(nil)).Elem()
}

func (i *telemetrySpecTracingMatchPtrType) ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput {
	return i.ToTelemetrySpecTracingMatchPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecTracingMatchPtrType) ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingMatchPtrOutput)
}

// Allows tailoring of behavior to specific conditions.
type TelemetrySpecTracingMatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingMatch)(nil)).Elem()
}

func (o TelemetrySpecTracingMatchOutput) ToTelemetrySpecTracingMatchOutput() TelemetrySpecTracingMatchOutput {
	return o
}

func (o TelemetrySpecTracingMatchOutput) ToTelemetrySpecTracingMatchOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchOutput {
	return o
}

func (o TelemetrySpecTracingMatchOutput) ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput {
	return o.ToTelemetrySpecTracingMatchPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecTracingMatchOutput) ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecTracingMatch) *TelemetrySpecTracingMatch {
		return &v
	}).(TelemetrySpecTracingMatchPtrOutput)
}

func (o TelemetrySpecTracingMatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracingMatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type TelemetrySpecTracingMatchPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecTracingMatch)(nil)).Elem()
}

func (o TelemetrySpecTracingMatchPtrOutput) ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput {
	return o
}

func (o TelemetrySpecTracingMatchPtrOutput) ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPtrOutput {
	return o
}

func (o TelemetrySpecTracingMatchPtrOutput) Elem() TelemetrySpecTracingMatchOutput {
	return o.ApplyT(func(v *TelemetrySpecTracingMatch) TelemetrySpecTracingMatch {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecTracingMatch
		return ret
	}).(TelemetrySpecTracingMatchOutput)
}

func (o TelemetrySpecTracingMatchPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTracingMatch) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

type TelemetrySpecTracingProviders struct {
	// Required.
	Name *string `pulumi:"name"`
}

// TelemetrySpecTracingProvidersInput is an input type that accepts TelemetrySpecTracingProvidersArgs and TelemetrySpecTracingProvidersOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingProvidersInput` via:
//
//	TelemetrySpecTracingProvidersArgs{...}
type TelemetrySpecTracingProvidersInput interface {
	pulumi.Input

	ToTelemetrySpecTracingProvidersOutput() TelemetrySpecTracingProvidersOutput
	ToTelemetrySpecTracingProvidersOutputWithContext(context.Context) TelemetrySpecTracingProvidersOutput
}

type TelemetrySpecTracingProvidersArgs struct {
	// Required.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TelemetrySpecTracingProvidersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingProviders)(nil)).Elem()
}

func (i TelemetrySpecTracingProvidersArgs) ToTelemetrySpecTracingProvidersOutput() TelemetrySpecTracingProvidersOutput {
	return i.ToTelemetrySpecTracingProvidersOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingProvidersArgs) ToTelemetrySpecTracingProvidersOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingProvidersOutput)
}

// TelemetrySpecTracingProvidersArrayInput is an input type that accepts TelemetrySpecTracingProvidersArray and TelemetrySpecTracingProvidersArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingProvidersArrayInput` via:
//
//	TelemetrySpecTracingProvidersArray{ TelemetrySpecTracingProvidersArgs{...} }
type TelemetrySpecTracingProvidersArrayInput interface {
	pulumi.Input

	ToTelemetrySpecTracingProvidersArrayOutput() TelemetrySpecTracingProvidersArrayOutput
	ToTelemetrySpecTracingProvidersArrayOutputWithContext(context.Context) TelemetrySpecTracingProvidersArrayOutput
}

type TelemetrySpecTracingProvidersArray []TelemetrySpecTracingProvidersInput

func (TelemetrySpecTracingProvidersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracingProviders)(nil)).Elem()
}

func (i TelemetrySpecTracingProvidersArray) ToTelemetrySpecTracingProvidersArrayOutput() TelemetrySpecTracingProvidersArrayOutput {
	return i.ToTelemetrySpecTracingProvidersArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingProvidersArray) ToTelemetrySpecTracingProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingProvidersArrayOutput)
}

type TelemetrySpecTracingProvidersOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingProvidersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingProviders)(nil)).Elem()
}

func (o TelemetrySpecTracingProvidersOutput) ToTelemetrySpecTracingProvidersOutput() TelemetrySpecTracingProvidersOutput {
	return o
}

func (o TelemetrySpecTracingProvidersOutput) ToTelemetrySpecTracingProvidersOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersOutput {
	return o
}

// Required.
func (o TelemetrySpecTracingProvidersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracingProviders) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TelemetrySpecTracingProvidersArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingProvidersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracingProviders)(nil)).Elem()
}

func (o TelemetrySpecTracingProvidersArrayOutput) ToTelemetrySpecTracingProvidersArrayOutput() TelemetrySpecTracingProvidersArrayOutput {
	return o
}

func (o TelemetrySpecTracingProvidersArrayOutput) ToTelemetrySpecTracingProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersArrayOutput {
	return o
}

func (o TelemetrySpecTracingProvidersArrayOutput) Index(i pulumi.IntInput) TelemetrySpecTracingProvidersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecTracingProviders {
		return vs[0].([]TelemetrySpecTracingProviders)[vs[1].(int)]
	}).(TelemetrySpecTracingProvidersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecInput)(nil)).Elem(), TelemetrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecPtrInput)(nil)).Elem(), TelemetrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessloggingInput)(nil)).Elem(), TelemetrySpecAccessloggingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessloggingArrayInput)(nil)).Elem(), TelemetrySpecAccessloggingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessloggingFilterInput)(nil)).Elem(), TelemetrySpecAccessloggingFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessloggingFilterPtrInput)(nil)).Elem(), TelemetrySpecAccessloggingFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessloggingMatchInput)(nil)).Elem(), TelemetrySpecAccessloggingMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessloggingMatchPtrInput)(nil)).Elem(), TelemetrySpecAccessloggingMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessloggingProvidersInput)(nil)).Elem(), TelemetrySpecAccessloggingProvidersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessloggingProvidersArrayInput)(nil)).Elem(), TelemetrySpecAccessloggingProvidersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsInput)(nil)).Elem(), TelemetrySpecMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsArrayInput)(nil)).Elem(), TelemetrySpecMetricsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesInput)(nil)).Elem(), TelemetrySpecMetricsOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesArrayInput)(nil)).Elem(), TelemetrySpecMetricsOverridesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesTagoverridesInput)(nil)).Elem(), TelemetrySpecMetricsOverridesTagoverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesTagoverridesMapInput)(nil)).Elem(), TelemetrySpecMetricsOverridesTagoverridesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsProvidersInput)(nil)).Elem(), TelemetrySpecMetricsProvidersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsProvidersArrayInput)(nil)).Elem(), TelemetrySpecMetricsProvidersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecSelectorInput)(nil)).Elem(), TelemetrySpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecSelectorPtrInput)(nil)).Elem(), TelemetrySpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingInput)(nil)).Elem(), TelemetrySpecTracingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingArrayInput)(nil)).Elem(), TelemetrySpecTracingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingMatchInput)(nil)).Elem(), TelemetrySpecTracingMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingMatchPtrInput)(nil)).Elem(), TelemetrySpecTracingMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingProvidersInput)(nil)).Elem(), TelemetrySpecTracingProvidersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingProvidersArrayInput)(nil)).Elem(), TelemetrySpecTracingProvidersArray{})
	pulumi.RegisterOutputType(TelemetrySpecOutput{})
	pulumi.RegisterOutputType(TelemetrySpecPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessloggingOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessloggingArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessloggingFilterOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessloggingFilterPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessloggingMatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessloggingMatchPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessloggingProvidersOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessloggingProvidersArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesTagoverridesOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesTagoverridesMapOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsProvidersOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsProvidersArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecSelectorOutput{})
	pulumi.RegisterOutputType(TelemetrySpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingMatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingMatchPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingProvidersOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingProvidersArrayOutput{})
}
