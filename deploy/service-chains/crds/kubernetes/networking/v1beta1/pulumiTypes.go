// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DestinationRuleType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Configuration affecting load balancing, outlier detection, etc. See more details at: https://istio.io/docs/reference/config/networking/destination-rule.html
	Spec   *DestinationRuleSpec   `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Configuration affecting load balancing, outlier detection, etc. See more details at: https://istio.io/docs/reference/config/networking/destination-rule.html
type DestinationRuleSpec struct {
	// A list of namespaces to which this destination rule is exported.
	ExportTo []string `pulumi:"exportTo"`
	// The name of a service from the service registry.
	Host             *string                              `pulumi:"host"`
	Subsets          []DestinationRuleSpecSubsets         `pulumi:"subsets"`
	TrafficPolicy    *DestinationRuleSpecTrafficpolicy    `pulumi:"trafficPolicy"`
	WorkloadSelector *DestinationRuleSpecWorkloadselector `pulumi:"workloadSelector"`
}

// DestinationRuleSpecInput is an input type that accepts DestinationRuleSpecArgs and DestinationRuleSpecOutput values.
// You can construct a concrete instance of `DestinationRuleSpecInput` via:
//
//	DestinationRuleSpecArgs{...}
type DestinationRuleSpecInput interface {
	pulumi.Input

	ToDestinationRuleSpecOutput() DestinationRuleSpecOutput
	ToDestinationRuleSpecOutputWithContext(context.Context) DestinationRuleSpecOutput
}

// Configuration affecting load balancing, outlier detection, etc. See more details at: https://istio.io/docs/reference/config/networking/destination-rule.html
type DestinationRuleSpecArgs struct {
	// A list of namespaces to which this destination rule is exported.
	ExportTo pulumi.StringArrayInput `pulumi:"exportTo"`
	// The name of a service from the service registry.
	Host             pulumi.StringPtrInput                       `pulumi:"host"`
	Subsets          DestinationRuleSpecSubsetsArrayInput        `pulumi:"subsets"`
	TrafficPolicy    DestinationRuleSpecTrafficpolicyPtrInput    `pulumi:"trafficPolicy"`
	WorkloadSelector DestinationRuleSpecWorkloadselectorPtrInput `pulumi:"workloadSelector"`
}

func (DestinationRuleSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpec)(nil)).Elem()
}

func (i DestinationRuleSpecArgs) ToDestinationRuleSpecOutput() DestinationRuleSpecOutput {
	return i.ToDestinationRuleSpecOutputWithContext(context.Background())
}

func (i DestinationRuleSpecArgs) ToDestinationRuleSpecOutputWithContext(ctx context.Context) DestinationRuleSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecOutput)
}

func (i DestinationRuleSpecArgs) ToDestinationRuleSpecPtrOutput() DestinationRuleSpecPtrOutput {
	return i.ToDestinationRuleSpecPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecArgs) ToDestinationRuleSpecPtrOutputWithContext(ctx context.Context) DestinationRuleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecOutput).ToDestinationRuleSpecPtrOutputWithContext(ctx)
}

// DestinationRuleSpecPtrInput is an input type that accepts DestinationRuleSpecArgs, DestinationRuleSpecPtr and DestinationRuleSpecPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecPtrInput` via:
//
//	        DestinationRuleSpecArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecPtrOutput() DestinationRuleSpecPtrOutput
	ToDestinationRuleSpecPtrOutputWithContext(context.Context) DestinationRuleSpecPtrOutput
}

type destinationRuleSpecPtrType DestinationRuleSpecArgs

func DestinationRuleSpecPtr(v *DestinationRuleSpecArgs) DestinationRuleSpecPtrInput {
	return (*destinationRuleSpecPtrType)(v)
}

func (*destinationRuleSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpec)(nil)).Elem()
}

func (i *destinationRuleSpecPtrType) ToDestinationRuleSpecPtrOutput() DestinationRuleSpecPtrOutput {
	return i.ToDestinationRuleSpecPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecPtrType) ToDestinationRuleSpecPtrOutputWithContext(ctx context.Context) DestinationRuleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecPtrOutput)
}

// Configuration affecting load balancing, outlier detection, etc. See more details at: https://istio.io/docs/reference/config/networking/destination-rule.html
type DestinationRuleSpecOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpec)(nil)).Elem()
}

func (o DestinationRuleSpecOutput) ToDestinationRuleSpecOutput() DestinationRuleSpecOutput {
	return o
}

func (o DestinationRuleSpecOutput) ToDestinationRuleSpecOutputWithContext(ctx context.Context) DestinationRuleSpecOutput {
	return o
}

func (o DestinationRuleSpecOutput) ToDestinationRuleSpecPtrOutput() DestinationRuleSpecPtrOutput {
	return o.ToDestinationRuleSpecPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecOutput) ToDestinationRuleSpecPtrOutputWithContext(ctx context.Context) DestinationRuleSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpec) *DestinationRuleSpec {
		return &v
	}).(DestinationRuleSpecPtrOutput)
}

// A list of namespaces to which this destination rule is exported.
func (o DestinationRuleSpecOutput) ExportTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpec) []string { return v.ExportTo }).(pulumi.StringArrayOutput)
}

// The name of a service from the service registry.
func (o DestinationRuleSpecOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpec) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecOutput) Subsets() DestinationRuleSpecSubsetsArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpec) []DestinationRuleSpecSubsets { return v.Subsets }).(DestinationRuleSpecSubsetsArrayOutput)
}

func (o DestinationRuleSpecOutput) TrafficPolicy() DestinationRuleSpecTrafficpolicyPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpec) *DestinationRuleSpecTrafficpolicy { return v.TrafficPolicy }).(DestinationRuleSpecTrafficpolicyPtrOutput)
}

func (o DestinationRuleSpecOutput) WorkloadSelector() DestinationRuleSpecWorkloadselectorPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpec) *DestinationRuleSpecWorkloadselector { return v.WorkloadSelector }).(DestinationRuleSpecWorkloadselectorPtrOutput)
}

type DestinationRuleSpecPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpec)(nil)).Elem()
}

func (o DestinationRuleSpecPtrOutput) ToDestinationRuleSpecPtrOutput() DestinationRuleSpecPtrOutput {
	return o
}

func (o DestinationRuleSpecPtrOutput) ToDestinationRuleSpecPtrOutputWithContext(ctx context.Context) DestinationRuleSpecPtrOutput {
	return o
}

func (o DestinationRuleSpecPtrOutput) Elem() DestinationRuleSpecOutput {
	return o.ApplyT(func(v *DestinationRuleSpec) DestinationRuleSpec {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpec
		return ret
	}).(DestinationRuleSpecOutput)
}

// A list of namespaces to which this destination rule is exported.
func (o DestinationRuleSpecPtrOutput) ExportTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExportTo
	}).(pulumi.StringArrayOutput)
}

// The name of a service from the service registry.
func (o DestinationRuleSpecPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpec) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecPtrOutput) Subsets() DestinationRuleSpecSubsetsArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpec) []DestinationRuleSpecSubsets {
		if v == nil {
			return nil
		}
		return v.Subsets
	}).(DestinationRuleSpecSubsetsArrayOutput)
}

func (o DestinationRuleSpecPtrOutput) TrafficPolicy() DestinationRuleSpecTrafficpolicyPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpec) *DestinationRuleSpecTrafficpolicy {
		if v == nil {
			return nil
		}
		return v.TrafficPolicy
	}).(DestinationRuleSpecTrafficpolicyPtrOutput)
}

func (o DestinationRuleSpecPtrOutput) WorkloadSelector() DestinationRuleSpecWorkloadselectorPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpec) *DestinationRuleSpecWorkloadselector {
		if v == nil {
			return nil
		}
		return v.WorkloadSelector
	}).(DestinationRuleSpecWorkloadselectorPtrOutput)
}

type DestinationRuleSpecSubsets struct {
	Labels map[string]string `pulumi:"labels"`
	// Name of the subset.
	Name *string `pulumi:"name"`
	// Traffic policies that apply to this subset.
	TrafficPolicy *DestinationRuleSpecSubsetsTrafficpolicy `pulumi:"trafficPolicy"`
}

// DestinationRuleSpecSubsetsInput is an input type that accepts DestinationRuleSpecSubsetsArgs and DestinationRuleSpecSubsetsOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsInput` via:
//
//	DestinationRuleSpecSubsetsArgs{...}
type DestinationRuleSpecSubsetsInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsOutput() DestinationRuleSpecSubsetsOutput
	ToDestinationRuleSpecSubsetsOutputWithContext(context.Context) DestinationRuleSpecSubsetsOutput
}

type DestinationRuleSpecSubsetsArgs struct {
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Name of the subset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Traffic policies that apply to this subset.
	TrafficPolicy DestinationRuleSpecSubsetsTrafficpolicyPtrInput `pulumi:"trafficPolicy"`
}

func (DestinationRuleSpecSubsetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsets)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsArgs) ToDestinationRuleSpecSubsetsOutput() DestinationRuleSpecSubsetsOutput {
	return i.ToDestinationRuleSpecSubsetsOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsArgs) ToDestinationRuleSpecSubsetsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsOutput)
}

// DestinationRuleSpecSubsetsArrayInput is an input type that accepts DestinationRuleSpecSubsetsArray and DestinationRuleSpecSubsetsArrayOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsArrayInput` via:
//
//	DestinationRuleSpecSubsetsArray{ DestinationRuleSpecSubsetsArgs{...} }
type DestinationRuleSpecSubsetsArrayInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsArrayOutput() DestinationRuleSpecSubsetsArrayOutput
	ToDestinationRuleSpecSubsetsArrayOutputWithContext(context.Context) DestinationRuleSpecSubsetsArrayOutput
}

type DestinationRuleSpecSubsetsArray []DestinationRuleSpecSubsetsInput

func (DestinationRuleSpecSubsetsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationRuleSpecSubsets)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsArray) ToDestinationRuleSpecSubsetsArrayOutput() DestinationRuleSpecSubsetsArrayOutput {
	return i.ToDestinationRuleSpecSubsetsArrayOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsArray) ToDestinationRuleSpecSubsetsArrayOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsArrayOutput)
}

type DestinationRuleSpecSubsetsOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsets)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsOutput) ToDestinationRuleSpecSubsetsOutput() DestinationRuleSpecSubsetsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsOutput) ToDestinationRuleSpecSubsetsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsets) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the subset.
func (o DestinationRuleSpecSubsetsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsets) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Traffic policies that apply to this subset.
func (o DestinationRuleSpecSubsetsOutput) TrafficPolicy() DestinationRuleSpecSubsetsTrafficpolicyPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsets) *DestinationRuleSpecSubsetsTrafficpolicy { return v.TrafficPolicy }).(DestinationRuleSpecSubsetsTrafficpolicyPtrOutput)
}

type DestinationRuleSpecSubsetsArrayOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationRuleSpecSubsets)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsArrayOutput) ToDestinationRuleSpecSubsetsArrayOutput() DestinationRuleSpecSubsetsArrayOutput {
	return o
}

func (o DestinationRuleSpecSubsetsArrayOutput) ToDestinationRuleSpecSubsetsArrayOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsArrayOutput {
	return o
}

func (o DestinationRuleSpecSubsetsArrayOutput) Index(i pulumi.IntInput) DestinationRuleSpecSubsetsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DestinationRuleSpecSubsets {
		return vs[0].([]DestinationRuleSpecSubsets)[vs[1].(int)]
	}).(DestinationRuleSpecSubsetsOutput)
}

type DestinationRuleSpecSubsetsLabels struct {
}

// Traffic policies that apply to this subset.
type DestinationRuleSpecSubsetsTrafficpolicy struct {
	ConnectionPool *DestinationRuleSpecSubsetsTrafficpolicyConnectionpool `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     interface{}                                              `pulumi:"loadBalancer"`
	OutlierDetection *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection `pulumi:"outlierDetection"`
	// Traffic policies specific to individual ports.
	PortLevelSettings []DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings `pulumi:"portLevelSettings"`
	// TLS related settings for connections to the upstream service.
	Tls    *DestinationRuleSpecSubsetsTrafficpolicyTls    `pulumi:"tls"`
	Tunnel *DestinationRuleSpecSubsetsTrafficpolicyTunnel `pulumi:"tunnel"`
}

// DestinationRuleSpecSubsetsTrafficpolicyInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyArgs and DestinationRuleSpecSubsetsTrafficpolicyOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyOutput() DestinationRuleSpecSubsetsTrafficpolicyOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyOutput
}

// Traffic policies that apply to this subset.
type DestinationRuleSpecSubsetsTrafficpolicyArgs struct {
	ConnectionPool DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrInput `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     pulumi.Input                                                    `pulumi:"loadBalancer"`
	OutlierDetection DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrInput `pulumi:"outlierDetection"`
	// Traffic policies specific to individual ports.
	PortLevelSettings DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayInput `pulumi:"portLevelSettings"`
	// TLS related settings for connections to the upstream service.
	Tls    DestinationRuleSpecSubsetsTrafficpolicyTlsPtrInput    `pulumi:"tls"`
	Tunnel DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrInput `pulumi:"tunnel"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicy)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyArgs) ToDestinationRuleSpecSubsetsTrafficpolicyOutput() DestinationRuleSpecSubsetsTrafficpolicyOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyArgs) ToDestinationRuleSpecSubsetsTrafficpolicyOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyOutput).ToDestinationRuleSpecSubsetsTrafficpolicyPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyArgs, DestinationRuleSpecSubsetsTrafficpolicyPtr and DestinationRuleSpecSubsetsTrafficpolicyPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyPtrType DestinationRuleSpecSubsetsTrafficpolicyArgs

func DestinationRuleSpecSubsetsTrafficpolicyPtr(v *DestinationRuleSpecSubsetsTrafficpolicyArgs) DestinationRuleSpecSubsetsTrafficpolicyPtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicy)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPtrOutput)
}

// Traffic policies that apply to this subset.
type DestinationRuleSpecSubsetsTrafficpolicyOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicy)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutput) ToDestinationRuleSpecSubsetsTrafficpolicyOutput() DestinationRuleSpecSubsetsTrafficpolicyOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutput) ToDestinationRuleSpecSubsetsTrafficpolicyOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicy) *DestinationRuleSpecSubsetsTrafficpolicy {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutput) ConnectionPool() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicy) *DestinationRuleSpecSubsetsTrafficpolicyConnectionpool {
		return v.ConnectionPool
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput)
}

// Settings controlling the load balancer algorithms.
func (o DestinationRuleSpecSubsetsTrafficpolicyOutput) LoadBalancer() pulumi.AnyOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicy) interface{} { return v.LoadBalancer }).(pulumi.AnyOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutput) OutlierDetection() DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicy) *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection {
		return v.OutlierDetection
	}).(DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput)
}

// Traffic policies specific to individual ports.
func (o DestinationRuleSpecSubsetsTrafficpolicyOutput) PortLevelSettings() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicy) []DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings {
		return v.PortLevelSettings
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput)
}

// TLS related settings for connections to the upstream service.
func (o DestinationRuleSpecSubsetsTrafficpolicyOutput) Tls() DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicy) *DestinationRuleSpecSubsetsTrafficpolicyTls {
		return v.Tls
	}).(DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutput) Tunnel() DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicy) *DestinationRuleSpecSubsetsTrafficpolicyTunnel {
		return v.Tunnel
	}).(DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicy)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicy) DestinationRuleSpecSubsetsTrafficpolicy {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicy
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPtrOutput) ConnectionPool() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicy) *DestinationRuleSpecSubsetsTrafficpolicyConnectionpool {
		if v == nil {
			return nil
		}
		return v.ConnectionPool
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput)
}

// Settings controlling the load balancer algorithms.
func (o DestinationRuleSpecSubsetsTrafficpolicyPtrOutput) LoadBalancer() pulumi.AnyOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicy) interface{} {
		if v == nil {
			return nil
		}
		return v.LoadBalancer
	}).(pulumi.AnyOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPtrOutput) OutlierDetection() DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicy) *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection {
		if v == nil {
			return nil
		}
		return v.OutlierDetection
	}).(DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput)
}

// Traffic policies specific to individual ports.
func (o DestinationRuleSpecSubsetsTrafficpolicyPtrOutput) PortLevelSettings() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicy) []DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings {
		if v == nil {
			return nil
		}
		return v.PortLevelSettings
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput)
}

// TLS related settings for connections to the upstream service.
func (o DestinationRuleSpecSubsetsTrafficpolicyPtrOutput) Tls() DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicy) *DestinationRuleSpecSubsetsTrafficpolicyTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPtrOutput) Tunnel() DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicy) *DestinationRuleSpecSubsetsTrafficpolicyTunnel {
		if v == nil {
			return nil
		}
		return v.Tunnel
	}).(DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyConnectionpool struct {
	// HTTP connection pool settings.
	Http *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp `pulumi:"tcp"`
}

// DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolArgs and DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput
}

type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolArgs struct {
	// HTTP connection pool settings.
	Http DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrInput `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrInput `pulumi:"tcp"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpool)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput).ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolArgs, DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtr and DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrType DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolArgs

func DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtr(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolArgs) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyConnectionpool)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpool)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicyConnectionpool) *DestinationRuleSpecSubsetsTrafficpolicyConnectionpool {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput) Http() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpool) *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp {
		return v.Http
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput) Tcp() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpool) *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp {
		return v.Tcp
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyConnectionpool)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpool) DestinationRuleSpecSubsetsTrafficpolicyConnectionpool {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicyConnectionpool
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput) Http() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpool) *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput) Tcp() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpool) *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	H2UpgradePolicy         *string `pulumi:"h2UpgradePolicy"`
	Http1MaxPendingRequests *int    `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests *int `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection *int `pulumi:"maxRequestsPerConnection"`
	MaxRetries               *int `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol *bool `pulumi:"useClientProtocol"`
}

// DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpArgs and DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput
}

// HTTP connection pool settings.
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpArgs struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	H2UpgradePolicy         pulumi.StringPtrInput `pulumi:"h2UpgradePolicy"`
	Http1MaxPendingRequests pulumi.IntPtrInput    `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests pulumi.IntPtrInput `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection pulumi.IntPtrInput `pulumi:"maxRequestsPerConnection"`
	MaxRetries               pulumi.IntPtrInput `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol pulumi.BoolPtrInput `pulumi:"useClientProtocol"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput).ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpArgs, DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtr and DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrType DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpArgs

func DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtr(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpArgs) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *string { return v.H2UpgradePolicy }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *int {
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *int { return v.Http2MaxRequests }).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *string { return v.IdleTimeout }).(pulumi.StringPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *int {
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *bool { return v.UseClientProtocol }).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.H2UpgradePolicy
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http2MaxRequests
	}).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttp) *bool {
		if v == nil {
			return nil
		}
		return v.UseClientProtocol
	}).(pulumi.BoolPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp struct {
	// TCP connection timeout.
	ConnectTimeout *string `pulumi:"connectTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration *string `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections *int `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive `pulumi:"tcpKeepalive"`
}

// DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpArgs and DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpArgs struct {
	// TCP connection timeout.
	ConnectTimeout pulumi.StringPtrInput `pulumi:"connectTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration pulumi.StringPtrInput `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrInput `pulumi:"tcpKeepalive"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput).ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpArgs, DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtr and DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrType DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpArgs

func DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtr(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpArgs) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp) *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp) *string { return v.ConnectTimeout }).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp) *string {
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp) *int { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput) TcpKeepalive() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp) *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive {
		return v.TcpKeepalive
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput) TcpKeepalive() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcp) *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive {
		if v == nil {
			return nil
		}
		return v.TcpKeepalive
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive struct {
	// The time duration between keep-alive probes.
	Interval *string `pulumi:"interval"`
	Probes   *int    `pulumi:"probes"`
	Time     *string `pulumi:"time"`
}

// DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs and DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs struct {
	// The time duration between keep-alive probes.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	Probes   pulumi.IntPtrInput    `pulumi:"probes"`
	Time     pulumi.StringPtrInput `pulumi:"time"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput).ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs, DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtr and DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrType DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs

func DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtr(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrType) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrType) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive) *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive) *string {
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive) *int { return v.Probes }).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive) DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive) *int {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection struct {
	// Minimum ejection duration.
	BaseEjectionTime *string `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors *int `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    *int `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors       *int `pulumi:"consecutiveGatewayErrors"`
	ConsecutiveLocalOriginFailures *int `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval           *string `pulumi:"interval"`
	MaxEjectionPercent *int    `pulumi:"maxEjectionPercent"`
	MinHealthPercent   *int    `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors *bool `pulumi:"splitExternalLocalOriginErrors"`
}

// DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionArgs and DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput() DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput
}

type DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionArgs struct {
	// Minimum ejection duration.
	BaseEjectionTime pulumi.StringPtrInput `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors pulumi.IntPtrInput `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    pulumi.IntPtrInput `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors       pulumi.IntPtrInput `pulumi:"consecutiveGatewayErrors"`
	ConsecutiveLocalOriginFailures pulumi.IntPtrInput `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval           pulumi.StringPtrInput `pulumi:"interval"`
	MaxEjectionPercent pulumi.IntPtrInput    `pulumi:"maxEjectionPercent"`
	MinHealthPercent   pulumi.IntPtrInput    `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors pulumi.BoolPtrInput `pulumi:"splitExternalLocalOriginErrors"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionArgs) ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput() DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionArgs) ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionArgs) ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionArgs) ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput).ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionArgs, DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtr and DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrType DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionArgs

func DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtr(v *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionArgs) DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput) ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput() DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput) ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput) ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput) ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *string { return v.BaseEjectionTime }).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *int { return v.Consecutive5xxErrors }).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *int { return v.ConsecutiveErrors }).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *int {
		return v.ConsecutiveGatewayErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *int {
		return v.ConsecutiveLocalOriginFailures
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *int { return v.MaxEjectionPercent }).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *int { return v.MinHealthPercent }).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *bool {
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *string {
		if v == nil {
			return nil
		}
		return v.BaseEjectionTime
	}).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.Consecutive5xxErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveGatewayErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveLocalOriginFailures
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.MinHealthPercent
	}).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyOutlierdetection) *bool {
		if v == nil {
			return nil
		}
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings struct {
	ConnectionPool *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     interface{}                                                               `pulumi:"loadBalancer"`
	OutlierDetection *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection `pulumi:"outlierDetection"`
	Port             *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPort             `pulumi:"port"`
	// TLS related settings for connections to the upstream service.
	Tls *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls `pulumi:"tls"`
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArgs and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArgs struct {
	ConnectionPool DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrInput `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     pulumi.Input                                                                     `pulumi:"loadBalancer"`
	OutlierDetection DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrInput `pulumi:"outlierDetection"`
	Port             DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrInput             `pulumi:"port"`
	// TLS related settings for connections to the upstream service.
	Tls DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrInput `pulumi:"tls"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput)
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArray and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArray{ DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArgs{...} }
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArray []DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsInput

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArray) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArray) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput) ConnectionPool() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool {
		return v.ConnectionPool
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput)
}

// Settings controlling the load balancer algorithms.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput) LoadBalancer() pulumi.AnyOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings) interface{} { return v.LoadBalancer }).(pulumi.AnyOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput) OutlierDetection() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection {
		return v.OutlierDetection
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput) Port() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPort {
		return v.Port
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput)
}

// TLS related settings for connections to the upstream service.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput) Tls() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls {
		return v.Tls
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput) Index(i pulumi.IntInput) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings {
		return vs[0].([]DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettings)[vs[1].(int)]
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool struct {
	// HTTP connection pool settings.
	Http *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp `pulumi:"tcp"`
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolArgs and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolArgs struct {
	// HTTP connection pool settings.
	Http DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrInput `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrInput `pulumi:"tcp"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput).ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolArgs, DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtr and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrType DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolArgs

func DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtr(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolArgs) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput) Http() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp {
		return v.Http
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput) Tcp() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp {
		return v.Tcp
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput) Http() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput) Tcp() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpool) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	H2UpgradePolicy         *string `pulumi:"h2UpgradePolicy"`
	Http1MaxPendingRequests *int    `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests *int `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection *int `pulumi:"maxRequestsPerConnection"`
	MaxRetries               *int `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol *bool `pulumi:"useClientProtocol"`
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput
}

// HTTP connection pool settings.
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	H2UpgradePolicy         pulumi.StringPtrInput `pulumi:"h2UpgradePolicy"`
	Http1MaxPendingRequests pulumi.IntPtrInput    `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests pulumi.IntPtrInput `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection pulumi.IntPtrInput `pulumi:"maxRequestsPerConnection"`
	MaxRetries               pulumi.IntPtrInput `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol pulumi.BoolPtrInput `pulumi:"useClientProtocol"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput).ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs, DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtr and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrType DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs

func DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtr(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *string {
		return v.H2UpgradePolicy
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		return v.Http2MaxRequests
	}).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *string {
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *bool {
		return v.UseClientProtocol
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.H2UpgradePolicy
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http2MaxRequests
	}).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttp) *bool {
		if v == nil {
			return nil
		}
		return v.UseClientProtocol
	}).(pulumi.BoolPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp struct {
	// TCP connection timeout.
	ConnectTimeout *string `pulumi:"connectTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration *string `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections *int `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive `pulumi:"tcpKeepalive"`
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs struct {
	// TCP connection timeout.
	ConnectTimeout pulumi.StringPtrInput `pulumi:"connectTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration pulumi.StringPtrInput `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrInput `pulumi:"tcpKeepalive"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput).ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs, DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtr and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrType DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs

func DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtr(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp) *string {
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp) *string {
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp) *int {
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) TcpKeepalive() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive {
		return v.TcpKeepalive
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) TcpKeepalive() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcp) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive {
		if v == nil {
			return nil
		}
		return v.TcpKeepalive
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive struct {
	// The time duration between keep-alive probes.
	Interval *string `pulumi:"interval"`
	Probes   *int    `pulumi:"probes"`
	Time     *string `pulumi:"time"`
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs struct {
	// The time duration between keep-alive probes.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	Probes   pulumi.IntPtrInput    `pulumi:"probes"`
	Time     pulumi.StringPtrInput `pulumi:"time"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput).ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs, DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtr and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrType DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs

func DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtr(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) *string {
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) *int {
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) *string {
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) *int {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection struct {
	// Minimum ejection duration.
	BaseEjectionTime *string `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors *int `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    *int `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors       *int `pulumi:"consecutiveGatewayErrors"`
	ConsecutiveLocalOriginFailures *int `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval           *string `pulumi:"interval"`
	MaxEjectionPercent *int    `pulumi:"maxEjectionPercent"`
	MinHealthPercent   *int    `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors *bool `pulumi:"splitExternalLocalOriginErrors"`
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionArgs and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionArgs struct {
	// Minimum ejection duration.
	BaseEjectionTime pulumi.StringPtrInput `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors pulumi.IntPtrInput `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    pulumi.IntPtrInput `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors       pulumi.IntPtrInput `pulumi:"consecutiveGatewayErrors"`
	ConsecutiveLocalOriginFailures pulumi.IntPtrInput `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval           pulumi.StringPtrInput `pulumi:"interval"`
	MaxEjectionPercent pulumi.IntPtrInput    `pulumi:"maxEjectionPercent"`
	MinHealthPercent   pulumi.IntPtrInput    `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors pulumi.BoolPtrInput `pulumi:"splitExternalLocalOriginErrors"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput).ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionArgs, DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtr and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrType DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionArgs

func DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtr(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionArgs) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *string {
		return v.BaseEjectionTime
	}).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		return v.Consecutive5xxErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		return v.ConsecutiveGatewayErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		return v.ConsecutiveLocalOriginFailures
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *string {
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		return v.MinHealthPercent
	}).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *bool {
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *string {
		if v == nil {
			return nil
		}
		return v.BaseEjectionTime
	}).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.Consecutive5xxErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveGatewayErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveLocalOriginFailures
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.MinHealthPercent
	}).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetection) *bool {
		if v == nil {
			return nil
		}
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPort struct {
	Number *int `pulumi:"number"`
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortArgs and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPort)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput).ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortArgs, DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtr and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrType DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortArgs

func DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtr(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortArgs) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPort)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPort)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPort) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPort {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPort)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPort) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPort {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPort
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls struct {
	CaCertificates *string `pulumi:"caCertificates"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate  *string `pulumi:"clientCertificate"`
	CredentialName     *string `pulumi:"credentialName"`
	InsecureSkipVerify *bool   `pulumi:"insecureSkipVerify"`
	Mode               *string `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey *string `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni             *string  `pulumi:"sni"`
	SubjectAltNames []string `pulumi:"subjectAltNames"`
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsArgs and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsArgs struct {
	CaCertificates pulumi.StringPtrInput `pulumi:"caCertificates"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate  pulumi.StringPtrInput `pulumi:"clientCertificate"`
	CredentialName     pulumi.StringPtrInput `pulumi:"credentialName"`
	InsecureSkipVerify pulumi.BoolPtrInput   `pulumi:"insecureSkipVerify"`
	Mode               pulumi.StringPtrInput `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni             pulumi.StringPtrInput   `pulumi:"sni"`
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsArgs) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput).ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsArgs, DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtr and DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrType DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsArgs

func DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtr(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsArgs) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *string { return v.CaCertificates }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *string {
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *string { return v.CredentialName }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *string { return v.Sni }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificates
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.CredentialName
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.Sni
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTls) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecSubsetsTrafficpolicyTls struct {
	CaCertificates *string `pulumi:"caCertificates"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate  *string `pulumi:"clientCertificate"`
	CredentialName     *string `pulumi:"credentialName"`
	InsecureSkipVerify *bool   `pulumi:"insecureSkipVerify"`
	Mode               *string `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey *string `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni             *string  `pulumi:"sni"`
	SubjectAltNames []string `pulumi:"subjectAltNames"`
}

// DestinationRuleSpecSubsetsTrafficpolicyTlsInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyTlsArgs and DestinationRuleSpecSubsetsTrafficpolicyTlsOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyTlsInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyTlsArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyTlsInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyTlsOutput() DestinationRuleSpecSubsetsTrafficpolicyTlsOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyTlsOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyTlsOutput
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecSubsetsTrafficpolicyTlsArgs struct {
	CaCertificates pulumi.StringPtrInput `pulumi:"caCertificates"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate  pulumi.StringPtrInput `pulumi:"clientCertificate"`
	CredentialName     pulumi.StringPtrInput `pulumi:"credentialName"`
	InsecureSkipVerify pulumi.BoolPtrInput   `pulumi:"insecureSkipVerify"`
	Mode               pulumi.StringPtrInput `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni             pulumi.StringPtrInput   `pulumi:"sni"`
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyTls)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyTlsArgs) ToDestinationRuleSpecSubsetsTrafficpolicyTlsOutput() DestinationRuleSpecSubsetsTrafficpolicyTlsOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyTlsOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyTlsArgs) ToDestinationRuleSpecSubsetsTrafficpolicyTlsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyTlsOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyTlsArgs) ToDestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyTlsArgs) ToDestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyTlsOutput).ToDestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyTlsPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyTlsArgs, DestinationRuleSpecSubsetsTrafficpolicyTlsPtr and DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyTlsPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyTlsArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyTlsPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyTlsPtrType DestinationRuleSpecSubsetsTrafficpolicyTlsArgs

func DestinationRuleSpecSubsetsTrafficpolicyTlsPtr(v *DestinationRuleSpecSubsetsTrafficpolicyTlsArgs) DestinationRuleSpecSubsetsTrafficpolicyTlsPtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyTlsPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyTls)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyTlsPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyTlsPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecSubsetsTrafficpolicyTlsOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyTls)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsOutput) ToDestinationRuleSpecSubsetsTrafficpolicyTlsOutput() DestinationRuleSpecSubsetsTrafficpolicyTlsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsOutput) ToDestinationRuleSpecSubsetsTrafficpolicyTlsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyTlsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsOutput) ToDestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsOutput) ToDestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicyTls) *DestinationRuleSpecSubsetsTrafficpolicyTls {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyTls) *string { return v.CaCertificates }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficpolicyTlsOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyTls) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyTls) *string { return v.CredentialName }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyTls) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyTls) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficpolicyTlsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyTls) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecSubsetsTrafficpolicyTlsOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyTls) *string { return v.Sni }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyTls) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyTls)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyTlsOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyTls) DestinationRuleSpecSubsetsTrafficpolicyTls {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicyTls
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyTlsOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificates
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.CredentialName
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyTls) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.Sni
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyTls) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyTunnel struct {
	// Specifies which protocol to use for tunneling the downstream connection.
	Protocol *string `pulumi:"protocol"`
	// Specifies a host to which the downstream connection is tunneled.
	TargetHost *string `pulumi:"targetHost"`
	// Specifies a port to which the downstream connection is tunneled.
	TargetPort *int `pulumi:"targetPort"`
}

// DestinationRuleSpecSubsetsTrafficpolicyTunnelInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyTunnelArgs and DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyTunnelInput` via:
//
//	DestinationRuleSpecSubsetsTrafficpolicyTunnelArgs{...}
type DestinationRuleSpecSubsetsTrafficpolicyTunnelInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyTunnelOutput() DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyTunnelOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput
}

type DestinationRuleSpecSubsetsTrafficpolicyTunnelArgs struct {
	// Specifies which protocol to use for tunneling the downstream connection.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Specifies a host to which the downstream connection is tunneled.
	TargetHost pulumi.StringPtrInput `pulumi:"targetHost"`
	// Specifies a port to which the downstream connection is tunneled.
	TargetPort pulumi.IntPtrInput `pulumi:"targetPort"`
}

func (DestinationRuleSpecSubsetsTrafficpolicyTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyTunnel)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficpolicyTunnelArgs) ToDestinationRuleSpecSubsetsTrafficpolicyTunnelOutput() DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyTunnelOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyTunnelArgs) ToDestinationRuleSpecSubsetsTrafficpolicyTunnelOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput)
}

func (i DestinationRuleSpecSubsetsTrafficpolicyTunnelArgs) ToDestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficpolicyTunnelArgs) ToDestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput).ToDestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficpolicyTunnelArgs, DestinationRuleSpecSubsetsTrafficpolicyTunnelPtr and DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficpolicyTunnelArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput
	ToDestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput
}

type destinationRuleSpecSubsetsTrafficpolicyTunnelPtrType DestinationRuleSpecSubsetsTrafficpolicyTunnelArgs

func DestinationRuleSpecSubsetsTrafficpolicyTunnelPtr(v *DestinationRuleSpecSubsetsTrafficpolicyTunnelArgs) DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrInput {
	return (*destinationRuleSpecSubsetsTrafficpolicyTunnelPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficpolicyTunnelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyTunnel)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficpolicyTunnelPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficpolicyTunnelPtrType) ToDestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyTunnel)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput) ToDestinationRuleSpecSubsetsTrafficpolicyTunnelOutput() DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput) ToDestinationRuleSpecSubsetsTrafficpolicyTunnelOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput) ToDestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput) ToDestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficpolicyTunnel) *DestinationRuleSpecSubsetsTrafficpolicyTunnel {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput)
}

// Specifies which protocol to use for tunneling the downstream connection.
func (o DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyTunnel) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Specifies a host to which the downstream connection is tunneled.
func (o DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput) TargetHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyTunnel) *string { return v.TargetHost }).(pulumi.StringPtrOutput)
}

// Specifies a port to which the downstream connection is tunneled.
func (o DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficpolicyTunnel) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficpolicyTunnel)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput() DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput) ToDestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyTunnel) DestinationRuleSpecSubsetsTrafficpolicyTunnel {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficpolicyTunnel
		return ret
	}).(DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput)
}

// Specifies which protocol to use for tunneling the downstream connection.
func (o DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyTunnel) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Specifies a host to which the downstream connection is tunneled.
func (o DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput) TargetHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyTunnel) *string {
		if v == nil {
			return nil
		}
		return v.TargetHost
	}).(pulumi.StringPtrOutput)
}

// Specifies a port to which the downstream connection is tunneled.
func (o DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficpolicyTunnel) *int {
		if v == nil {
			return nil
		}
		return v.TargetPort
	}).(pulumi.IntPtrOutput)
}

type DestinationRuleSpecTrafficpolicy struct {
	ConnectionPool *DestinationRuleSpecTrafficpolicyConnectionpool `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     interface{}                                       `pulumi:"loadBalancer"`
	OutlierDetection *DestinationRuleSpecTrafficpolicyOutlierdetection `pulumi:"outlierDetection"`
	// Traffic policies specific to individual ports.
	PortLevelSettings []DestinationRuleSpecTrafficpolicyPortlevelsettings `pulumi:"portLevelSettings"`
	// TLS related settings for connections to the upstream service.
	Tls    *DestinationRuleSpecTrafficpolicyTls    `pulumi:"tls"`
	Tunnel *DestinationRuleSpecTrafficpolicyTunnel `pulumi:"tunnel"`
}

// DestinationRuleSpecTrafficpolicyInput is an input type that accepts DestinationRuleSpecTrafficpolicyArgs and DestinationRuleSpecTrafficpolicyOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyInput` via:
//
//	DestinationRuleSpecTrafficpolicyArgs{...}
type DestinationRuleSpecTrafficpolicyInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyOutput() DestinationRuleSpecTrafficpolicyOutput
	ToDestinationRuleSpecTrafficpolicyOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyOutput
}

type DestinationRuleSpecTrafficpolicyArgs struct {
	ConnectionPool DestinationRuleSpecTrafficpolicyConnectionpoolPtrInput `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     pulumi.Input                                             `pulumi:"loadBalancer"`
	OutlierDetection DestinationRuleSpecTrafficpolicyOutlierdetectionPtrInput `pulumi:"outlierDetection"`
	// Traffic policies specific to individual ports.
	PortLevelSettings DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayInput `pulumi:"portLevelSettings"`
	// TLS related settings for connections to the upstream service.
	Tls    DestinationRuleSpecTrafficpolicyTlsPtrInput    `pulumi:"tls"`
	Tunnel DestinationRuleSpecTrafficpolicyTunnelPtrInput `pulumi:"tunnel"`
}

func (DestinationRuleSpecTrafficpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicy)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyArgs) ToDestinationRuleSpecTrafficpolicyOutput() DestinationRuleSpecTrafficpolicyOutput {
	return i.ToDestinationRuleSpecTrafficpolicyOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyArgs) ToDestinationRuleSpecTrafficpolicyOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyOutput)
}

func (i DestinationRuleSpecTrafficpolicyArgs) ToDestinationRuleSpecTrafficpolicyPtrOutput() DestinationRuleSpecTrafficpolicyPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyArgs) ToDestinationRuleSpecTrafficpolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyOutput).ToDestinationRuleSpecTrafficpolicyPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyPtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyArgs, DestinationRuleSpecTrafficpolicyPtr and DestinationRuleSpecTrafficpolicyPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPtrOutput() DestinationRuleSpecTrafficpolicyPtrOutput
	ToDestinationRuleSpecTrafficpolicyPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPtrOutput
}

type destinationRuleSpecTrafficpolicyPtrType DestinationRuleSpecTrafficpolicyArgs

func DestinationRuleSpecTrafficpolicyPtr(v *DestinationRuleSpecTrafficpolicyArgs) DestinationRuleSpecTrafficpolicyPtrInput {
	return (*destinationRuleSpecTrafficpolicyPtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicy)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyPtrType) ToDestinationRuleSpecTrafficpolicyPtrOutput() DestinationRuleSpecTrafficpolicyPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyPtrType) ToDestinationRuleSpecTrafficpolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPtrOutput)
}

type DestinationRuleSpecTrafficpolicyOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicy)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyOutput) ToDestinationRuleSpecTrafficpolicyOutput() DestinationRuleSpecTrafficpolicyOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyOutput) ToDestinationRuleSpecTrafficpolicyOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyOutput) ToDestinationRuleSpecTrafficpolicyPtrOutput() DestinationRuleSpecTrafficpolicyPtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyOutput) ToDestinationRuleSpecTrafficpolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicy) *DestinationRuleSpecTrafficpolicy {
		return &v
	}).(DestinationRuleSpecTrafficpolicyPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyOutput) ConnectionPool() DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicy) *DestinationRuleSpecTrafficpolicyConnectionpool {
		return v.ConnectionPool
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput)
}

// Settings controlling the load balancer algorithms.
func (o DestinationRuleSpecTrafficpolicyOutput) LoadBalancer() pulumi.AnyOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicy) interface{} { return v.LoadBalancer }).(pulumi.AnyOutput)
}

func (o DestinationRuleSpecTrafficpolicyOutput) OutlierDetection() DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicy) *DestinationRuleSpecTrafficpolicyOutlierdetection {
		return v.OutlierDetection
	}).(DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput)
}

// Traffic policies specific to individual ports.
func (o DestinationRuleSpecTrafficpolicyOutput) PortLevelSettings() DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicy) []DestinationRuleSpecTrafficpolicyPortlevelsettings {
		return v.PortLevelSettings
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput)
}

// TLS related settings for connections to the upstream service.
func (o DestinationRuleSpecTrafficpolicyOutput) Tls() DestinationRuleSpecTrafficpolicyTlsPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicy) *DestinationRuleSpecTrafficpolicyTls { return v.Tls }).(DestinationRuleSpecTrafficpolicyTlsPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyOutput) Tunnel() DestinationRuleSpecTrafficpolicyTunnelPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicy) *DestinationRuleSpecTrafficpolicyTunnel { return v.Tunnel }).(DestinationRuleSpecTrafficpolicyTunnelPtrOutput)
}

type DestinationRuleSpecTrafficpolicyPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicy)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPtrOutput) ToDestinationRuleSpecTrafficpolicyPtrOutput() DestinationRuleSpecTrafficpolicyPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPtrOutput) ToDestinationRuleSpecTrafficpolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPtrOutput) Elem() DestinationRuleSpecTrafficpolicyOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicy) DestinationRuleSpecTrafficpolicy {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicy
		return ret
	}).(DestinationRuleSpecTrafficpolicyOutput)
}

func (o DestinationRuleSpecTrafficpolicyPtrOutput) ConnectionPool() DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicy) *DestinationRuleSpecTrafficpolicyConnectionpool {
		if v == nil {
			return nil
		}
		return v.ConnectionPool
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput)
}

// Settings controlling the load balancer algorithms.
func (o DestinationRuleSpecTrafficpolicyPtrOutput) LoadBalancer() pulumi.AnyOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicy) interface{} {
		if v == nil {
			return nil
		}
		return v.LoadBalancer
	}).(pulumi.AnyOutput)
}

func (o DestinationRuleSpecTrafficpolicyPtrOutput) OutlierDetection() DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicy) *DestinationRuleSpecTrafficpolicyOutlierdetection {
		if v == nil {
			return nil
		}
		return v.OutlierDetection
	}).(DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput)
}

// Traffic policies specific to individual ports.
func (o DestinationRuleSpecTrafficpolicyPtrOutput) PortLevelSettings() DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicy) []DestinationRuleSpecTrafficpolicyPortlevelsettings {
		if v == nil {
			return nil
		}
		return v.PortLevelSettings
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput)
}

// TLS related settings for connections to the upstream service.
func (o DestinationRuleSpecTrafficpolicyPtrOutput) Tls() DestinationRuleSpecTrafficpolicyTlsPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicy) *DestinationRuleSpecTrafficpolicyTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(DestinationRuleSpecTrafficpolicyTlsPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPtrOutput) Tunnel() DestinationRuleSpecTrafficpolicyTunnelPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicy) *DestinationRuleSpecTrafficpolicyTunnel {
		if v == nil {
			return nil
		}
		return v.Tunnel
	}).(DestinationRuleSpecTrafficpolicyTunnelPtrOutput)
}

type DestinationRuleSpecTrafficpolicyConnectionpool struct {
	// HTTP connection pool settings.
	Http *DestinationRuleSpecTrafficpolicyConnectionpoolHttp `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp *DestinationRuleSpecTrafficpolicyConnectionpoolTcp `pulumi:"tcp"`
}

// DestinationRuleSpecTrafficpolicyConnectionpoolInput is an input type that accepts DestinationRuleSpecTrafficpolicyConnectionpoolArgs and DestinationRuleSpecTrafficpolicyConnectionpoolOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyConnectionpoolInput` via:
//
//	DestinationRuleSpecTrafficpolicyConnectionpoolArgs{...}
type DestinationRuleSpecTrafficpolicyConnectionpoolInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyConnectionpoolOutput() DestinationRuleSpecTrafficpolicyConnectionpoolOutput
	ToDestinationRuleSpecTrafficpolicyConnectionpoolOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolOutput
}

type DestinationRuleSpecTrafficpolicyConnectionpoolArgs struct {
	// HTTP connection pool settings.
	Http DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrInput `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrInput `pulumi:"tcp"`
}

func (DestinationRuleSpecTrafficpolicyConnectionpoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpool)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolOutput() DestinationRuleSpecTrafficpolicyConnectionpoolOutput {
	return i.ToDestinationRuleSpecTrafficpolicyConnectionpoolOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyConnectionpoolOutput)
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyConnectionpoolPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyConnectionpoolOutput).ToDestinationRuleSpecTrafficpolicyConnectionpoolPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyConnectionpoolPtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyConnectionpoolArgs, DestinationRuleSpecTrafficpolicyConnectionpoolPtr and DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyConnectionpoolPtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyConnectionpoolArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyConnectionpoolPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput
	ToDestinationRuleSpecTrafficpolicyConnectionpoolPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput
}

type destinationRuleSpecTrafficpolicyConnectionpoolPtrType DestinationRuleSpecTrafficpolicyConnectionpoolArgs

func DestinationRuleSpecTrafficpolicyConnectionpoolPtr(v *DestinationRuleSpecTrafficpolicyConnectionpoolArgs) DestinationRuleSpecTrafficpolicyConnectionpoolPtrInput {
	return (*destinationRuleSpecTrafficpolicyConnectionpoolPtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyConnectionpoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyConnectionpool)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyConnectionpoolPtrType) ToDestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyConnectionpoolPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyConnectionpoolPtrType) ToDestinationRuleSpecTrafficpolicyConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput)
}

type DestinationRuleSpecTrafficpolicyConnectionpoolOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyConnectionpoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpool)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolOutput() DestinationRuleSpecTrafficpolicyConnectionpoolOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyConnectionpoolPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicyConnectionpool) *DestinationRuleSpecTrafficpolicyConnectionpool {
		return &v
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolOutput) Http() DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpool) *DestinationRuleSpecTrafficpolicyConnectionpoolHttp {
		return v.Http
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolOutput) Tcp() DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpool) *DestinationRuleSpecTrafficpolicyConnectionpoolTcp {
		return v.Tcp
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput)
}

type DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyConnectionpool)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput) Elem() DestinationRuleSpecTrafficpolicyConnectionpoolOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpool) DestinationRuleSpecTrafficpolicyConnectionpool {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicyConnectionpool
		return ret
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput) Http() DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpool) *DestinationRuleSpecTrafficpolicyConnectionpoolHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput) Tcp() DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpool) *DestinationRuleSpecTrafficpolicyConnectionpoolTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecTrafficpolicyConnectionpoolHttp struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	H2UpgradePolicy         *string `pulumi:"h2UpgradePolicy"`
	Http1MaxPendingRequests *int    `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests *int `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection *int `pulumi:"maxRequestsPerConnection"`
	MaxRetries               *int `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol *bool `pulumi:"useClientProtocol"`
}

// DestinationRuleSpecTrafficpolicyConnectionpoolHttpInput is an input type that accepts DestinationRuleSpecTrafficpolicyConnectionpoolHttpArgs and DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyConnectionpoolHttpInput` via:
//
//	DestinationRuleSpecTrafficpolicyConnectionpoolHttpArgs{...}
type DestinationRuleSpecTrafficpolicyConnectionpoolHttpInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput() DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput
	ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput
}

// HTTP connection pool settings.
type DestinationRuleSpecTrafficpolicyConnectionpoolHttpArgs struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	H2UpgradePolicy         pulumi.StringPtrInput `pulumi:"h2UpgradePolicy"`
	Http1MaxPendingRequests pulumi.IntPtrInput    `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests pulumi.IntPtrInput `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection pulumi.IntPtrInput `pulumi:"maxRequestsPerConnection"`
	MaxRetries               pulumi.IntPtrInput `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol pulumi.BoolPtrInput `pulumi:"useClientProtocol"`
}

func (DestinationRuleSpecTrafficpolicyConnectionpoolHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpoolHttp)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolHttpArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput() DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput {
	return i.ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolHttpArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput)
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolHttpArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolHttpArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput).ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyConnectionpoolHttpArgs, DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtr and DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyConnectionpoolHttpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput
	ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput
}

type destinationRuleSpecTrafficpolicyConnectionpoolHttpPtrType DestinationRuleSpecTrafficpolicyConnectionpoolHttpArgs

func DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtr(v *DestinationRuleSpecTrafficpolicyConnectionpoolHttpArgs) DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrInput {
	return (*destinationRuleSpecTrafficpolicyConnectionpoolHttpPtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyConnectionpoolHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyConnectionpoolHttp)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyConnectionpoolHttpPtrType) ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyConnectionpoolHttpPtrType) ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput() DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *DestinationRuleSpecTrafficpolicyConnectionpoolHttp {
		return &v
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *string { return v.H2UpgradePolicy }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *int { return v.Http1MaxPendingRequests }).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *int { return v.Http2MaxRequests }).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *string { return v.IdleTimeout }).(pulumi.StringPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *int { return v.MaxRequestsPerConnection }).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *bool { return v.UseClientProtocol }).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyConnectionpoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput) Elem() DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolHttp) DestinationRuleSpecTrafficpolicyConnectionpoolHttp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicyConnectionpoolHttp
		return ret
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.H2UpgradePolicy
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http2MaxRequests
	}).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolHttp) *bool {
		if v == nil {
			return nil
		}
		return v.UseClientProtocol
	}).(pulumi.BoolPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecTrafficpolicyConnectionpoolTcp struct {
	// TCP connection timeout.
	ConnectTimeout *string `pulumi:"connectTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration *string `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections *int `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive *DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive `pulumi:"tcpKeepalive"`
}

// DestinationRuleSpecTrafficpolicyConnectionpoolTcpInput is an input type that accepts DestinationRuleSpecTrafficpolicyConnectionpoolTcpArgs and DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyConnectionpoolTcpInput` via:
//
//	DestinationRuleSpecTrafficpolicyConnectionpoolTcpArgs{...}
type DestinationRuleSpecTrafficpolicyConnectionpoolTcpInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput
	ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecTrafficpolicyConnectionpoolTcpArgs struct {
	// TCP connection timeout.
	ConnectTimeout pulumi.StringPtrInput `pulumi:"connectTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration pulumi.StringPtrInput `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrInput `pulumi:"tcpKeepalive"`
}

func (DestinationRuleSpecTrafficpolicyConnectionpoolTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpoolTcp)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolTcpArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput {
	return i.ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolTcpArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput)
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolTcpArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolTcpArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput).ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyConnectionpoolTcpArgs, DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtr and DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyConnectionpoolTcpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput
	ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput
}

type destinationRuleSpecTrafficpolicyConnectionpoolTcpPtrType DestinationRuleSpecTrafficpolicyConnectionpoolTcpArgs

func DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtr(v *DestinationRuleSpecTrafficpolicyConnectionpoolTcpArgs) DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrInput {
	return (*destinationRuleSpecTrafficpolicyConnectionpoolTcpPtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyConnectionpoolTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyConnectionpoolTcp)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyConnectionpoolTcpPtrType) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyConnectionpoolTcpPtrType) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicyConnectionpoolTcp) *DestinationRuleSpecTrafficpolicyConnectionpoolTcp {
		return &v
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpoolTcp) *string { return v.ConnectTimeout }).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpoolTcp) *string { return v.MaxConnectionDuration }).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpoolTcp) *int { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput) TcpKeepalive() DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpoolTcp) *DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive {
		return v.TcpKeepalive
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput)
}

type DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyConnectionpoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput) Elem() DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolTcp) DestinationRuleSpecTrafficpolicyConnectionpoolTcp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicyConnectionpoolTcp
		return ret
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolTcp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput) TcpKeepalive() DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolTcp) *DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive {
		if v == nil {
			return nil
		}
		return v.TcpKeepalive
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive struct {
	// The time duration between keep-alive probes.
	Interval *string `pulumi:"interval"`
	Probes   *int    `pulumi:"probes"`
	Time     *string `pulumi:"time"`
}

// DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveInput is an input type that accepts DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs and DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveInput` via:
//
//	DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs{...}
type DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput
	ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs struct {
	// The time duration between keep-alive probes.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	Probes   pulumi.IntPtrInput    `pulumi:"probes"`
	Time     pulumi.StringPtrInput `pulumi:"time"`
}

func (DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput {
	return i.ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput)
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput).ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs, DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtr and DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput
	ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput
}

type destinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrType DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs

func DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtr(v *DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs) DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrInput {
	return (*destinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrType) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrType) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive) *DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive {
		return &v
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive) *int { return v.Probes }).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput) ToDestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput) Elem() DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive) DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive
		return ret
	}).(DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive) *int {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecTrafficpolicyOutlierdetection struct {
	// Minimum ejection duration.
	BaseEjectionTime *string `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors *int `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    *int `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors       *int `pulumi:"consecutiveGatewayErrors"`
	ConsecutiveLocalOriginFailures *int `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval           *string `pulumi:"interval"`
	MaxEjectionPercent *int    `pulumi:"maxEjectionPercent"`
	MinHealthPercent   *int    `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors *bool `pulumi:"splitExternalLocalOriginErrors"`
}

// DestinationRuleSpecTrafficpolicyOutlierdetectionInput is an input type that accepts DestinationRuleSpecTrafficpolicyOutlierdetectionArgs and DestinationRuleSpecTrafficpolicyOutlierdetectionOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyOutlierdetectionInput` via:
//
//	DestinationRuleSpecTrafficpolicyOutlierdetectionArgs{...}
type DestinationRuleSpecTrafficpolicyOutlierdetectionInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyOutlierdetectionOutput() DestinationRuleSpecTrafficpolicyOutlierdetectionOutput
	ToDestinationRuleSpecTrafficpolicyOutlierdetectionOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyOutlierdetectionOutput
}

type DestinationRuleSpecTrafficpolicyOutlierdetectionArgs struct {
	// Minimum ejection duration.
	BaseEjectionTime pulumi.StringPtrInput `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors pulumi.IntPtrInput `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    pulumi.IntPtrInput `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors       pulumi.IntPtrInput `pulumi:"consecutiveGatewayErrors"`
	ConsecutiveLocalOriginFailures pulumi.IntPtrInput `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval           pulumi.StringPtrInput `pulumi:"interval"`
	MaxEjectionPercent pulumi.IntPtrInput    `pulumi:"maxEjectionPercent"`
	MinHealthPercent   pulumi.IntPtrInput    `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors pulumi.BoolPtrInput `pulumi:"splitExternalLocalOriginErrors"`
}

func (DestinationRuleSpecTrafficpolicyOutlierdetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyOutlierdetection)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyOutlierdetectionArgs) ToDestinationRuleSpecTrafficpolicyOutlierdetectionOutput() DestinationRuleSpecTrafficpolicyOutlierdetectionOutput {
	return i.ToDestinationRuleSpecTrafficpolicyOutlierdetectionOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyOutlierdetectionArgs) ToDestinationRuleSpecTrafficpolicyOutlierdetectionOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyOutlierdetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyOutlierdetectionOutput)
}

func (i DestinationRuleSpecTrafficpolicyOutlierdetectionArgs) ToDestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput() DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyOutlierdetectionArgs) ToDestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyOutlierdetectionOutput).ToDestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyOutlierdetectionPtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyOutlierdetectionArgs, DestinationRuleSpecTrafficpolicyOutlierdetectionPtr and DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyOutlierdetectionPtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyOutlierdetectionArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyOutlierdetectionPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput() DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput
	ToDestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput
}

type destinationRuleSpecTrafficpolicyOutlierdetectionPtrType DestinationRuleSpecTrafficpolicyOutlierdetectionArgs

func DestinationRuleSpecTrafficpolicyOutlierdetectionPtr(v *DestinationRuleSpecTrafficpolicyOutlierdetectionArgs) DestinationRuleSpecTrafficpolicyOutlierdetectionPtrInput {
	return (*destinationRuleSpecTrafficpolicyOutlierdetectionPtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyOutlierdetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyOutlierdetection)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyOutlierdetectionPtrType) ToDestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput() DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyOutlierdetectionPtrType) ToDestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput)
}

type DestinationRuleSpecTrafficpolicyOutlierdetectionOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyOutlierdetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyOutlierdetection)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionOutput) ToDestinationRuleSpecTrafficpolicyOutlierdetectionOutput() DestinationRuleSpecTrafficpolicyOutlierdetectionOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionOutput) ToDestinationRuleSpecTrafficpolicyOutlierdetectionOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyOutlierdetectionOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionOutput) ToDestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput() DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionOutput) ToDestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicyOutlierdetection) *DestinationRuleSpecTrafficpolicyOutlierdetection {
		return &v
	}).(DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecTrafficpolicyOutlierdetectionOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyOutlierdetection) *string { return v.BaseEjectionTime }).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficpolicyOutlierdetectionOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyOutlierdetection) *int { return v.Consecutive5xxErrors }).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyOutlierdetection) *int { return v.ConsecutiveErrors }).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficpolicyOutlierdetectionOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyOutlierdetection) *int { return v.ConsecutiveGatewayErrors }).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyOutlierdetection) *int { return v.ConsecutiveLocalOriginFailures }).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecTrafficpolicyOutlierdetectionOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyOutlierdetection) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyOutlierdetection) *int { return v.MaxEjectionPercent }).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyOutlierdetection) *int { return v.MinHealthPercent }).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecTrafficpolicyOutlierdetectionOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyOutlierdetection) *bool {
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyOutlierdetection)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput) ToDestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput() DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput) ToDestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput) Elem() DestinationRuleSpecTrafficpolicyOutlierdetectionOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyOutlierdetection) DestinationRuleSpecTrafficpolicyOutlierdetection {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicyOutlierdetection
		return ret
	}).(DestinationRuleSpecTrafficpolicyOutlierdetectionOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyOutlierdetection) *string {
		if v == nil {
			return nil
		}
		return v.BaseEjectionTime
	}).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.Consecutive5xxErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveGatewayErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveLocalOriginFailures
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyOutlierdetection) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.MinHealthPercent
	}).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyOutlierdetection) *bool {
		if v == nil {
			return nil
		}
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettings struct {
	ConnectionPool *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     interface{}                                                        `pulumi:"loadBalancer"`
	OutlierDetection *DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection `pulumi:"outlierDetection"`
	Port             *DestinationRuleSpecTrafficpolicyPortlevelsettingsPort             `pulumi:"port"`
	// TLS related settings for connections to the upstream service.
	Tls *DestinationRuleSpecTrafficpolicyPortlevelsettingsTls `pulumi:"tls"`
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsArgs and DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsInput` via:
//
//	DestinationRuleSpecTrafficpolicyPortlevelsettingsArgs{...}
type DestinationRuleSpecTrafficpolicyPortlevelsettingsInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsArgs struct {
	ConnectionPool DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrInput `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     pulumi.Input                                                              `pulumi:"loadBalancer"`
	OutlierDetection DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrInput `pulumi:"outlierDetection"`
	Port             DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrInput             `pulumi:"port"`
	// TLS related settings for connections to the upstream service.
	Tls DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrInput `pulumi:"tls"`
}

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettings)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput)
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsArray and DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayInput` via:
//
//	DestinationRuleSpecTrafficpolicyPortlevelsettingsArray{ DestinationRuleSpecTrafficpolicyPortlevelsettingsArgs{...} }
type DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsArray []DestinationRuleSpecTrafficpolicyPortlevelsettingsInput

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationRuleSpecTrafficpolicyPortlevelsettings)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsArray) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsArray) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettings)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput) ConnectionPool() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettings) *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool {
		return v.ConnectionPool
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput)
}

// Settings controlling the load balancer algorithms.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput) LoadBalancer() pulumi.AnyOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettings) interface{} { return v.LoadBalancer }).(pulumi.AnyOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput) OutlierDetection() DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettings) *DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection {
		return v.OutlierDetection
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput) Port() DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettings) *DestinationRuleSpecTrafficpolicyPortlevelsettingsPort {
		return v.Port
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput)
}

// TLS related settings for connections to the upstream service.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput) Tls() DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettings) *DestinationRuleSpecTrafficpolicyPortlevelsettingsTls {
		return v.Tls
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationRuleSpecTrafficpolicyPortlevelsettings)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput) Index(i pulumi.IntInput) DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DestinationRuleSpecTrafficpolicyPortlevelsettings {
		return vs[0].([]DestinationRuleSpecTrafficpolicyPortlevelsettings)[vs[1].(int)]
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool struct {
	// HTTP connection pool settings.
	Http *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp `pulumi:"tcp"`
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolArgs and DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolInput` via:
//
//	DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolArgs{...}
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolArgs struct {
	// HTTP connection pool settings.
	Http DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrInput `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrInput `pulumi:"tcp"`
}

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput)
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput).ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolArgs, DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtr and DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput
}

type destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrType DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolArgs

func DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtr(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolArgs) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrInput {
	return (*destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrType) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrType) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool) *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool {
		return &v
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput) Http() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool) *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp {
		return v.Http
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput) Tcp() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool) *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp {
		return v.Tcp
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput) Elem() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool
		return ret
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput) Http() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool) *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput) Tcp() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpool) *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	H2UpgradePolicy         *string `pulumi:"h2UpgradePolicy"`
	Http1MaxPendingRequests *int    `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests *int `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection *int `pulumi:"maxRequestsPerConnection"`
	MaxRetries               *int `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol *bool `pulumi:"useClientProtocol"`
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs and DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpInput` via:
//
//	DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs{...}
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput
}

// HTTP connection pool settings.
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	H2UpgradePolicy         pulumi.StringPtrInput `pulumi:"h2UpgradePolicy"`
	Http1MaxPendingRequests pulumi.IntPtrInput    `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests pulumi.IntPtrInput `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection pulumi.IntPtrInput `pulumi:"maxRequestsPerConnection"`
	MaxRetries               pulumi.IntPtrInput `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol pulumi.BoolPtrInput `pulumi:"useClientProtocol"`
}

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput)
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput).ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs, DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtr and DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput
}

type destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrType DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs

func DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtr(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrInput {
	return (*destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrType) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrType) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp {
		return &v
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *string {
		return v.H2UpgradePolicy
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		return v.Http2MaxRequests
	}).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *string {
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *bool {
		return v.UseClientProtocol
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) Elem() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp
		return ret
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.H2UpgradePolicy
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http2MaxRequests
	}).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttp) *bool {
		if v == nil {
			return nil
		}
		return v.UseClientProtocol
	}).(pulumi.BoolPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp struct {
	// TCP connection timeout.
	ConnectTimeout *string `pulumi:"connectTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration *string `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections *int `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive `pulumi:"tcpKeepalive"`
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs and DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpInput` via:
//
//	DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs{...}
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs struct {
	// TCP connection timeout.
	ConnectTimeout pulumi.StringPtrInput `pulumi:"connectTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration pulumi.StringPtrInput `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrInput `pulumi:"tcpKeepalive"`
}

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput)
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput).ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs, DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtr and DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput
}

type destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrType DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs

func DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtr(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrInput {
	return (*destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrType) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrType) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp) *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp {
		return &v
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp) *string {
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp) *string {
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp) *int {
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput) TcpKeepalive() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp) *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive {
		return v.TcpKeepalive
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) Elem() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp
		return ret
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput) TcpKeepalive() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcp) *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive {
		if v == nil {
			return nil
		}
		return v.TcpKeepalive
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive struct {
	// The time duration between keep-alive probes.
	Interval *string `pulumi:"interval"`
	Probes   *int    `pulumi:"probes"`
	Time     *string `pulumi:"time"`
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs and DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveInput` via:
//
//	DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs{...}
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs struct {
	// The time duration between keep-alive probes.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	Probes   pulumi.IntPtrInput    `pulumi:"probes"`
	Time     pulumi.StringPtrInput `pulumi:"time"`
}

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput)
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput).ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs, DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtr and DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput
}

type destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrType DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs

func DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtr(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrInput {
	return (*destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrType) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrType) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive {
		return &v
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) *string {
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) *int {
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) *string {
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput) Elem() DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive
		return ret
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) *int {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection struct {
	// Minimum ejection duration.
	BaseEjectionTime *string `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors *int `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    *int `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors       *int `pulumi:"consecutiveGatewayErrors"`
	ConsecutiveLocalOriginFailures *int `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval           *string `pulumi:"interval"`
	MaxEjectionPercent *int    `pulumi:"maxEjectionPercent"`
	MinHealthPercent   *int    `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors *bool `pulumi:"splitExternalLocalOriginErrors"`
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionArgs and DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionInput` via:
//
//	DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionArgs{...}
type DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionArgs struct {
	// Minimum ejection duration.
	BaseEjectionTime pulumi.StringPtrInput `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors pulumi.IntPtrInput `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    pulumi.IntPtrInput `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors       pulumi.IntPtrInput `pulumi:"consecutiveGatewayErrors"`
	ConsecutiveLocalOriginFailures pulumi.IntPtrInput `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval           pulumi.StringPtrInput `pulumi:"interval"`
	MaxEjectionPercent pulumi.IntPtrInput    `pulumi:"maxEjectionPercent"`
	MinHealthPercent   pulumi.IntPtrInput    `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors pulumi.BoolPtrInput `pulumi:"splitExternalLocalOriginErrors"`
}

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput)
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput).ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionArgs, DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtr and DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput
}

type destinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrType DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionArgs

func DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtr(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionArgs) DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrInput {
	return (*destinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrType) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrType) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection {
		return &v
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *string {
		return v.BaseEjectionTime
	}).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		return v.Consecutive5xxErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		return v.ConsecutiveGatewayErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		return v.ConsecutiveLocalOriginFailures
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		return v.MinHealthPercent
	}).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *bool {
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) Elem() DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection
		return ret
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *string {
		if v == nil {
			return nil
		}
		return v.BaseEjectionTime
	}).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.Consecutive5xxErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveGatewayErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveLocalOriginFailures
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *int {
		if v == nil {
			return nil
		}
		return v.MinHealthPercent
	}).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetection) *bool {
		if v == nil {
			return nil
		}
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsPort struct {
	Number *int `pulumi:"number"`
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsPortInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsPortArgs and DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsPortInput` via:
//
//	DestinationRuleSpecTrafficpolicyPortlevelsettingsPortArgs{...}
type DestinationRuleSpecTrafficpolicyPortlevelsettingsPortInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsPort)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsPortArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsPortArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput)
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsPortArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsPortArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput).ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsPortArgs, DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtr and DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyPortlevelsettingsPortArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput
}

type destinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrType DestinationRuleSpecTrafficpolicyPortlevelsettingsPortArgs

func DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtr(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsPortArgs) DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrInput {
	return (*destinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyPortlevelsettingsPort)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrType) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrType) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsPort)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicyPortlevelsettingsPort) *DestinationRuleSpecTrafficpolicyPortlevelsettingsPort {
		return &v
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyPortlevelsettingsPort)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput) Elem() DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsPort) DestinationRuleSpecTrafficpolicyPortlevelsettingsPort {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicyPortlevelsettingsPort
		return ret
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecTrafficpolicyPortlevelsettingsTls struct {
	CaCertificates *string `pulumi:"caCertificates"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate  *string `pulumi:"clientCertificate"`
	CredentialName     *string `pulumi:"credentialName"`
	InsecureSkipVerify *bool   `pulumi:"insecureSkipVerify"`
	Mode               *string `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey *string `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni             *string  `pulumi:"sni"`
	SubjectAltNames []string `pulumi:"subjectAltNames"`
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsArgs and DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsInput` via:
//
//	DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsArgs{...}
type DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsArgs struct {
	CaCertificates pulumi.StringPtrInput `pulumi:"caCertificates"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate  pulumi.StringPtrInput `pulumi:"clientCertificate"`
	CredentialName     pulumi.StringPtrInput `pulumi:"credentialName"`
	InsecureSkipVerify pulumi.BoolPtrInput   `pulumi:"insecureSkipVerify"`
	Mode               pulumi.StringPtrInput `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni             pulumi.StringPtrInput   `pulumi:"sni"`
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
}

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsTls)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput)
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsArgs) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput).ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsArgs, DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtr and DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput
	ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput
}

type destinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrType DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsArgs

func DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtr(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsArgs) DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrInput {
	return (*destinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyPortlevelsettingsTls)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrType) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrType) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsTls)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *DestinationRuleSpecTrafficpolicyPortlevelsettingsTls {
		return &v
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *string { return v.CaCertificates }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *string { return v.CredentialName }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *string { return v.Sni }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

type DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyPortlevelsettingsTls)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput() DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput) ToDestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput) Elem() DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) DestinationRuleSpecTrafficpolicyPortlevelsettingsTls {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicyPortlevelsettingsTls
		return ret
	}).(DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificates
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.CredentialName
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.Sni
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyPortlevelsettingsTls) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecTrafficpolicyTls struct {
	CaCertificates *string `pulumi:"caCertificates"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate  *string `pulumi:"clientCertificate"`
	CredentialName     *string `pulumi:"credentialName"`
	InsecureSkipVerify *bool   `pulumi:"insecureSkipVerify"`
	Mode               *string `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey *string `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni             *string  `pulumi:"sni"`
	SubjectAltNames []string `pulumi:"subjectAltNames"`
}

// DestinationRuleSpecTrafficpolicyTlsInput is an input type that accepts DestinationRuleSpecTrafficpolicyTlsArgs and DestinationRuleSpecTrafficpolicyTlsOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyTlsInput` via:
//
//	DestinationRuleSpecTrafficpolicyTlsArgs{...}
type DestinationRuleSpecTrafficpolicyTlsInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyTlsOutput() DestinationRuleSpecTrafficpolicyTlsOutput
	ToDestinationRuleSpecTrafficpolicyTlsOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyTlsOutput
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecTrafficpolicyTlsArgs struct {
	CaCertificates pulumi.StringPtrInput `pulumi:"caCertificates"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate  pulumi.StringPtrInput `pulumi:"clientCertificate"`
	CredentialName     pulumi.StringPtrInput `pulumi:"credentialName"`
	InsecureSkipVerify pulumi.BoolPtrInput   `pulumi:"insecureSkipVerify"`
	Mode               pulumi.StringPtrInput `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni             pulumi.StringPtrInput   `pulumi:"sni"`
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
}

func (DestinationRuleSpecTrafficpolicyTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyTls)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyTlsArgs) ToDestinationRuleSpecTrafficpolicyTlsOutput() DestinationRuleSpecTrafficpolicyTlsOutput {
	return i.ToDestinationRuleSpecTrafficpolicyTlsOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyTlsArgs) ToDestinationRuleSpecTrafficpolicyTlsOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyTlsOutput)
}

func (i DestinationRuleSpecTrafficpolicyTlsArgs) ToDestinationRuleSpecTrafficpolicyTlsPtrOutput() DestinationRuleSpecTrafficpolicyTlsPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyTlsPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyTlsArgs) ToDestinationRuleSpecTrafficpolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyTlsOutput).ToDestinationRuleSpecTrafficpolicyTlsPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyTlsPtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyTlsArgs, DestinationRuleSpecTrafficpolicyTlsPtr and DestinationRuleSpecTrafficpolicyTlsPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyTlsPtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyTlsArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyTlsPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyTlsPtrOutput() DestinationRuleSpecTrafficpolicyTlsPtrOutput
	ToDestinationRuleSpecTrafficpolicyTlsPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyTlsPtrOutput
}

type destinationRuleSpecTrafficpolicyTlsPtrType DestinationRuleSpecTrafficpolicyTlsArgs

func DestinationRuleSpecTrafficpolicyTlsPtr(v *DestinationRuleSpecTrafficpolicyTlsArgs) DestinationRuleSpecTrafficpolicyTlsPtrInput {
	return (*destinationRuleSpecTrafficpolicyTlsPtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyTls)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyTlsPtrType) ToDestinationRuleSpecTrafficpolicyTlsPtrOutput() DestinationRuleSpecTrafficpolicyTlsPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyTlsPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyTlsPtrType) ToDestinationRuleSpecTrafficpolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyTlsPtrOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecTrafficpolicyTlsOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyTls)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyTlsOutput) ToDestinationRuleSpecTrafficpolicyTlsOutput() DestinationRuleSpecTrafficpolicyTlsOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyTlsOutput) ToDestinationRuleSpecTrafficpolicyTlsOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyTlsOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyTlsOutput) ToDestinationRuleSpecTrafficpolicyTlsPtrOutput() DestinationRuleSpecTrafficpolicyTlsPtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyTlsPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyTlsOutput) ToDestinationRuleSpecTrafficpolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicyTls) *DestinationRuleSpecTrafficpolicyTls {
		return &v
	}).(DestinationRuleSpecTrafficpolicyTlsPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyTlsOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyTls) *string { return v.CaCertificates }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficpolicyTlsOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyTls) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyTlsOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyTls) *string { return v.CredentialName }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyTlsOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyTls) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyTlsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyTls) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficpolicyTlsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyTls) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecTrafficpolicyTlsOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyTls) *string { return v.Sni }).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyTlsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyTls) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

type DestinationRuleSpecTrafficpolicyTlsPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyTls)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyTlsPtrOutput) ToDestinationRuleSpecTrafficpolicyTlsPtrOutput() DestinationRuleSpecTrafficpolicyTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyTlsPtrOutput) ToDestinationRuleSpecTrafficpolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyTlsPtrOutput) Elem() DestinationRuleSpecTrafficpolicyTlsOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyTls) DestinationRuleSpecTrafficpolicyTls {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicyTls
		return ret
	}).(DestinationRuleSpecTrafficpolicyTlsOutput)
}

func (o DestinationRuleSpecTrafficpolicyTlsPtrOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificates
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficpolicyTlsPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyTlsPtrOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.CredentialName
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyTlsPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyTls) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyTlsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficpolicyTlsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecTrafficpolicyTlsPtrOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.Sni
	}).(pulumi.StringPtrOutput)
}

func (o DestinationRuleSpecTrafficpolicyTlsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyTls) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

type DestinationRuleSpecTrafficpolicyTunnel struct {
	// Specifies which protocol to use for tunneling the downstream connection.
	Protocol *string `pulumi:"protocol"`
	// Specifies a host to which the downstream connection is tunneled.
	TargetHost *string `pulumi:"targetHost"`
	// Specifies a port to which the downstream connection is tunneled.
	TargetPort *int `pulumi:"targetPort"`
}

// DestinationRuleSpecTrafficpolicyTunnelInput is an input type that accepts DestinationRuleSpecTrafficpolicyTunnelArgs and DestinationRuleSpecTrafficpolicyTunnelOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyTunnelInput` via:
//
//	DestinationRuleSpecTrafficpolicyTunnelArgs{...}
type DestinationRuleSpecTrafficpolicyTunnelInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyTunnelOutput() DestinationRuleSpecTrafficpolicyTunnelOutput
	ToDestinationRuleSpecTrafficpolicyTunnelOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyTunnelOutput
}

type DestinationRuleSpecTrafficpolicyTunnelArgs struct {
	// Specifies which protocol to use for tunneling the downstream connection.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Specifies a host to which the downstream connection is tunneled.
	TargetHost pulumi.StringPtrInput `pulumi:"targetHost"`
	// Specifies a port to which the downstream connection is tunneled.
	TargetPort pulumi.IntPtrInput `pulumi:"targetPort"`
}

func (DestinationRuleSpecTrafficpolicyTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyTunnel)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficpolicyTunnelArgs) ToDestinationRuleSpecTrafficpolicyTunnelOutput() DestinationRuleSpecTrafficpolicyTunnelOutput {
	return i.ToDestinationRuleSpecTrafficpolicyTunnelOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyTunnelArgs) ToDestinationRuleSpecTrafficpolicyTunnelOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyTunnelOutput)
}

func (i DestinationRuleSpecTrafficpolicyTunnelArgs) ToDestinationRuleSpecTrafficpolicyTunnelPtrOutput() DestinationRuleSpecTrafficpolicyTunnelPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyTunnelPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficpolicyTunnelArgs) ToDestinationRuleSpecTrafficpolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyTunnelOutput).ToDestinationRuleSpecTrafficpolicyTunnelPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficpolicyTunnelPtrInput is an input type that accepts DestinationRuleSpecTrafficpolicyTunnelArgs, DestinationRuleSpecTrafficpolicyTunnelPtr and DestinationRuleSpecTrafficpolicyTunnelPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficpolicyTunnelPtrInput` via:
//
//	        DestinationRuleSpecTrafficpolicyTunnelArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficpolicyTunnelPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficpolicyTunnelPtrOutput() DestinationRuleSpecTrafficpolicyTunnelPtrOutput
	ToDestinationRuleSpecTrafficpolicyTunnelPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficpolicyTunnelPtrOutput
}

type destinationRuleSpecTrafficpolicyTunnelPtrType DestinationRuleSpecTrafficpolicyTunnelArgs

func DestinationRuleSpecTrafficpolicyTunnelPtr(v *DestinationRuleSpecTrafficpolicyTunnelArgs) DestinationRuleSpecTrafficpolicyTunnelPtrInput {
	return (*destinationRuleSpecTrafficpolicyTunnelPtrType)(v)
}

func (*destinationRuleSpecTrafficpolicyTunnelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyTunnel)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficpolicyTunnelPtrType) ToDestinationRuleSpecTrafficpolicyTunnelPtrOutput() DestinationRuleSpecTrafficpolicyTunnelPtrOutput {
	return i.ToDestinationRuleSpecTrafficpolicyTunnelPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficpolicyTunnelPtrType) ToDestinationRuleSpecTrafficpolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficpolicyTunnelPtrOutput)
}

type DestinationRuleSpecTrafficpolicyTunnelOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficpolicyTunnel)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyTunnelOutput) ToDestinationRuleSpecTrafficpolicyTunnelOutput() DestinationRuleSpecTrafficpolicyTunnelOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyTunnelOutput) ToDestinationRuleSpecTrafficpolicyTunnelOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyTunnelOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyTunnelOutput) ToDestinationRuleSpecTrafficpolicyTunnelPtrOutput() DestinationRuleSpecTrafficpolicyTunnelPtrOutput {
	return o.ToDestinationRuleSpecTrafficpolicyTunnelPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficpolicyTunnelOutput) ToDestinationRuleSpecTrafficpolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyTunnelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficpolicyTunnel) *DestinationRuleSpecTrafficpolicyTunnel {
		return &v
	}).(DestinationRuleSpecTrafficpolicyTunnelPtrOutput)
}

// Specifies which protocol to use for tunneling the downstream connection.
func (o DestinationRuleSpecTrafficpolicyTunnelOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyTunnel) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Specifies a host to which the downstream connection is tunneled.
func (o DestinationRuleSpecTrafficpolicyTunnelOutput) TargetHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyTunnel) *string { return v.TargetHost }).(pulumi.StringPtrOutput)
}

// Specifies a port to which the downstream connection is tunneled.
func (o DestinationRuleSpecTrafficpolicyTunnelOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficpolicyTunnel) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

type DestinationRuleSpecTrafficpolicyTunnelPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficpolicyTunnelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficpolicyTunnel)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficpolicyTunnelPtrOutput) ToDestinationRuleSpecTrafficpolicyTunnelPtrOutput() DestinationRuleSpecTrafficpolicyTunnelPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyTunnelPtrOutput) ToDestinationRuleSpecTrafficpolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficpolicyTunnelPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficpolicyTunnelPtrOutput) Elem() DestinationRuleSpecTrafficpolicyTunnelOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyTunnel) DestinationRuleSpecTrafficpolicyTunnel {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficpolicyTunnel
		return ret
	}).(DestinationRuleSpecTrafficpolicyTunnelOutput)
}

// Specifies which protocol to use for tunneling the downstream connection.
func (o DestinationRuleSpecTrafficpolicyTunnelPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyTunnel) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Specifies a host to which the downstream connection is tunneled.
func (o DestinationRuleSpecTrafficpolicyTunnelPtrOutput) TargetHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyTunnel) *string {
		if v == nil {
			return nil
		}
		return v.TargetHost
	}).(pulumi.StringPtrOutput)
}

// Specifies a port to which the downstream connection is tunneled.
func (o DestinationRuleSpecTrafficpolicyTunnelPtrOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficpolicyTunnel) *int {
		if v == nil {
			return nil
		}
		return v.TargetPort
	}).(pulumi.IntPtrOutput)
}

type DestinationRuleSpecWorkloadselector struct {
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// DestinationRuleSpecWorkloadselectorInput is an input type that accepts DestinationRuleSpecWorkloadselectorArgs and DestinationRuleSpecWorkloadselectorOutput values.
// You can construct a concrete instance of `DestinationRuleSpecWorkloadselectorInput` via:
//
//	DestinationRuleSpecWorkloadselectorArgs{...}
type DestinationRuleSpecWorkloadselectorInput interface {
	pulumi.Input

	ToDestinationRuleSpecWorkloadselectorOutput() DestinationRuleSpecWorkloadselectorOutput
	ToDestinationRuleSpecWorkloadselectorOutputWithContext(context.Context) DestinationRuleSpecWorkloadselectorOutput
}

type DestinationRuleSpecWorkloadselectorArgs struct {
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (DestinationRuleSpecWorkloadselectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecWorkloadselector)(nil)).Elem()
}

func (i DestinationRuleSpecWorkloadselectorArgs) ToDestinationRuleSpecWorkloadselectorOutput() DestinationRuleSpecWorkloadselectorOutput {
	return i.ToDestinationRuleSpecWorkloadselectorOutputWithContext(context.Background())
}

func (i DestinationRuleSpecWorkloadselectorArgs) ToDestinationRuleSpecWorkloadselectorOutputWithContext(ctx context.Context) DestinationRuleSpecWorkloadselectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecWorkloadselectorOutput)
}

func (i DestinationRuleSpecWorkloadselectorArgs) ToDestinationRuleSpecWorkloadselectorPtrOutput() DestinationRuleSpecWorkloadselectorPtrOutput {
	return i.ToDestinationRuleSpecWorkloadselectorPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecWorkloadselectorArgs) ToDestinationRuleSpecWorkloadselectorPtrOutputWithContext(ctx context.Context) DestinationRuleSpecWorkloadselectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecWorkloadselectorOutput).ToDestinationRuleSpecWorkloadselectorPtrOutputWithContext(ctx)
}

// DestinationRuleSpecWorkloadselectorPtrInput is an input type that accepts DestinationRuleSpecWorkloadselectorArgs, DestinationRuleSpecWorkloadselectorPtr and DestinationRuleSpecWorkloadselectorPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecWorkloadselectorPtrInput` via:
//
//	        DestinationRuleSpecWorkloadselectorArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecWorkloadselectorPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecWorkloadselectorPtrOutput() DestinationRuleSpecWorkloadselectorPtrOutput
	ToDestinationRuleSpecWorkloadselectorPtrOutputWithContext(context.Context) DestinationRuleSpecWorkloadselectorPtrOutput
}

type destinationRuleSpecWorkloadselectorPtrType DestinationRuleSpecWorkloadselectorArgs

func DestinationRuleSpecWorkloadselectorPtr(v *DestinationRuleSpecWorkloadselectorArgs) DestinationRuleSpecWorkloadselectorPtrInput {
	return (*destinationRuleSpecWorkloadselectorPtrType)(v)
}

func (*destinationRuleSpecWorkloadselectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecWorkloadselector)(nil)).Elem()
}

func (i *destinationRuleSpecWorkloadselectorPtrType) ToDestinationRuleSpecWorkloadselectorPtrOutput() DestinationRuleSpecWorkloadselectorPtrOutput {
	return i.ToDestinationRuleSpecWorkloadselectorPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecWorkloadselectorPtrType) ToDestinationRuleSpecWorkloadselectorPtrOutputWithContext(ctx context.Context) DestinationRuleSpecWorkloadselectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecWorkloadselectorPtrOutput)
}

type DestinationRuleSpecWorkloadselectorOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecWorkloadselectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecWorkloadselector)(nil)).Elem()
}

func (o DestinationRuleSpecWorkloadselectorOutput) ToDestinationRuleSpecWorkloadselectorOutput() DestinationRuleSpecWorkloadselectorOutput {
	return o
}

func (o DestinationRuleSpecWorkloadselectorOutput) ToDestinationRuleSpecWorkloadselectorOutputWithContext(ctx context.Context) DestinationRuleSpecWorkloadselectorOutput {
	return o
}

func (o DestinationRuleSpecWorkloadselectorOutput) ToDestinationRuleSpecWorkloadselectorPtrOutput() DestinationRuleSpecWorkloadselectorPtrOutput {
	return o.ToDestinationRuleSpecWorkloadselectorPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecWorkloadselectorOutput) ToDestinationRuleSpecWorkloadselectorPtrOutputWithContext(ctx context.Context) DestinationRuleSpecWorkloadselectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecWorkloadselector) *DestinationRuleSpecWorkloadselector {
		return &v
	}).(DestinationRuleSpecWorkloadselectorPtrOutput)
}

func (o DestinationRuleSpecWorkloadselectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DestinationRuleSpecWorkloadselector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type DestinationRuleSpecWorkloadselectorPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecWorkloadselectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecWorkloadselector)(nil)).Elem()
}

func (o DestinationRuleSpecWorkloadselectorPtrOutput) ToDestinationRuleSpecWorkloadselectorPtrOutput() DestinationRuleSpecWorkloadselectorPtrOutput {
	return o
}

func (o DestinationRuleSpecWorkloadselectorPtrOutput) ToDestinationRuleSpecWorkloadselectorPtrOutputWithContext(ctx context.Context) DestinationRuleSpecWorkloadselectorPtrOutput {
	return o
}

func (o DestinationRuleSpecWorkloadselectorPtrOutput) Elem() DestinationRuleSpecWorkloadselectorOutput {
	return o.ApplyT(func(v *DestinationRuleSpecWorkloadselector) DestinationRuleSpecWorkloadselector {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecWorkloadselector
		return ret
	}).(DestinationRuleSpecWorkloadselectorOutput)
}

func (o DestinationRuleSpecWorkloadselectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DestinationRuleSpecWorkloadselector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type DestinationRuleSpecWorkloadselectorMatchlabels struct {
}

type GatewayType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Configuration affecting edge load balancer. See more details at: https://istio.io/docs/reference/config/networking/gateway.html
	Spec   *GatewaySpec           `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Configuration affecting edge load balancer. See more details at: https://istio.io/docs/reference/config/networking/gateway.html
type GatewaySpec struct {
	Selector map[string]string `pulumi:"selector"`
	// A list of server specifications.
	Servers []GatewaySpecServers `pulumi:"servers"`
}

// GatewaySpecInput is an input type that accepts GatewaySpecArgs and GatewaySpecOutput values.
// You can construct a concrete instance of `GatewaySpecInput` via:
//
//	GatewaySpecArgs{...}
type GatewaySpecInput interface {
	pulumi.Input

	ToGatewaySpecOutput() GatewaySpecOutput
	ToGatewaySpecOutputWithContext(context.Context) GatewaySpecOutput
}

// Configuration affecting edge load balancer. See more details at: https://istio.io/docs/reference/config/networking/gateway.html
type GatewaySpecArgs struct {
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// A list of server specifications.
	Servers GatewaySpecServersArrayInput `pulumi:"servers"`
}

func (GatewaySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpec)(nil)).Elem()
}

func (i GatewaySpecArgs) ToGatewaySpecOutput() GatewaySpecOutput {
	return i.ToGatewaySpecOutputWithContext(context.Background())
}

func (i GatewaySpecArgs) ToGatewaySpecOutputWithContext(ctx context.Context) GatewaySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecOutput)
}

func (i GatewaySpecArgs) ToGatewaySpecPtrOutput() GatewaySpecPtrOutput {
	return i.ToGatewaySpecPtrOutputWithContext(context.Background())
}

func (i GatewaySpecArgs) ToGatewaySpecPtrOutputWithContext(ctx context.Context) GatewaySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecOutput).ToGatewaySpecPtrOutputWithContext(ctx)
}

// GatewaySpecPtrInput is an input type that accepts GatewaySpecArgs, GatewaySpecPtr and GatewaySpecPtrOutput values.
// You can construct a concrete instance of `GatewaySpecPtrInput` via:
//
//	        GatewaySpecArgs{...}
//
//	or:
//
//	        nil
type GatewaySpecPtrInput interface {
	pulumi.Input

	ToGatewaySpecPtrOutput() GatewaySpecPtrOutput
	ToGatewaySpecPtrOutputWithContext(context.Context) GatewaySpecPtrOutput
}

type gatewaySpecPtrType GatewaySpecArgs

func GatewaySpecPtr(v *GatewaySpecArgs) GatewaySpecPtrInput {
	return (*gatewaySpecPtrType)(v)
}

func (*gatewaySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySpec)(nil)).Elem()
}

func (i *gatewaySpecPtrType) ToGatewaySpecPtrOutput() GatewaySpecPtrOutput {
	return i.ToGatewaySpecPtrOutputWithContext(context.Background())
}

func (i *gatewaySpecPtrType) ToGatewaySpecPtrOutputWithContext(ctx context.Context) GatewaySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecPtrOutput)
}

// Configuration affecting edge load balancer. See more details at: https://istio.io/docs/reference/config/networking/gateway.html
type GatewaySpecOutput struct{ *pulumi.OutputState }

func (GatewaySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpec)(nil)).Elem()
}

func (o GatewaySpecOutput) ToGatewaySpecOutput() GatewaySpecOutput {
	return o
}

func (o GatewaySpecOutput) ToGatewaySpecOutputWithContext(ctx context.Context) GatewaySpecOutput {
	return o
}

func (o GatewaySpecOutput) ToGatewaySpecPtrOutput() GatewaySpecPtrOutput {
	return o.ToGatewaySpecPtrOutputWithContext(context.Background())
}

func (o GatewaySpecOutput) ToGatewaySpecPtrOutputWithContext(ctx context.Context) GatewaySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaySpec) *GatewaySpec {
		return &v
	}).(GatewaySpecPtrOutput)
}

func (o GatewaySpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v GatewaySpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// A list of server specifications.
func (o GatewaySpecOutput) Servers() GatewaySpecServersArrayOutput {
	return o.ApplyT(func(v GatewaySpec) []GatewaySpecServers { return v.Servers }).(GatewaySpecServersArrayOutput)
}

type GatewaySpecPtrOutput struct{ *pulumi.OutputState }

func (GatewaySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySpec)(nil)).Elem()
}

func (o GatewaySpecPtrOutput) ToGatewaySpecPtrOutput() GatewaySpecPtrOutput {
	return o
}

func (o GatewaySpecPtrOutput) ToGatewaySpecPtrOutputWithContext(ctx context.Context) GatewaySpecPtrOutput {
	return o
}

func (o GatewaySpecPtrOutput) Elem() GatewaySpecOutput {
	return o.ApplyT(func(v *GatewaySpec) GatewaySpec {
		if v != nil {
			return *v
		}
		var ret GatewaySpec
		return ret
	}).(GatewaySpecOutput)
}

func (o GatewaySpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GatewaySpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// A list of server specifications.
func (o GatewaySpecPtrOutput) Servers() GatewaySpecServersArrayOutput {
	return o.ApplyT(func(v *GatewaySpec) []GatewaySpecServers {
		if v == nil {
			return nil
		}
		return v.Servers
	}).(GatewaySpecServersArrayOutput)
}

type GatewaySpecSelector struct {
}

type GatewaySpecServers struct {
	Bind            *string `pulumi:"bind"`
	DefaultEndpoint *string `pulumi:"defaultEndpoint"`
	// One or more hosts exposed by this gateway.
	Hosts []string `pulumi:"hosts"`
	// An optional name of the server, when set must be unique across all servers.
	Name *string                 `pulumi:"name"`
	Port *GatewaySpecServersPort `pulumi:"port"`
	// Set of TLS related options that govern the server's behavior.
	Tls *GatewaySpecServersTls `pulumi:"tls"`
}

// GatewaySpecServersInput is an input type that accepts GatewaySpecServersArgs and GatewaySpecServersOutput values.
// You can construct a concrete instance of `GatewaySpecServersInput` via:
//
//	GatewaySpecServersArgs{...}
type GatewaySpecServersInput interface {
	pulumi.Input

	ToGatewaySpecServersOutput() GatewaySpecServersOutput
	ToGatewaySpecServersOutputWithContext(context.Context) GatewaySpecServersOutput
}

type GatewaySpecServersArgs struct {
	Bind            pulumi.StringPtrInput `pulumi:"bind"`
	DefaultEndpoint pulumi.StringPtrInput `pulumi:"defaultEndpoint"`
	// One or more hosts exposed by this gateway.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// An optional name of the server, when set must be unique across all servers.
	Name pulumi.StringPtrInput          `pulumi:"name"`
	Port GatewaySpecServersPortPtrInput `pulumi:"port"`
	// Set of TLS related options that govern the server's behavior.
	Tls GatewaySpecServersTlsPtrInput `pulumi:"tls"`
}

func (GatewaySpecServersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpecServers)(nil)).Elem()
}

func (i GatewaySpecServersArgs) ToGatewaySpecServersOutput() GatewaySpecServersOutput {
	return i.ToGatewaySpecServersOutputWithContext(context.Background())
}

func (i GatewaySpecServersArgs) ToGatewaySpecServersOutputWithContext(ctx context.Context) GatewaySpecServersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecServersOutput)
}

// GatewaySpecServersArrayInput is an input type that accepts GatewaySpecServersArray and GatewaySpecServersArrayOutput values.
// You can construct a concrete instance of `GatewaySpecServersArrayInput` via:
//
//	GatewaySpecServersArray{ GatewaySpecServersArgs{...} }
type GatewaySpecServersArrayInput interface {
	pulumi.Input

	ToGatewaySpecServersArrayOutput() GatewaySpecServersArrayOutput
	ToGatewaySpecServersArrayOutputWithContext(context.Context) GatewaySpecServersArrayOutput
}

type GatewaySpecServersArray []GatewaySpecServersInput

func (GatewaySpecServersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaySpecServers)(nil)).Elem()
}

func (i GatewaySpecServersArray) ToGatewaySpecServersArrayOutput() GatewaySpecServersArrayOutput {
	return i.ToGatewaySpecServersArrayOutputWithContext(context.Background())
}

func (i GatewaySpecServersArray) ToGatewaySpecServersArrayOutputWithContext(ctx context.Context) GatewaySpecServersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecServersArrayOutput)
}

type GatewaySpecServersOutput struct{ *pulumi.OutputState }

func (GatewaySpecServersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpecServers)(nil)).Elem()
}

func (o GatewaySpecServersOutput) ToGatewaySpecServersOutput() GatewaySpecServersOutput {
	return o
}

func (o GatewaySpecServersOutput) ToGatewaySpecServersOutputWithContext(ctx context.Context) GatewaySpecServersOutput {
	return o
}

func (o GatewaySpecServersOutput) Bind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServers) *string { return v.Bind }).(pulumi.StringPtrOutput)
}

func (o GatewaySpecServersOutput) DefaultEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServers) *string { return v.DefaultEndpoint }).(pulumi.StringPtrOutput)
}

// One or more hosts exposed by this gateway.
func (o GatewaySpecServersOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaySpecServers) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// An optional name of the server, when set must be unique across all servers.
func (o GatewaySpecServersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServers) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GatewaySpecServersOutput) Port() GatewaySpecServersPortPtrOutput {
	return o.ApplyT(func(v GatewaySpecServers) *GatewaySpecServersPort { return v.Port }).(GatewaySpecServersPortPtrOutput)
}

// Set of TLS related options that govern the server's behavior.
func (o GatewaySpecServersOutput) Tls() GatewaySpecServersTlsPtrOutput {
	return o.ApplyT(func(v GatewaySpecServers) *GatewaySpecServersTls { return v.Tls }).(GatewaySpecServersTlsPtrOutput)
}

type GatewaySpecServersArrayOutput struct{ *pulumi.OutputState }

func (GatewaySpecServersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaySpecServers)(nil)).Elem()
}

func (o GatewaySpecServersArrayOutput) ToGatewaySpecServersArrayOutput() GatewaySpecServersArrayOutput {
	return o
}

func (o GatewaySpecServersArrayOutput) ToGatewaySpecServersArrayOutputWithContext(ctx context.Context) GatewaySpecServersArrayOutput {
	return o
}

func (o GatewaySpecServersArrayOutput) Index(i pulumi.IntInput) GatewaySpecServersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaySpecServers {
		return vs[0].([]GatewaySpecServers)[vs[1].(int)]
	}).(GatewaySpecServersOutput)
}

type GatewaySpecServersPort struct {
	// Label assigned to the port.
	Name *string `pulumi:"name"`
	// A valid non-negative integer port number.
	Number *int `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol   *string `pulumi:"protocol"`
	TargetPort *int    `pulumi:"targetPort"`
}

// GatewaySpecServersPortInput is an input type that accepts GatewaySpecServersPortArgs and GatewaySpecServersPortOutput values.
// You can construct a concrete instance of `GatewaySpecServersPortInput` via:
//
//	GatewaySpecServersPortArgs{...}
type GatewaySpecServersPortInput interface {
	pulumi.Input

	ToGatewaySpecServersPortOutput() GatewaySpecServersPortOutput
	ToGatewaySpecServersPortOutputWithContext(context.Context) GatewaySpecServersPortOutput
}

type GatewaySpecServersPortArgs struct {
	// Label assigned to the port.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A valid non-negative integer port number.
	Number pulumi.IntPtrInput `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol   pulumi.StringPtrInput `pulumi:"protocol"`
	TargetPort pulumi.IntPtrInput    `pulumi:"targetPort"`
}

func (GatewaySpecServersPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpecServersPort)(nil)).Elem()
}

func (i GatewaySpecServersPortArgs) ToGatewaySpecServersPortOutput() GatewaySpecServersPortOutput {
	return i.ToGatewaySpecServersPortOutputWithContext(context.Background())
}

func (i GatewaySpecServersPortArgs) ToGatewaySpecServersPortOutputWithContext(ctx context.Context) GatewaySpecServersPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecServersPortOutput)
}

func (i GatewaySpecServersPortArgs) ToGatewaySpecServersPortPtrOutput() GatewaySpecServersPortPtrOutput {
	return i.ToGatewaySpecServersPortPtrOutputWithContext(context.Background())
}

func (i GatewaySpecServersPortArgs) ToGatewaySpecServersPortPtrOutputWithContext(ctx context.Context) GatewaySpecServersPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecServersPortOutput).ToGatewaySpecServersPortPtrOutputWithContext(ctx)
}

// GatewaySpecServersPortPtrInput is an input type that accepts GatewaySpecServersPortArgs, GatewaySpecServersPortPtr and GatewaySpecServersPortPtrOutput values.
// You can construct a concrete instance of `GatewaySpecServersPortPtrInput` via:
//
//	        GatewaySpecServersPortArgs{...}
//
//	or:
//
//	        nil
type GatewaySpecServersPortPtrInput interface {
	pulumi.Input

	ToGatewaySpecServersPortPtrOutput() GatewaySpecServersPortPtrOutput
	ToGatewaySpecServersPortPtrOutputWithContext(context.Context) GatewaySpecServersPortPtrOutput
}

type gatewaySpecServersPortPtrType GatewaySpecServersPortArgs

func GatewaySpecServersPortPtr(v *GatewaySpecServersPortArgs) GatewaySpecServersPortPtrInput {
	return (*gatewaySpecServersPortPtrType)(v)
}

func (*gatewaySpecServersPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySpecServersPort)(nil)).Elem()
}

func (i *gatewaySpecServersPortPtrType) ToGatewaySpecServersPortPtrOutput() GatewaySpecServersPortPtrOutput {
	return i.ToGatewaySpecServersPortPtrOutputWithContext(context.Background())
}

func (i *gatewaySpecServersPortPtrType) ToGatewaySpecServersPortPtrOutputWithContext(ctx context.Context) GatewaySpecServersPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecServersPortPtrOutput)
}

type GatewaySpecServersPortOutput struct{ *pulumi.OutputState }

func (GatewaySpecServersPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpecServersPort)(nil)).Elem()
}

func (o GatewaySpecServersPortOutput) ToGatewaySpecServersPortOutput() GatewaySpecServersPortOutput {
	return o
}

func (o GatewaySpecServersPortOutput) ToGatewaySpecServersPortOutputWithContext(ctx context.Context) GatewaySpecServersPortOutput {
	return o
}

func (o GatewaySpecServersPortOutput) ToGatewaySpecServersPortPtrOutput() GatewaySpecServersPortPtrOutput {
	return o.ToGatewaySpecServersPortPtrOutputWithContext(context.Background())
}

func (o GatewaySpecServersPortOutput) ToGatewaySpecServersPortPtrOutputWithContext(ctx context.Context) GatewaySpecServersPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaySpecServersPort) *GatewaySpecServersPort {
		return &v
	}).(GatewaySpecServersPortPtrOutput)
}

// Label assigned to the port.
func (o GatewaySpecServersPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A valid non-negative integer port number.
func (o GatewaySpecServersPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

// The protocol exposed on the port.
func (o GatewaySpecServersPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o GatewaySpecServersPortOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersPort) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

type GatewaySpecServersPortPtrOutput struct{ *pulumi.OutputState }

func (GatewaySpecServersPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySpecServersPort)(nil)).Elem()
}

func (o GatewaySpecServersPortPtrOutput) ToGatewaySpecServersPortPtrOutput() GatewaySpecServersPortPtrOutput {
	return o
}

func (o GatewaySpecServersPortPtrOutput) ToGatewaySpecServersPortPtrOutputWithContext(ctx context.Context) GatewaySpecServersPortPtrOutput {
	return o
}

func (o GatewaySpecServersPortPtrOutput) Elem() GatewaySpecServersPortOutput {
	return o.ApplyT(func(v *GatewaySpecServersPort) GatewaySpecServersPort {
		if v != nil {
			return *v
		}
		var ret GatewaySpecServersPort
		return ret
	}).(GatewaySpecServersPortOutput)
}

// Label assigned to the port.
func (o GatewaySpecServersPortPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersPort) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A valid non-negative integer port number.
func (o GatewaySpecServersPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

// The protocol exposed on the port.
func (o GatewaySpecServersPortPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersPort) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

func (o GatewaySpecServersPortPtrOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersPort) *int {
		if v == nil {
			return nil
		}
		return v.TargetPort
	}).(pulumi.IntPtrOutput)
}

// Set of TLS related options that govern the server's behavior.
type GatewaySpecServersTls struct {
	// REQUIRED if mode is `MUTUAL`.
	CaCertificates *string `pulumi:"caCertificates"`
	// Optional: If specified, only support the specified cipher list.
	CipherSuites   []string `pulumi:"cipherSuites"`
	CredentialName *string  `pulumi:"credentialName"`
	HttpsRedirect  *bool    `pulumi:"httpsRedirect"`
	// Optional: Maximum TLS protocol version.
	MaxProtocolVersion *string `pulumi:"maxProtocolVersion"`
	// Optional: Minimum TLS protocol version.
	MinProtocolVersion *string `pulumi:"minProtocolVersion"`
	Mode               *string `pulumi:"mode"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	PrivateKey *string `pulumi:"privateKey"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	ServerCertificate     *string  `pulumi:"serverCertificate"`
	SubjectAltNames       []string `pulumi:"subjectAltNames"`
	VerifyCertificateHash []string `pulumi:"verifyCertificateHash"`
	VerifyCertificateSpki []string `pulumi:"verifyCertificateSpki"`
}

// GatewaySpecServersTlsInput is an input type that accepts GatewaySpecServersTlsArgs and GatewaySpecServersTlsOutput values.
// You can construct a concrete instance of `GatewaySpecServersTlsInput` via:
//
//	GatewaySpecServersTlsArgs{...}
type GatewaySpecServersTlsInput interface {
	pulumi.Input

	ToGatewaySpecServersTlsOutput() GatewaySpecServersTlsOutput
	ToGatewaySpecServersTlsOutputWithContext(context.Context) GatewaySpecServersTlsOutput
}

// Set of TLS related options that govern the server's behavior.
type GatewaySpecServersTlsArgs struct {
	// REQUIRED if mode is `MUTUAL`.
	CaCertificates pulumi.StringPtrInput `pulumi:"caCertificates"`
	// Optional: If specified, only support the specified cipher list.
	CipherSuites   pulumi.StringArrayInput `pulumi:"cipherSuites"`
	CredentialName pulumi.StringPtrInput   `pulumi:"credentialName"`
	HttpsRedirect  pulumi.BoolPtrInput     `pulumi:"httpsRedirect"`
	// Optional: Maximum TLS protocol version.
	MaxProtocolVersion pulumi.StringPtrInput `pulumi:"maxProtocolVersion"`
	// Optional: Minimum TLS protocol version.
	MinProtocolVersion pulumi.StringPtrInput `pulumi:"minProtocolVersion"`
	Mode               pulumi.StringPtrInput `pulumi:"mode"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	ServerCertificate     pulumi.StringPtrInput   `pulumi:"serverCertificate"`
	SubjectAltNames       pulumi.StringArrayInput `pulumi:"subjectAltNames"`
	VerifyCertificateHash pulumi.StringArrayInput `pulumi:"verifyCertificateHash"`
	VerifyCertificateSpki pulumi.StringArrayInput `pulumi:"verifyCertificateSpki"`
}

func (GatewaySpecServersTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpecServersTls)(nil)).Elem()
}

func (i GatewaySpecServersTlsArgs) ToGatewaySpecServersTlsOutput() GatewaySpecServersTlsOutput {
	return i.ToGatewaySpecServersTlsOutputWithContext(context.Background())
}

func (i GatewaySpecServersTlsArgs) ToGatewaySpecServersTlsOutputWithContext(ctx context.Context) GatewaySpecServersTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecServersTlsOutput)
}

func (i GatewaySpecServersTlsArgs) ToGatewaySpecServersTlsPtrOutput() GatewaySpecServersTlsPtrOutput {
	return i.ToGatewaySpecServersTlsPtrOutputWithContext(context.Background())
}

func (i GatewaySpecServersTlsArgs) ToGatewaySpecServersTlsPtrOutputWithContext(ctx context.Context) GatewaySpecServersTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecServersTlsOutput).ToGatewaySpecServersTlsPtrOutputWithContext(ctx)
}

// GatewaySpecServersTlsPtrInput is an input type that accepts GatewaySpecServersTlsArgs, GatewaySpecServersTlsPtr and GatewaySpecServersTlsPtrOutput values.
// You can construct a concrete instance of `GatewaySpecServersTlsPtrInput` via:
//
//	        GatewaySpecServersTlsArgs{...}
//
//	or:
//
//	        nil
type GatewaySpecServersTlsPtrInput interface {
	pulumi.Input

	ToGatewaySpecServersTlsPtrOutput() GatewaySpecServersTlsPtrOutput
	ToGatewaySpecServersTlsPtrOutputWithContext(context.Context) GatewaySpecServersTlsPtrOutput
}

type gatewaySpecServersTlsPtrType GatewaySpecServersTlsArgs

func GatewaySpecServersTlsPtr(v *GatewaySpecServersTlsArgs) GatewaySpecServersTlsPtrInput {
	return (*gatewaySpecServersTlsPtrType)(v)
}

func (*gatewaySpecServersTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySpecServersTls)(nil)).Elem()
}

func (i *gatewaySpecServersTlsPtrType) ToGatewaySpecServersTlsPtrOutput() GatewaySpecServersTlsPtrOutput {
	return i.ToGatewaySpecServersTlsPtrOutputWithContext(context.Background())
}

func (i *gatewaySpecServersTlsPtrType) ToGatewaySpecServersTlsPtrOutputWithContext(ctx context.Context) GatewaySpecServersTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecServersTlsPtrOutput)
}

// Set of TLS related options that govern the server's behavior.
type GatewaySpecServersTlsOutput struct{ *pulumi.OutputState }

func (GatewaySpecServersTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpecServersTls)(nil)).Elem()
}

func (o GatewaySpecServersTlsOutput) ToGatewaySpecServersTlsOutput() GatewaySpecServersTlsOutput {
	return o
}

func (o GatewaySpecServersTlsOutput) ToGatewaySpecServersTlsOutputWithContext(ctx context.Context) GatewaySpecServersTlsOutput {
	return o
}

func (o GatewaySpecServersTlsOutput) ToGatewaySpecServersTlsPtrOutput() GatewaySpecServersTlsPtrOutput {
	return o.ToGatewaySpecServersTlsPtrOutputWithContext(context.Background())
}

func (o GatewaySpecServersTlsOutput) ToGatewaySpecServersTlsPtrOutputWithContext(ctx context.Context) GatewaySpecServersTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaySpecServersTls) *GatewaySpecServersTls {
		return &v
	}).(GatewaySpecServersTlsPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o GatewaySpecServersTlsOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.CaCertificates }).(pulumi.StringPtrOutput)
}

// Optional: If specified, only support the specified cipher list.
func (o GatewaySpecServersTlsOutput) CipherSuites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) []string { return v.CipherSuites }).(pulumi.StringArrayOutput)
}

func (o GatewaySpecServersTlsOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.CredentialName }).(pulumi.StringPtrOutput)
}

func (o GatewaySpecServersTlsOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *bool { return v.HttpsRedirect }).(pulumi.BoolPtrOutput)
}

// Optional: Maximum TLS protocol version.
func (o GatewaySpecServersTlsOutput) MaxProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.MaxProtocolVersion }).(pulumi.StringPtrOutput)
}

// Optional: Minimum TLS protocol version.
func (o GatewaySpecServersTlsOutput) MinProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.MinProtocolVersion }).(pulumi.StringPtrOutput)
}

func (o GatewaySpecServersTlsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o GatewaySpecServersTlsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o GatewaySpecServersTlsOutput) ServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.ServerCertificate }).(pulumi.StringPtrOutput)
}

func (o GatewaySpecServersTlsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

func (o GatewaySpecServersTlsOutput) VerifyCertificateHash() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) []string { return v.VerifyCertificateHash }).(pulumi.StringArrayOutput)
}

func (o GatewaySpecServersTlsOutput) VerifyCertificateSpki() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) []string { return v.VerifyCertificateSpki }).(pulumi.StringArrayOutput)
}

type GatewaySpecServersTlsPtrOutput struct{ *pulumi.OutputState }

func (GatewaySpecServersTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySpecServersTls)(nil)).Elem()
}

func (o GatewaySpecServersTlsPtrOutput) ToGatewaySpecServersTlsPtrOutput() GatewaySpecServersTlsPtrOutput {
	return o
}

func (o GatewaySpecServersTlsPtrOutput) ToGatewaySpecServersTlsPtrOutputWithContext(ctx context.Context) GatewaySpecServersTlsPtrOutput {
	return o
}

func (o GatewaySpecServersTlsPtrOutput) Elem() GatewaySpecServersTlsOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) GatewaySpecServersTls {
		if v != nil {
			return *v
		}
		var ret GatewaySpecServersTls
		return ret
	}).(GatewaySpecServersTlsOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o GatewaySpecServersTlsPtrOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificates
	}).(pulumi.StringPtrOutput)
}

// Optional: If specified, only support the specified cipher list.
func (o GatewaySpecServersTlsPtrOutput) CipherSuites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) []string {
		if v == nil {
			return nil
		}
		return v.CipherSuites
	}).(pulumi.StringArrayOutput)
}

func (o GatewaySpecServersTlsPtrOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.CredentialName
	}).(pulumi.StringPtrOutput)
}

func (o GatewaySpecServersTlsPtrOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsRedirect
	}).(pulumi.BoolPtrOutput)
}

// Optional: Maximum TLS protocol version.
func (o GatewaySpecServersTlsPtrOutput) MaxProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.MaxProtocolVersion
	}).(pulumi.StringPtrOutput)
}

// Optional: Minimum TLS protocol version.
func (o GatewaySpecServersTlsPtrOutput) MinProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.MinProtocolVersion
	}).(pulumi.StringPtrOutput)
}

func (o GatewaySpecServersTlsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o GatewaySpecServersTlsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o GatewaySpecServersTlsPtrOutput) ServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.ServerCertificate
	}).(pulumi.StringPtrOutput)
}

func (o GatewaySpecServersTlsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

func (o GatewaySpecServersTlsPtrOutput) VerifyCertificateHash() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) []string {
		if v == nil {
			return nil
		}
		return v.VerifyCertificateHash
	}).(pulumi.StringArrayOutput)
}

func (o GatewaySpecServersTlsPtrOutput) VerifyCertificateSpki() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) []string {
		if v == nil {
			return nil
		}
		return v.VerifyCertificateSpki
	}).(pulumi.StringArrayOutput)
}

type ProxyConfigType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Provides configuration for individual workloads. See more details at: https://istio.io/docs/reference/config/networking/proxy-config.html
	Spec   *ProxyConfigSpec       `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Provides configuration for individual workloads. See more details at: https://istio.io/docs/reference/config/networking/proxy-config.html
type ProxyConfigSpec struct {
	// The number of worker threads to run.
	Concurrency *int `pulumi:"concurrency"`
	// Additional environment variables for the proxy.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Specifies the details of the proxy image.
	Image *ProxyConfigSpecImage `pulumi:"image"`
	// Optional.
	Selector *ProxyConfigSpecSelector `pulumi:"selector"`
}

// ProxyConfigSpecInput is an input type that accepts ProxyConfigSpecArgs and ProxyConfigSpecOutput values.
// You can construct a concrete instance of `ProxyConfigSpecInput` via:
//
//	ProxyConfigSpecArgs{...}
type ProxyConfigSpecInput interface {
	pulumi.Input

	ToProxyConfigSpecOutput() ProxyConfigSpecOutput
	ToProxyConfigSpecOutputWithContext(context.Context) ProxyConfigSpecOutput
}

// Provides configuration for individual workloads. See more details at: https://istio.io/docs/reference/config/networking/proxy-config.html
type ProxyConfigSpecArgs struct {
	// The number of worker threads to run.
	Concurrency pulumi.IntPtrInput `pulumi:"concurrency"`
	// Additional environment variables for the proxy.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Specifies the details of the proxy image.
	Image ProxyConfigSpecImagePtrInput `pulumi:"image"`
	// Optional.
	Selector ProxyConfigSpecSelectorPtrInput `pulumi:"selector"`
}

func (ProxyConfigSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyConfigSpec)(nil)).Elem()
}

func (i ProxyConfigSpecArgs) ToProxyConfigSpecOutput() ProxyConfigSpecOutput {
	return i.ToProxyConfigSpecOutputWithContext(context.Background())
}

func (i ProxyConfigSpecArgs) ToProxyConfigSpecOutputWithContext(ctx context.Context) ProxyConfigSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyConfigSpecOutput)
}

func (i ProxyConfigSpecArgs) ToProxyConfigSpecPtrOutput() ProxyConfigSpecPtrOutput {
	return i.ToProxyConfigSpecPtrOutputWithContext(context.Background())
}

func (i ProxyConfigSpecArgs) ToProxyConfigSpecPtrOutputWithContext(ctx context.Context) ProxyConfigSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyConfigSpecOutput).ToProxyConfigSpecPtrOutputWithContext(ctx)
}

// ProxyConfigSpecPtrInput is an input type that accepts ProxyConfigSpecArgs, ProxyConfigSpecPtr and ProxyConfigSpecPtrOutput values.
// You can construct a concrete instance of `ProxyConfigSpecPtrInput` via:
//
//	        ProxyConfigSpecArgs{...}
//
//	or:
//
//	        nil
type ProxyConfigSpecPtrInput interface {
	pulumi.Input

	ToProxyConfigSpecPtrOutput() ProxyConfigSpecPtrOutput
	ToProxyConfigSpecPtrOutputWithContext(context.Context) ProxyConfigSpecPtrOutput
}

type proxyConfigSpecPtrType ProxyConfigSpecArgs

func ProxyConfigSpecPtr(v *ProxyConfigSpecArgs) ProxyConfigSpecPtrInput {
	return (*proxyConfigSpecPtrType)(v)
}

func (*proxyConfigSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyConfigSpec)(nil)).Elem()
}

func (i *proxyConfigSpecPtrType) ToProxyConfigSpecPtrOutput() ProxyConfigSpecPtrOutput {
	return i.ToProxyConfigSpecPtrOutputWithContext(context.Background())
}

func (i *proxyConfigSpecPtrType) ToProxyConfigSpecPtrOutputWithContext(ctx context.Context) ProxyConfigSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyConfigSpecPtrOutput)
}

// Provides configuration for individual workloads. See more details at: https://istio.io/docs/reference/config/networking/proxy-config.html
type ProxyConfigSpecOutput struct{ *pulumi.OutputState }

func (ProxyConfigSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyConfigSpec)(nil)).Elem()
}

func (o ProxyConfigSpecOutput) ToProxyConfigSpecOutput() ProxyConfigSpecOutput {
	return o
}

func (o ProxyConfigSpecOutput) ToProxyConfigSpecOutputWithContext(ctx context.Context) ProxyConfigSpecOutput {
	return o
}

func (o ProxyConfigSpecOutput) ToProxyConfigSpecPtrOutput() ProxyConfigSpecPtrOutput {
	return o.ToProxyConfigSpecPtrOutputWithContext(context.Background())
}

func (o ProxyConfigSpecOutput) ToProxyConfigSpecPtrOutputWithContext(ctx context.Context) ProxyConfigSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProxyConfigSpec) *ProxyConfigSpec {
		return &v
	}).(ProxyConfigSpecPtrOutput)
}

// The number of worker threads to run.
func (o ProxyConfigSpecOutput) Concurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProxyConfigSpec) *int { return v.Concurrency }).(pulumi.IntPtrOutput)
}

// Additional environment variables for the proxy.
func (o ProxyConfigSpecOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProxyConfigSpec) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Specifies the details of the proxy image.
func (o ProxyConfigSpecOutput) Image() ProxyConfigSpecImagePtrOutput {
	return o.ApplyT(func(v ProxyConfigSpec) *ProxyConfigSpecImage { return v.Image }).(ProxyConfigSpecImagePtrOutput)
}

// Optional.
func (o ProxyConfigSpecOutput) Selector() ProxyConfigSpecSelectorPtrOutput {
	return o.ApplyT(func(v ProxyConfigSpec) *ProxyConfigSpecSelector { return v.Selector }).(ProxyConfigSpecSelectorPtrOutput)
}

type ProxyConfigSpecPtrOutput struct{ *pulumi.OutputState }

func (ProxyConfigSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyConfigSpec)(nil)).Elem()
}

func (o ProxyConfigSpecPtrOutput) ToProxyConfigSpecPtrOutput() ProxyConfigSpecPtrOutput {
	return o
}

func (o ProxyConfigSpecPtrOutput) ToProxyConfigSpecPtrOutputWithContext(ctx context.Context) ProxyConfigSpecPtrOutput {
	return o
}

func (o ProxyConfigSpecPtrOutput) Elem() ProxyConfigSpecOutput {
	return o.ApplyT(func(v *ProxyConfigSpec) ProxyConfigSpec {
		if v != nil {
			return *v
		}
		var ret ProxyConfigSpec
		return ret
	}).(ProxyConfigSpecOutput)
}

// The number of worker threads to run.
func (o ProxyConfigSpecPtrOutput) Concurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProxyConfigSpec) *int {
		if v == nil {
			return nil
		}
		return v.Concurrency
	}).(pulumi.IntPtrOutput)
}

// Additional environment variables for the proxy.
func (o ProxyConfigSpecPtrOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProxyConfigSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(pulumi.StringMapOutput)
}

// Specifies the details of the proxy image.
func (o ProxyConfigSpecPtrOutput) Image() ProxyConfigSpecImagePtrOutput {
	return o.ApplyT(func(v *ProxyConfigSpec) *ProxyConfigSpecImage {
		if v == nil {
			return nil
		}
		return v.Image
	}).(ProxyConfigSpecImagePtrOutput)
}

// Optional.
func (o ProxyConfigSpecPtrOutput) Selector() ProxyConfigSpecSelectorPtrOutput {
	return o.ApplyT(func(v *ProxyConfigSpec) *ProxyConfigSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ProxyConfigSpecSelectorPtrOutput)
}

// Additional environment variables for the proxy.
type ProxyConfigSpecEnvironmentvariables struct {
}

// Specifies the details of the proxy image.
type ProxyConfigSpecImage struct {
	// The image type of the image.
	ImageType *string `pulumi:"imageType"`
}

// ProxyConfigSpecImageInput is an input type that accepts ProxyConfigSpecImageArgs and ProxyConfigSpecImageOutput values.
// You can construct a concrete instance of `ProxyConfigSpecImageInput` via:
//
//	ProxyConfigSpecImageArgs{...}
type ProxyConfigSpecImageInput interface {
	pulumi.Input

	ToProxyConfigSpecImageOutput() ProxyConfigSpecImageOutput
	ToProxyConfigSpecImageOutputWithContext(context.Context) ProxyConfigSpecImageOutput
}

// Specifies the details of the proxy image.
type ProxyConfigSpecImageArgs struct {
	// The image type of the image.
	ImageType pulumi.StringPtrInput `pulumi:"imageType"`
}

func (ProxyConfigSpecImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyConfigSpecImage)(nil)).Elem()
}

func (i ProxyConfigSpecImageArgs) ToProxyConfigSpecImageOutput() ProxyConfigSpecImageOutput {
	return i.ToProxyConfigSpecImageOutputWithContext(context.Background())
}

func (i ProxyConfigSpecImageArgs) ToProxyConfigSpecImageOutputWithContext(ctx context.Context) ProxyConfigSpecImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyConfigSpecImageOutput)
}

func (i ProxyConfigSpecImageArgs) ToProxyConfigSpecImagePtrOutput() ProxyConfigSpecImagePtrOutput {
	return i.ToProxyConfigSpecImagePtrOutputWithContext(context.Background())
}

func (i ProxyConfigSpecImageArgs) ToProxyConfigSpecImagePtrOutputWithContext(ctx context.Context) ProxyConfigSpecImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyConfigSpecImageOutput).ToProxyConfigSpecImagePtrOutputWithContext(ctx)
}

// ProxyConfigSpecImagePtrInput is an input type that accepts ProxyConfigSpecImageArgs, ProxyConfigSpecImagePtr and ProxyConfigSpecImagePtrOutput values.
// You can construct a concrete instance of `ProxyConfigSpecImagePtrInput` via:
//
//	        ProxyConfigSpecImageArgs{...}
//
//	or:
//
//	        nil
type ProxyConfigSpecImagePtrInput interface {
	pulumi.Input

	ToProxyConfigSpecImagePtrOutput() ProxyConfigSpecImagePtrOutput
	ToProxyConfigSpecImagePtrOutputWithContext(context.Context) ProxyConfigSpecImagePtrOutput
}

type proxyConfigSpecImagePtrType ProxyConfigSpecImageArgs

func ProxyConfigSpecImagePtr(v *ProxyConfigSpecImageArgs) ProxyConfigSpecImagePtrInput {
	return (*proxyConfigSpecImagePtrType)(v)
}

func (*proxyConfigSpecImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyConfigSpecImage)(nil)).Elem()
}

func (i *proxyConfigSpecImagePtrType) ToProxyConfigSpecImagePtrOutput() ProxyConfigSpecImagePtrOutput {
	return i.ToProxyConfigSpecImagePtrOutputWithContext(context.Background())
}

func (i *proxyConfigSpecImagePtrType) ToProxyConfigSpecImagePtrOutputWithContext(ctx context.Context) ProxyConfigSpecImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyConfigSpecImagePtrOutput)
}

// Specifies the details of the proxy image.
type ProxyConfigSpecImageOutput struct{ *pulumi.OutputState }

func (ProxyConfigSpecImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyConfigSpecImage)(nil)).Elem()
}

func (o ProxyConfigSpecImageOutput) ToProxyConfigSpecImageOutput() ProxyConfigSpecImageOutput {
	return o
}

func (o ProxyConfigSpecImageOutput) ToProxyConfigSpecImageOutputWithContext(ctx context.Context) ProxyConfigSpecImageOutput {
	return o
}

func (o ProxyConfigSpecImageOutput) ToProxyConfigSpecImagePtrOutput() ProxyConfigSpecImagePtrOutput {
	return o.ToProxyConfigSpecImagePtrOutputWithContext(context.Background())
}

func (o ProxyConfigSpecImageOutput) ToProxyConfigSpecImagePtrOutputWithContext(ctx context.Context) ProxyConfigSpecImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProxyConfigSpecImage) *ProxyConfigSpecImage {
		return &v
	}).(ProxyConfigSpecImagePtrOutput)
}

// The image type of the image.
func (o ProxyConfigSpecImageOutput) ImageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProxyConfigSpecImage) *string { return v.ImageType }).(pulumi.StringPtrOutput)
}

type ProxyConfigSpecImagePtrOutput struct{ *pulumi.OutputState }

func (ProxyConfigSpecImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyConfigSpecImage)(nil)).Elem()
}

func (o ProxyConfigSpecImagePtrOutput) ToProxyConfigSpecImagePtrOutput() ProxyConfigSpecImagePtrOutput {
	return o
}

func (o ProxyConfigSpecImagePtrOutput) ToProxyConfigSpecImagePtrOutputWithContext(ctx context.Context) ProxyConfigSpecImagePtrOutput {
	return o
}

func (o ProxyConfigSpecImagePtrOutput) Elem() ProxyConfigSpecImageOutput {
	return o.ApplyT(func(v *ProxyConfigSpecImage) ProxyConfigSpecImage {
		if v != nil {
			return *v
		}
		var ret ProxyConfigSpecImage
		return ret
	}).(ProxyConfigSpecImageOutput)
}

// The image type of the image.
func (o ProxyConfigSpecImagePtrOutput) ImageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProxyConfigSpecImage) *string {
		if v == nil {
			return nil
		}
		return v.ImageType
	}).(pulumi.StringPtrOutput)
}

// Optional.
type ProxyConfigSpecSelector struct {
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ProxyConfigSpecSelectorInput is an input type that accepts ProxyConfigSpecSelectorArgs and ProxyConfigSpecSelectorOutput values.
// You can construct a concrete instance of `ProxyConfigSpecSelectorInput` via:
//
//	ProxyConfigSpecSelectorArgs{...}
type ProxyConfigSpecSelectorInput interface {
	pulumi.Input

	ToProxyConfigSpecSelectorOutput() ProxyConfigSpecSelectorOutput
	ToProxyConfigSpecSelectorOutputWithContext(context.Context) ProxyConfigSpecSelectorOutput
}

// Optional.
type ProxyConfigSpecSelectorArgs struct {
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ProxyConfigSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyConfigSpecSelector)(nil)).Elem()
}

func (i ProxyConfigSpecSelectorArgs) ToProxyConfigSpecSelectorOutput() ProxyConfigSpecSelectorOutput {
	return i.ToProxyConfigSpecSelectorOutputWithContext(context.Background())
}

func (i ProxyConfigSpecSelectorArgs) ToProxyConfigSpecSelectorOutputWithContext(ctx context.Context) ProxyConfigSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyConfigSpecSelectorOutput)
}

func (i ProxyConfigSpecSelectorArgs) ToProxyConfigSpecSelectorPtrOutput() ProxyConfigSpecSelectorPtrOutput {
	return i.ToProxyConfigSpecSelectorPtrOutputWithContext(context.Background())
}

func (i ProxyConfigSpecSelectorArgs) ToProxyConfigSpecSelectorPtrOutputWithContext(ctx context.Context) ProxyConfigSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyConfigSpecSelectorOutput).ToProxyConfigSpecSelectorPtrOutputWithContext(ctx)
}

// ProxyConfigSpecSelectorPtrInput is an input type that accepts ProxyConfigSpecSelectorArgs, ProxyConfigSpecSelectorPtr and ProxyConfigSpecSelectorPtrOutput values.
// You can construct a concrete instance of `ProxyConfigSpecSelectorPtrInput` via:
//
//	        ProxyConfigSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type ProxyConfigSpecSelectorPtrInput interface {
	pulumi.Input

	ToProxyConfigSpecSelectorPtrOutput() ProxyConfigSpecSelectorPtrOutput
	ToProxyConfigSpecSelectorPtrOutputWithContext(context.Context) ProxyConfigSpecSelectorPtrOutput
}

type proxyConfigSpecSelectorPtrType ProxyConfigSpecSelectorArgs

func ProxyConfigSpecSelectorPtr(v *ProxyConfigSpecSelectorArgs) ProxyConfigSpecSelectorPtrInput {
	return (*proxyConfigSpecSelectorPtrType)(v)
}

func (*proxyConfigSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyConfigSpecSelector)(nil)).Elem()
}

func (i *proxyConfigSpecSelectorPtrType) ToProxyConfigSpecSelectorPtrOutput() ProxyConfigSpecSelectorPtrOutput {
	return i.ToProxyConfigSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *proxyConfigSpecSelectorPtrType) ToProxyConfigSpecSelectorPtrOutputWithContext(ctx context.Context) ProxyConfigSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyConfigSpecSelectorPtrOutput)
}

// Optional.
type ProxyConfigSpecSelectorOutput struct{ *pulumi.OutputState }

func (ProxyConfigSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyConfigSpecSelector)(nil)).Elem()
}

func (o ProxyConfigSpecSelectorOutput) ToProxyConfigSpecSelectorOutput() ProxyConfigSpecSelectorOutput {
	return o
}

func (o ProxyConfigSpecSelectorOutput) ToProxyConfigSpecSelectorOutputWithContext(ctx context.Context) ProxyConfigSpecSelectorOutput {
	return o
}

func (o ProxyConfigSpecSelectorOutput) ToProxyConfigSpecSelectorPtrOutput() ProxyConfigSpecSelectorPtrOutput {
	return o.ToProxyConfigSpecSelectorPtrOutputWithContext(context.Background())
}

func (o ProxyConfigSpecSelectorOutput) ToProxyConfigSpecSelectorPtrOutputWithContext(ctx context.Context) ProxyConfigSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProxyConfigSpecSelector) *ProxyConfigSpecSelector {
		return &v
	}).(ProxyConfigSpecSelectorPtrOutput)
}

func (o ProxyConfigSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProxyConfigSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ProxyConfigSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (ProxyConfigSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyConfigSpecSelector)(nil)).Elem()
}

func (o ProxyConfigSpecSelectorPtrOutput) ToProxyConfigSpecSelectorPtrOutput() ProxyConfigSpecSelectorPtrOutput {
	return o
}

func (o ProxyConfigSpecSelectorPtrOutput) ToProxyConfigSpecSelectorPtrOutputWithContext(ctx context.Context) ProxyConfigSpecSelectorPtrOutput {
	return o
}

func (o ProxyConfigSpecSelectorPtrOutput) Elem() ProxyConfigSpecSelectorOutput {
	return o.ApplyT(func(v *ProxyConfigSpecSelector) ProxyConfigSpecSelector {
		if v != nil {
			return *v
		}
		var ret ProxyConfigSpecSelector
		return ret
	}).(ProxyConfigSpecSelectorOutput)
}

func (o ProxyConfigSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProxyConfigSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type ProxyConfigSpecSelectorMatchlabels struct {
}

type ServiceEntryType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
	Spec   *ServiceEntrySpec      `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
type ServiceEntrySpec struct {
	// The virtual IP addresses associated with the service.
	Addresses []string `pulumi:"addresses"`
	// One or more endpoints associated with the service.
	Endpoints []ServiceEntrySpecEndpoints `pulumi:"endpoints"`
	// A list of namespaces to which this service is exported.
	ExportTo []string `pulumi:"exportTo"`
	// The hosts associated with the ServiceEntry.
	Hosts    []string `pulumi:"hosts"`
	Location *string  `pulumi:"location"`
	// The ports associated with the external service.
	Ports []ServiceEntrySpecPorts `pulumi:"ports"`
	// Service discovery mode for the hosts.
	Resolution      *string  `pulumi:"resolution"`
	SubjectAltNames []string `pulumi:"subjectAltNames"`
	// Applicable only for MESH_INTERNAL services.
	WorkloadSelector *ServiceEntrySpecWorkloadselector `pulumi:"workloadSelector"`
}

// ServiceEntrySpecInput is an input type that accepts ServiceEntrySpecArgs and ServiceEntrySpecOutput values.
// You can construct a concrete instance of `ServiceEntrySpecInput` via:
//
//	ServiceEntrySpecArgs{...}
type ServiceEntrySpecInput interface {
	pulumi.Input

	ToServiceEntrySpecOutput() ServiceEntrySpecOutput
	ToServiceEntrySpecOutputWithContext(context.Context) ServiceEntrySpecOutput
}

// Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
type ServiceEntrySpecArgs struct {
	// The virtual IP addresses associated with the service.
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// One or more endpoints associated with the service.
	Endpoints ServiceEntrySpecEndpointsArrayInput `pulumi:"endpoints"`
	// A list of namespaces to which this service is exported.
	ExportTo pulumi.StringArrayInput `pulumi:"exportTo"`
	// The hosts associated with the ServiceEntry.
	Hosts    pulumi.StringArrayInput `pulumi:"hosts"`
	Location pulumi.StringPtrInput   `pulumi:"location"`
	// The ports associated with the external service.
	Ports ServiceEntrySpecPortsArrayInput `pulumi:"ports"`
	// Service discovery mode for the hosts.
	Resolution      pulumi.StringPtrInput   `pulumi:"resolution"`
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
	// Applicable only for MESH_INTERNAL services.
	WorkloadSelector ServiceEntrySpecWorkloadselectorPtrInput `pulumi:"workloadSelector"`
}

func (ServiceEntrySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpec)(nil)).Elem()
}

func (i ServiceEntrySpecArgs) ToServiceEntrySpecOutput() ServiceEntrySpecOutput {
	return i.ToServiceEntrySpecOutputWithContext(context.Background())
}

func (i ServiceEntrySpecArgs) ToServiceEntrySpecOutputWithContext(ctx context.Context) ServiceEntrySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecOutput)
}

func (i ServiceEntrySpecArgs) ToServiceEntrySpecPtrOutput() ServiceEntrySpecPtrOutput {
	return i.ToServiceEntrySpecPtrOutputWithContext(context.Background())
}

func (i ServiceEntrySpecArgs) ToServiceEntrySpecPtrOutputWithContext(ctx context.Context) ServiceEntrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecOutput).ToServiceEntrySpecPtrOutputWithContext(ctx)
}

// ServiceEntrySpecPtrInput is an input type that accepts ServiceEntrySpecArgs, ServiceEntrySpecPtr and ServiceEntrySpecPtrOutput values.
// You can construct a concrete instance of `ServiceEntrySpecPtrInput` via:
//
//	        ServiceEntrySpecArgs{...}
//
//	or:
//
//	        nil
type ServiceEntrySpecPtrInput interface {
	pulumi.Input

	ToServiceEntrySpecPtrOutput() ServiceEntrySpecPtrOutput
	ToServiceEntrySpecPtrOutputWithContext(context.Context) ServiceEntrySpecPtrOutput
}

type serviceEntrySpecPtrType ServiceEntrySpecArgs

func ServiceEntrySpecPtr(v *ServiceEntrySpecArgs) ServiceEntrySpecPtrInput {
	return (*serviceEntrySpecPtrType)(v)
}

func (*serviceEntrySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEntrySpec)(nil)).Elem()
}

func (i *serviceEntrySpecPtrType) ToServiceEntrySpecPtrOutput() ServiceEntrySpecPtrOutput {
	return i.ToServiceEntrySpecPtrOutputWithContext(context.Background())
}

func (i *serviceEntrySpecPtrType) ToServiceEntrySpecPtrOutputWithContext(ctx context.Context) ServiceEntrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecPtrOutput)
}

// Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
type ServiceEntrySpecOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpec)(nil)).Elem()
}

func (o ServiceEntrySpecOutput) ToServiceEntrySpecOutput() ServiceEntrySpecOutput {
	return o
}

func (o ServiceEntrySpecOutput) ToServiceEntrySpecOutputWithContext(ctx context.Context) ServiceEntrySpecOutput {
	return o
}

func (o ServiceEntrySpecOutput) ToServiceEntrySpecPtrOutput() ServiceEntrySpecPtrOutput {
	return o.ToServiceEntrySpecPtrOutputWithContext(context.Background())
}

func (o ServiceEntrySpecOutput) ToServiceEntrySpecPtrOutputWithContext(ctx context.Context) ServiceEntrySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceEntrySpec) *ServiceEntrySpec {
		return &v
	}).(ServiceEntrySpecPtrOutput)
}

// The virtual IP addresses associated with the service.
func (o ServiceEntrySpecOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceEntrySpec) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// One or more endpoints associated with the service.
func (o ServiceEntrySpecOutput) Endpoints() ServiceEntrySpecEndpointsArrayOutput {
	return o.ApplyT(func(v ServiceEntrySpec) []ServiceEntrySpecEndpoints { return v.Endpoints }).(ServiceEntrySpecEndpointsArrayOutput)
}

// A list of namespaces to which this service is exported.
func (o ServiceEntrySpecOutput) ExportTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceEntrySpec) []string { return v.ExportTo }).(pulumi.StringArrayOutput)
}

// The hosts associated with the ServiceEntry.
func (o ServiceEntrySpecOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceEntrySpec) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

func (o ServiceEntrySpecOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpec) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The ports associated with the external service.
func (o ServiceEntrySpecOutput) Ports() ServiceEntrySpecPortsArrayOutput {
	return o.ApplyT(func(v ServiceEntrySpec) []ServiceEntrySpecPorts { return v.Ports }).(ServiceEntrySpecPortsArrayOutput)
}

// Service discovery mode for the hosts.
func (o ServiceEntrySpecOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpec) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

func (o ServiceEntrySpecOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceEntrySpec) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

// Applicable only for MESH_INTERNAL services.
func (o ServiceEntrySpecOutput) WorkloadSelector() ServiceEntrySpecWorkloadselectorPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpec) *ServiceEntrySpecWorkloadselector { return v.WorkloadSelector }).(ServiceEntrySpecWorkloadselectorPtrOutput)
}

type ServiceEntrySpecPtrOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEntrySpec)(nil)).Elem()
}

func (o ServiceEntrySpecPtrOutput) ToServiceEntrySpecPtrOutput() ServiceEntrySpecPtrOutput {
	return o
}

func (o ServiceEntrySpecPtrOutput) ToServiceEntrySpecPtrOutputWithContext(ctx context.Context) ServiceEntrySpecPtrOutput {
	return o
}

func (o ServiceEntrySpecPtrOutput) Elem() ServiceEntrySpecOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) ServiceEntrySpec {
		if v != nil {
			return *v
		}
		var ret ServiceEntrySpec
		return ret
	}).(ServiceEntrySpecOutput)
}

// The virtual IP addresses associated with the service.
func (o ServiceEntrySpecPtrOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) []string {
		if v == nil {
			return nil
		}
		return v.Addresses
	}).(pulumi.StringArrayOutput)
}

// One or more endpoints associated with the service.
func (o ServiceEntrySpecPtrOutput) Endpoints() ServiceEntrySpecEndpointsArrayOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) []ServiceEntrySpecEndpoints {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(ServiceEntrySpecEndpointsArrayOutput)
}

// A list of namespaces to which this service is exported.
func (o ServiceEntrySpecPtrOutput) ExportTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) []string {
		if v == nil {
			return nil
		}
		return v.ExportTo
	}).(pulumi.StringArrayOutput)
}

// The hosts associated with the ServiceEntry.
func (o ServiceEntrySpecPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

func (o ServiceEntrySpecPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// The ports associated with the external service.
func (o ServiceEntrySpecPtrOutput) Ports() ServiceEntrySpecPortsArrayOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) []ServiceEntrySpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ServiceEntrySpecPortsArrayOutput)
}

// Service discovery mode for the hosts.
func (o ServiceEntrySpecPtrOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) *string {
		if v == nil {
			return nil
		}
		return v.Resolution
	}).(pulumi.StringPtrOutput)
}

func (o ServiceEntrySpecPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

// Applicable only for MESH_INTERNAL services.
func (o ServiceEntrySpecPtrOutput) WorkloadSelector() ServiceEntrySpecWorkloadselectorPtrOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) *ServiceEntrySpecWorkloadselector {
		if v == nil {
			return nil
		}
		return v.WorkloadSelector
	}).(ServiceEntrySpecWorkloadselectorPtrOutput)
}

type ServiceEntrySpecEndpoints struct {
	Address *string `pulumi:"address"`
	// One or more labels associated with the endpoint.
	Labels map[string]string `pulumi:"labels"`
	// The locality associated with the endpoint.
	Locality *string `pulumi:"locality"`
	Network  *string `pulumi:"network"`
	// Set of ports associated with the endpoint.
	Ports          map[string]int `pulumi:"ports"`
	ServiceAccount *string        `pulumi:"serviceAccount"`
	// The load balancing weight associated with the endpoint.
	Weight *int `pulumi:"weight"`
}

// ServiceEntrySpecEndpointsInput is an input type that accepts ServiceEntrySpecEndpointsArgs and ServiceEntrySpecEndpointsOutput values.
// You can construct a concrete instance of `ServiceEntrySpecEndpointsInput` via:
//
//	ServiceEntrySpecEndpointsArgs{...}
type ServiceEntrySpecEndpointsInput interface {
	pulumi.Input

	ToServiceEntrySpecEndpointsOutput() ServiceEntrySpecEndpointsOutput
	ToServiceEntrySpecEndpointsOutputWithContext(context.Context) ServiceEntrySpecEndpointsOutput
}

type ServiceEntrySpecEndpointsArgs struct {
	Address pulumi.StringPtrInput `pulumi:"address"`
	// One or more labels associated with the endpoint.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The locality associated with the endpoint.
	Locality pulumi.StringPtrInput `pulumi:"locality"`
	Network  pulumi.StringPtrInput `pulumi:"network"`
	// Set of ports associated with the endpoint.
	Ports          pulumi.IntMapInput    `pulumi:"ports"`
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// The load balancing weight associated with the endpoint.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (ServiceEntrySpecEndpointsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpecEndpoints)(nil)).Elem()
}

func (i ServiceEntrySpecEndpointsArgs) ToServiceEntrySpecEndpointsOutput() ServiceEntrySpecEndpointsOutput {
	return i.ToServiceEntrySpecEndpointsOutputWithContext(context.Background())
}

func (i ServiceEntrySpecEndpointsArgs) ToServiceEntrySpecEndpointsOutputWithContext(ctx context.Context) ServiceEntrySpecEndpointsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecEndpointsOutput)
}

// ServiceEntrySpecEndpointsArrayInput is an input type that accepts ServiceEntrySpecEndpointsArray and ServiceEntrySpecEndpointsArrayOutput values.
// You can construct a concrete instance of `ServiceEntrySpecEndpointsArrayInput` via:
//
//	ServiceEntrySpecEndpointsArray{ ServiceEntrySpecEndpointsArgs{...} }
type ServiceEntrySpecEndpointsArrayInput interface {
	pulumi.Input

	ToServiceEntrySpecEndpointsArrayOutput() ServiceEntrySpecEndpointsArrayOutput
	ToServiceEntrySpecEndpointsArrayOutputWithContext(context.Context) ServiceEntrySpecEndpointsArrayOutput
}

type ServiceEntrySpecEndpointsArray []ServiceEntrySpecEndpointsInput

func (ServiceEntrySpecEndpointsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEntrySpecEndpoints)(nil)).Elem()
}

func (i ServiceEntrySpecEndpointsArray) ToServiceEntrySpecEndpointsArrayOutput() ServiceEntrySpecEndpointsArrayOutput {
	return i.ToServiceEntrySpecEndpointsArrayOutputWithContext(context.Background())
}

func (i ServiceEntrySpecEndpointsArray) ToServiceEntrySpecEndpointsArrayOutputWithContext(ctx context.Context) ServiceEntrySpecEndpointsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecEndpointsArrayOutput)
}

type ServiceEntrySpecEndpointsOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecEndpointsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpecEndpoints)(nil)).Elem()
}

func (o ServiceEntrySpecEndpointsOutput) ToServiceEntrySpecEndpointsOutput() ServiceEntrySpecEndpointsOutput {
	return o
}

func (o ServiceEntrySpecEndpointsOutput) ToServiceEntrySpecEndpointsOutputWithContext(ctx context.Context) ServiceEntrySpecEndpointsOutput {
	return o
}

func (o ServiceEntrySpecEndpointsOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecEndpoints) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// One or more labels associated with the endpoint.
func (o ServiceEntrySpecEndpointsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceEntrySpecEndpoints) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The locality associated with the endpoint.
func (o ServiceEntrySpecEndpointsOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecEndpoints) *string { return v.Locality }).(pulumi.StringPtrOutput)
}

func (o ServiceEntrySpecEndpointsOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecEndpoints) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Set of ports associated with the endpoint.
func (o ServiceEntrySpecEndpointsOutput) Ports() pulumi.IntMapOutput {
	return o.ApplyT(func(v ServiceEntrySpecEndpoints) map[string]int { return v.Ports }).(pulumi.IntMapOutput)
}

func (o ServiceEntrySpecEndpointsOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecEndpoints) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The load balancing weight associated with the endpoint.
func (o ServiceEntrySpecEndpointsOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecEndpoints) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ServiceEntrySpecEndpointsArrayOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecEndpointsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEntrySpecEndpoints)(nil)).Elem()
}

func (o ServiceEntrySpecEndpointsArrayOutput) ToServiceEntrySpecEndpointsArrayOutput() ServiceEntrySpecEndpointsArrayOutput {
	return o
}

func (o ServiceEntrySpecEndpointsArrayOutput) ToServiceEntrySpecEndpointsArrayOutputWithContext(ctx context.Context) ServiceEntrySpecEndpointsArrayOutput {
	return o
}

func (o ServiceEntrySpecEndpointsArrayOutput) Index(i pulumi.IntInput) ServiceEntrySpecEndpointsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEntrySpecEndpoints {
		return vs[0].([]ServiceEntrySpecEndpoints)[vs[1].(int)]
	}).(ServiceEntrySpecEndpointsOutput)
}

// One or more labels associated with the endpoint.
type ServiceEntrySpecEndpointsLabels struct {
}

// Set of ports associated with the endpoint.
type ServiceEntrySpecEndpointsPorts struct {
}

type ServiceEntrySpecPorts struct {
	// Label assigned to the port.
	Name *string `pulumi:"name"`
	// A valid non-negative integer port number.
	Number *int `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol   *string `pulumi:"protocol"`
	TargetPort *int    `pulumi:"targetPort"`
}

// ServiceEntrySpecPortsInput is an input type that accepts ServiceEntrySpecPortsArgs and ServiceEntrySpecPortsOutput values.
// You can construct a concrete instance of `ServiceEntrySpecPortsInput` via:
//
//	ServiceEntrySpecPortsArgs{...}
type ServiceEntrySpecPortsInput interface {
	pulumi.Input

	ToServiceEntrySpecPortsOutput() ServiceEntrySpecPortsOutput
	ToServiceEntrySpecPortsOutputWithContext(context.Context) ServiceEntrySpecPortsOutput
}

type ServiceEntrySpecPortsArgs struct {
	// Label assigned to the port.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A valid non-negative integer port number.
	Number pulumi.IntPtrInput `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol   pulumi.StringPtrInput `pulumi:"protocol"`
	TargetPort pulumi.IntPtrInput    `pulumi:"targetPort"`
}

func (ServiceEntrySpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpecPorts)(nil)).Elem()
}

func (i ServiceEntrySpecPortsArgs) ToServiceEntrySpecPortsOutput() ServiceEntrySpecPortsOutput {
	return i.ToServiceEntrySpecPortsOutputWithContext(context.Background())
}

func (i ServiceEntrySpecPortsArgs) ToServiceEntrySpecPortsOutputWithContext(ctx context.Context) ServiceEntrySpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecPortsOutput)
}

// ServiceEntrySpecPortsArrayInput is an input type that accepts ServiceEntrySpecPortsArray and ServiceEntrySpecPortsArrayOutput values.
// You can construct a concrete instance of `ServiceEntrySpecPortsArrayInput` via:
//
//	ServiceEntrySpecPortsArray{ ServiceEntrySpecPortsArgs{...} }
type ServiceEntrySpecPortsArrayInput interface {
	pulumi.Input

	ToServiceEntrySpecPortsArrayOutput() ServiceEntrySpecPortsArrayOutput
	ToServiceEntrySpecPortsArrayOutputWithContext(context.Context) ServiceEntrySpecPortsArrayOutput
}

type ServiceEntrySpecPortsArray []ServiceEntrySpecPortsInput

func (ServiceEntrySpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEntrySpecPorts)(nil)).Elem()
}

func (i ServiceEntrySpecPortsArray) ToServiceEntrySpecPortsArrayOutput() ServiceEntrySpecPortsArrayOutput {
	return i.ToServiceEntrySpecPortsArrayOutputWithContext(context.Background())
}

func (i ServiceEntrySpecPortsArray) ToServiceEntrySpecPortsArrayOutputWithContext(ctx context.Context) ServiceEntrySpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecPortsArrayOutput)
}

type ServiceEntrySpecPortsOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpecPorts)(nil)).Elem()
}

func (o ServiceEntrySpecPortsOutput) ToServiceEntrySpecPortsOutput() ServiceEntrySpecPortsOutput {
	return o
}

func (o ServiceEntrySpecPortsOutput) ToServiceEntrySpecPortsOutputWithContext(ctx context.Context) ServiceEntrySpecPortsOutput {
	return o
}

// Label assigned to the port.
func (o ServiceEntrySpecPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A valid non-negative integer port number.
func (o ServiceEntrySpecPortsOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecPorts) *int { return v.Number }).(pulumi.IntPtrOutput)
}

// The protocol exposed on the port.
func (o ServiceEntrySpecPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o ServiceEntrySpecPortsOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecPorts) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

type ServiceEntrySpecPortsArrayOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEntrySpecPorts)(nil)).Elem()
}

func (o ServiceEntrySpecPortsArrayOutput) ToServiceEntrySpecPortsArrayOutput() ServiceEntrySpecPortsArrayOutput {
	return o
}

func (o ServiceEntrySpecPortsArrayOutput) ToServiceEntrySpecPortsArrayOutputWithContext(ctx context.Context) ServiceEntrySpecPortsArrayOutput {
	return o
}

func (o ServiceEntrySpecPortsArrayOutput) Index(i pulumi.IntInput) ServiceEntrySpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEntrySpecPorts {
		return vs[0].([]ServiceEntrySpecPorts)[vs[1].(int)]
	}).(ServiceEntrySpecPortsOutput)
}

// Applicable only for MESH_INTERNAL services.
type ServiceEntrySpecWorkloadselector struct {
	Labels map[string]string `pulumi:"labels"`
}

// ServiceEntrySpecWorkloadselectorInput is an input type that accepts ServiceEntrySpecWorkloadselectorArgs and ServiceEntrySpecWorkloadselectorOutput values.
// You can construct a concrete instance of `ServiceEntrySpecWorkloadselectorInput` via:
//
//	ServiceEntrySpecWorkloadselectorArgs{...}
type ServiceEntrySpecWorkloadselectorInput interface {
	pulumi.Input

	ToServiceEntrySpecWorkloadselectorOutput() ServiceEntrySpecWorkloadselectorOutput
	ToServiceEntrySpecWorkloadselectorOutputWithContext(context.Context) ServiceEntrySpecWorkloadselectorOutput
}

// Applicable only for MESH_INTERNAL services.
type ServiceEntrySpecWorkloadselectorArgs struct {
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (ServiceEntrySpecWorkloadselectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpecWorkloadselector)(nil)).Elem()
}

func (i ServiceEntrySpecWorkloadselectorArgs) ToServiceEntrySpecWorkloadselectorOutput() ServiceEntrySpecWorkloadselectorOutput {
	return i.ToServiceEntrySpecWorkloadselectorOutputWithContext(context.Background())
}

func (i ServiceEntrySpecWorkloadselectorArgs) ToServiceEntrySpecWorkloadselectorOutputWithContext(ctx context.Context) ServiceEntrySpecWorkloadselectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecWorkloadselectorOutput)
}

func (i ServiceEntrySpecWorkloadselectorArgs) ToServiceEntrySpecWorkloadselectorPtrOutput() ServiceEntrySpecWorkloadselectorPtrOutput {
	return i.ToServiceEntrySpecWorkloadselectorPtrOutputWithContext(context.Background())
}

func (i ServiceEntrySpecWorkloadselectorArgs) ToServiceEntrySpecWorkloadselectorPtrOutputWithContext(ctx context.Context) ServiceEntrySpecWorkloadselectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecWorkloadselectorOutput).ToServiceEntrySpecWorkloadselectorPtrOutputWithContext(ctx)
}

// ServiceEntrySpecWorkloadselectorPtrInput is an input type that accepts ServiceEntrySpecWorkloadselectorArgs, ServiceEntrySpecWorkloadselectorPtr and ServiceEntrySpecWorkloadselectorPtrOutput values.
// You can construct a concrete instance of `ServiceEntrySpecWorkloadselectorPtrInput` via:
//
//	        ServiceEntrySpecWorkloadselectorArgs{...}
//
//	or:
//
//	        nil
type ServiceEntrySpecWorkloadselectorPtrInput interface {
	pulumi.Input

	ToServiceEntrySpecWorkloadselectorPtrOutput() ServiceEntrySpecWorkloadselectorPtrOutput
	ToServiceEntrySpecWorkloadselectorPtrOutputWithContext(context.Context) ServiceEntrySpecWorkloadselectorPtrOutput
}

type serviceEntrySpecWorkloadselectorPtrType ServiceEntrySpecWorkloadselectorArgs

func ServiceEntrySpecWorkloadselectorPtr(v *ServiceEntrySpecWorkloadselectorArgs) ServiceEntrySpecWorkloadselectorPtrInput {
	return (*serviceEntrySpecWorkloadselectorPtrType)(v)
}

func (*serviceEntrySpecWorkloadselectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEntrySpecWorkloadselector)(nil)).Elem()
}

func (i *serviceEntrySpecWorkloadselectorPtrType) ToServiceEntrySpecWorkloadselectorPtrOutput() ServiceEntrySpecWorkloadselectorPtrOutput {
	return i.ToServiceEntrySpecWorkloadselectorPtrOutputWithContext(context.Background())
}

func (i *serviceEntrySpecWorkloadselectorPtrType) ToServiceEntrySpecWorkloadselectorPtrOutputWithContext(ctx context.Context) ServiceEntrySpecWorkloadselectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecWorkloadselectorPtrOutput)
}

// Applicable only for MESH_INTERNAL services.
type ServiceEntrySpecWorkloadselectorOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecWorkloadselectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpecWorkloadselector)(nil)).Elem()
}

func (o ServiceEntrySpecWorkloadselectorOutput) ToServiceEntrySpecWorkloadselectorOutput() ServiceEntrySpecWorkloadselectorOutput {
	return o
}

func (o ServiceEntrySpecWorkloadselectorOutput) ToServiceEntrySpecWorkloadselectorOutputWithContext(ctx context.Context) ServiceEntrySpecWorkloadselectorOutput {
	return o
}

func (o ServiceEntrySpecWorkloadselectorOutput) ToServiceEntrySpecWorkloadselectorPtrOutput() ServiceEntrySpecWorkloadselectorPtrOutput {
	return o.ToServiceEntrySpecWorkloadselectorPtrOutputWithContext(context.Background())
}

func (o ServiceEntrySpecWorkloadselectorOutput) ToServiceEntrySpecWorkloadselectorPtrOutputWithContext(ctx context.Context) ServiceEntrySpecWorkloadselectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceEntrySpecWorkloadselector) *ServiceEntrySpecWorkloadselector {
		return &v
	}).(ServiceEntrySpecWorkloadselectorPtrOutput)
}

func (o ServiceEntrySpecWorkloadselectorOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceEntrySpecWorkloadselector) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type ServiceEntrySpecWorkloadselectorPtrOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecWorkloadselectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEntrySpecWorkloadselector)(nil)).Elem()
}

func (o ServiceEntrySpecWorkloadselectorPtrOutput) ToServiceEntrySpecWorkloadselectorPtrOutput() ServiceEntrySpecWorkloadselectorPtrOutput {
	return o
}

func (o ServiceEntrySpecWorkloadselectorPtrOutput) ToServiceEntrySpecWorkloadselectorPtrOutputWithContext(ctx context.Context) ServiceEntrySpecWorkloadselectorPtrOutput {
	return o
}

func (o ServiceEntrySpecWorkloadselectorPtrOutput) Elem() ServiceEntrySpecWorkloadselectorOutput {
	return o.ApplyT(func(v *ServiceEntrySpecWorkloadselector) ServiceEntrySpecWorkloadselector {
		if v != nil {
			return *v
		}
		var ret ServiceEntrySpecWorkloadselector
		return ret
	}).(ServiceEntrySpecWorkloadselectorOutput)
}

func (o ServiceEntrySpecWorkloadselectorPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceEntrySpecWorkloadselector) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

type ServiceEntrySpecWorkloadselectorLabels struct {
}

type SidecarType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Configuration affecting network reachability of a sidecar. See more details at: https://istio.io/docs/reference/config/networking/sidecar.html
	Spec   *SidecarSpec           `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Configuration affecting network reachability of a sidecar. See more details at: https://istio.io/docs/reference/config/networking/sidecar.html
type SidecarSpec struct {
	Egress  []SidecarSpecEgress  `pulumi:"egress"`
	Ingress []SidecarSpecIngress `pulumi:"ingress"`
	// Configuration for the outbound traffic policy.
	OutboundTrafficPolicy *SidecarSpecOutboundtrafficpolicy `pulumi:"outboundTrafficPolicy"`
	WorkloadSelector      *SidecarSpecWorkloadselector      `pulumi:"workloadSelector"`
}

// SidecarSpecInput is an input type that accepts SidecarSpecArgs and SidecarSpecOutput values.
// You can construct a concrete instance of `SidecarSpecInput` via:
//
//	SidecarSpecArgs{...}
type SidecarSpecInput interface {
	pulumi.Input

	ToSidecarSpecOutput() SidecarSpecOutput
	ToSidecarSpecOutputWithContext(context.Context) SidecarSpecOutput
}

// Configuration affecting network reachability of a sidecar. See more details at: https://istio.io/docs/reference/config/networking/sidecar.html
type SidecarSpecArgs struct {
	Egress  SidecarSpecEgressArrayInput  `pulumi:"egress"`
	Ingress SidecarSpecIngressArrayInput `pulumi:"ingress"`
	// Configuration for the outbound traffic policy.
	OutboundTrafficPolicy SidecarSpecOutboundtrafficpolicyPtrInput `pulumi:"outboundTrafficPolicy"`
	WorkloadSelector      SidecarSpecWorkloadselectorPtrInput      `pulumi:"workloadSelector"`
}

func (SidecarSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpec)(nil)).Elem()
}

func (i SidecarSpecArgs) ToSidecarSpecOutput() SidecarSpecOutput {
	return i.ToSidecarSpecOutputWithContext(context.Background())
}

func (i SidecarSpecArgs) ToSidecarSpecOutputWithContext(ctx context.Context) SidecarSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutput)
}

func (i SidecarSpecArgs) ToSidecarSpecPtrOutput() SidecarSpecPtrOutput {
	return i.ToSidecarSpecPtrOutputWithContext(context.Background())
}

func (i SidecarSpecArgs) ToSidecarSpecPtrOutputWithContext(ctx context.Context) SidecarSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutput).ToSidecarSpecPtrOutputWithContext(ctx)
}

// SidecarSpecPtrInput is an input type that accepts SidecarSpecArgs, SidecarSpecPtr and SidecarSpecPtrOutput values.
// You can construct a concrete instance of `SidecarSpecPtrInput` via:
//
//	        SidecarSpecArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecPtrInput interface {
	pulumi.Input

	ToSidecarSpecPtrOutput() SidecarSpecPtrOutput
	ToSidecarSpecPtrOutputWithContext(context.Context) SidecarSpecPtrOutput
}

type sidecarSpecPtrType SidecarSpecArgs

func SidecarSpecPtr(v *SidecarSpecArgs) SidecarSpecPtrInput {
	return (*sidecarSpecPtrType)(v)
}

func (*sidecarSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpec)(nil)).Elem()
}

func (i *sidecarSpecPtrType) ToSidecarSpecPtrOutput() SidecarSpecPtrOutput {
	return i.ToSidecarSpecPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecPtrType) ToSidecarSpecPtrOutputWithContext(ctx context.Context) SidecarSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecPtrOutput)
}

// Configuration affecting network reachability of a sidecar. See more details at: https://istio.io/docs/reference/config/networking/sidecar.html
type SidecarSpecOutput struct{ *pulumi.OutputState }

func (SidecarSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpec)(nil)).Elem()
}

func (o SidecarSpecOutput) ToSidecarSpecOutput() SidecarSpecOutput {
	return o
}

func (o SidecarSpecOutput) ToSidecarSpecOutputWithContext(ctx context.Context) SidecarSpecOutput {
	return o
}

func (o SidecarSpecOutput) ToSidecarSpecPtrOutput() SidecarSpecPtrOutput {
	return o.ToSidecarSpecPtrOutputWithContext(context.Background())
}

func (o SidecarSpecOutput) ToSidecarSpecPtrOutputWithContext(ctx context.Context) SidecarSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpec) *SidecarSpec {
		return &v
	}).(SidecarSpecPtrOutput)
}

func (o SidecarSpecOutput) Egress() SidecarSpecEgressArrayOutput {
	return o.ApplyT(func(v SidecarSpec) []SidecarSpecEgress { return v.Egress }).(SidecarSpecEgressArrayOutput)
}

func (o SidecarSpecOutput) Ingress() SidecarSpecIngressArrayOutput {
	return o.ApplyT(func(v SidecarSpec) []SidecarSpecIngress { return v.Ingress }).(SidecarSpecIngressArrayOutput)
}

// Configuration for the outbound traffic policy.
func (o SidecarSpecOutput) OutboundTrafficPolicy() SidecarSpecOutboundtrafficpolicyPtrOutput {
	return o.ApplyT(func(v SidecarSpec) *SidecarSpecOutboundtrafficpolicy { return v.OutboundTrafficPolicy }).(SidecarSpecOutboundtrafficpolicyPtrOutput)
}

func (o SidecarSpecOutput) WorkloadSelector() SidecarSpecWorkloadselectorPtrOutput {
	return o.ApplyT(func(v SidecarSpec) *SidecarSpecWorkloadselector { return v.WorkloadSelector }).(SidecarSpecWorkloadselectorPtrOutput)
}

type SidecarSpecPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpec)(nil)).Elem()
}

func (o SidecarSpecPtrOutput) ToSidecarSpecPtrOutput() SidecarSpecPtrOutput {
	return o
}

func (o SidecarSpecPtrOutput) ToSidecarSpecPtrOutputWithContext(ctx context.Context) SidecarSpecPtrOutput {
	return o
}

func (o SidecarSpecPtrOutput) Elem() SidecarSpecOutput {
	return o.ApplyT(func(v *SidecarSpec) SidecarSpec {
		if v != nil {
			return *v
		}
		var ret SidecarSpec
		return ret
	}).(SidecarSpecOutput)
}

func (o SidecarSpecPtrOutput) Egress() SidecarSpecEgressArrayOutput {
	return o.ApplyT(func(v *SidecarSpec) []SidecarSpecEgress {
		if v == nil {
			return nil
		}
		return v.Egress
	}).(SidecarSpecEgressArrayOutput)
}

func (o SidecarSpecPtrOutput) Ingress() SidecarSpecIngressArrayOutput {
	return o.ApplyT(func(v *SidecarSpec) []SidecarSpecIngress {
		if v == nil {
			return nil
		}
		return v.Ingress
	}).(SidecarSpecIngressArrayOutput)
}

// Configuration for the outbound traffic policy.
func (o SidecarSpecPtrOutput) OutboundTrafficPolicy() SidecarSpecOutboundtrafficpolicyPtrOutput {
	return o.ApplyT(func(v *SidecarSpec) *SidecarSpecOutboundtrafficpolicy {
		if v == nil {
			return nil
		}
		return v.OutboundTrafficPolicy
	}).(SidecarSpecOutboundtrafficpolicyPtrOutput)
}

func (o SidecarSpecPtrOutput) WorkloadSelector() SidecarSpecWorkloadselectorPtrOutput {
	return o.ApplyT(func(v *SidecarSpec) *SidecarSpecWorkloadselector {
		if v == nil {
			return nil
		}
		return v.WorkloadSelector
	}).(SidecarSpecWorkloadselectorPtrOutput)
}

type SidecarSpecEgress struct {
	Bind        *string  `pulumi:"bind"`
	CaptureMode *string  `pulumi:"captureMode"`
	Hosts       []string `pulumi:"hosts"`
	// The port associated with the listener.
	Port *SidecarSpecEgressPort `pulumi:"port"`
}

// SidecarSpecEgressInput is an input type that accepts SidecarSpecEgressArgs and SidecarSpecEgressOutput values.
// You can construct a concrete instance of `SidecarSpecEgressInput` via:
//
//	SidecarSpecEgressArgs{...}
type SidecarSpecEgressInput interface {
	pulumi.Input

	ToSidecarSpecEgressOutput() SidecarSpecEgressOutput
	ToSidecarSpecEgressOutputWithContext(context.Context) SidecarSpecEgressOutput
}

type SidecarSpecEgressArgs struct {
	Bind        pulumi.StringPtrInput   `pulumi:"bind"`
	CaptureMode pulumi.StringPtrInput   `pulumi:"captureMode"`
	Hosts       pulumi.StringArrayInput `pulumi:"hosts"`
	// The port associated with the listener.
	Port SidecarSpecEgressPortPtrInput `pulumi:"port"`
}

func (SidecarSpecEgressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecEgress)(nil)).Elem()
}

func (i SidecarSpecEgressArgs) ToSidecarSpecEgressOutput() SidecarSpecEgressOutput {
	return i.ToSidecarSpecEgressOutputWithContext(context.Background())
}

func (i SidecarSpecEgressArgs) ToSidecarSpecEgressOutputWithContext(ctx context.Context) SidecarSpecEgressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecEgressOutput)
}

// SidecarSpecEgressArrayInput is an input type that accepts SidecarSpecEgressArray and SidecarSpecEgressArrayOutput values.
// You can construct a concrete instance of `SidecarSpecEgressArrayInput` via:
//
//	SidecarSpecEgressArray{ SidecarSpecEgressArgs{...} }
type SidecarSpecEgressArrayInput interface {
	pulumi.Input

	ToSidecarSpecEgressArrayOutput() SidecarSpecEgressArrayOutput
	ToSidecarSpecEgressArrayOutputWithContext(context.Context) SidecarSpecEgressArrayOutput
}

type SidecarSpecEgressArray []SidecarSpecEgressInput

func (SidecarSpecEgressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SidecarSpecEgress)(nil)).Elem()
}

func (i SidecarSpecEgressArray) ToSidecarSpecEgressArrayOutput() SidecarSpecEgressArrayOutput {
	return i.ToSidecarSpecEgressArrayOutputWithContext(context.Background())
}

func (i SidecarSpecEgressArray) ToSidecarSpecEgressArrayOutputWithContext(ctx context.Context) SidecarSpecEgressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecEgressArrayOutput)
}

type SidecarSpecEgressOutput struct{ *pulumi.OutputState }

func (SidecarSpecEgressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecEgress)(nil)).Elem()
}

func (o SidecarSpecEgressOutput) ToSidecarSpecEgressOutput() SidecarSpecEgressOutput {
	return o
}

func (o SidecarSpecEgressOutput) ToSidecarSpecEgressOutputWithContext(ctx context.Context) SidecarSpecEgressOutput {
	return o
}

func (o SidecarSpecEgressOutput) Bind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecEgress) *string { return v.Bind }).(pulumi.StringPtrOutput)
}

func (o SidecarSpecEgressOutput) CaptureMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecEgress) *string { return v.CaptureMode }).(pulumi.StringPtrOutput)
}

func (o SidecarSpecEgressOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SidecarSpecEgress) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// The port associated with the listener.
func (o SidecarSpecEgressOutput) Port() SidecarSpecEgressPortPtrOutput {
	return o.ApplyT(func(v SidecarSpecEgress) *SidecarSpecEgressPort { return v.Port }).(SidecarSpecEgressPortPtrOutput)
}

type SidecarSpecEgressArrayOutput struct{ *pulumi.OutputState }

func (SidecarSpecEgressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SidecarSpecEgress)(nil)).Elem()
}

func (o SidecarSpecEgressArrayOutput) ToSidecarSpecEgressArrayOutput() SidecarSpecEgressArrayOutput {
	return o
}

func (o SidecarSpecEgressArrayOutput) ToSidecarSpecEgressArrayOutputWithContext(ctx context.Context) SidecarSpecEgressArrayOutput {
	return o
}

func (o SidecarSpecEgressArrayOutput) Index(i pulumi.IntInput) SidecarSpecEgressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SidecarSpecEgress {
		return vs[0].([]SidecarSpecEgress)[vs[1].(int)]
	}).(SidecarSpecEgressOutput)
}

// The port associated with the listener.
type SidecarSpecEgressPort struct {
	// Label assigned to the port.
	Name *string `pulumi:"name"`
	// A valid non-negative integer port number.
	Number *int `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol   *string `pulumi:"protocol"`
	TargetPort *int    `pulumi:"targetPort"`
}

// SidecarSpecEgressPortInput is an input type that accepts SidecarSpecEgressPortArgs and SidecarSpecEgressPortOutput values.
// You can construct a concrete instance of `SidecarSpecEgressPortInput` via:
//
//	SidecarSpecEgressPortArgs{...}
type SidecarSpecEgressPortInput interface {
	pulumi.Input

	ToSidecarSpecEgressPortOutput() SidecarSpecEgressPortOutput
	ToSidecarSpecEgressPortOutputWithContext(context.Context) SidecarSpecEgressPortOutput
}

// The port associated with the listener.
type SidecarSpecEgressPortArgs struct {
	// Label assigned to the port.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A valid non-negative integer port number.
	Number pulumi.IntPtrInput `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol   pulumi.StringPtrInput `pulumi:"protocol"`
	TargetPort pulumi.IntPtrInput    `pulumi:"targetPort"`
}

func (SidecarSpecEgressPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecEgressPort)(nil)).Elem()
}

func (i SidecarSpecEgressPortArgs) ToSidecarSpecEgressPortOutput() SidecarSpecEgressPortOutput {
	return i.ToSidecarSpecEgressPortOutputWithContext(context.Background())
}

func (i SidecarSpecEgressPortArgs) ToSidecarSpecEgressPortOutputWithContext(ctx context.Context) SidecarSpecEgressPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecEgressPortOutput)
}

func (i SidecarSpecEgressPortArgs) ToSidecarSpecEgressPortPtrOutput() SidecarSpecEgressPortPtrOutput {
	return i.ToSidecarSpecEgressPortPtrOutputWithContext(context.Background())
}

func (i SidecarSpecEgressPortArgs) ToSidecarSpecEgressPortPtrOutputWithContext(ctx context.Context) SidecarSpecEgressPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecEgressPortOutput).ToSidecarSpecEgressPortPtrOutputWithContext(ctx)
}

// SidecarSpecEgressPortPtrInput is an input type that accepts SidecarSpecEgressPortArgs, SidecarSpecEgressPortPtr and SidecarSpecEgressPortPtrOutput values.
// You can construct a concrete instance of `SidecarSpecEgressPortPtrInput` via:
//
//	        SidecarSpecEgressPortArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecEgressPortPtrInput interface {
	pulumi.Input

	ToSidecarSpecEgressPortPtrOutput() SidecarSpecEgressPortPtrOutput
	ToSidecarSpecEgressPortPtrOutputWithContext(context.Context) SidecarSpecEgressPortPtrOutput
}

type sidecarSpecEgressPortPtrType SidecarSpecEgressPortArgs

func SidecarSpecEgressPortPtr(v *SidecarSpecEgressPortArgs) SidecarSpecEgressPortPtrInput {
	return (*sidecarSpecEgressPortPtrType)(v)
}

func (*sidecarSpecEgressPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecEgressPort)(nil)).Elem()
}

func (i *sidecarSpecEgressPortPtrType) ToSidecarSpecEgressPortPtrOutput() SidecarSpecEgressPortPtrOutput {
	return i.ToSidecarSpecEgressPortPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecEgressPortPtrType) ToSidecarSpecEgressPortPtrOutputWithContext(ctx context.Context) SidecarSpecEgressPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecEgressPortPtrOutput)
}

// The port associated with the listener.
type SidecarSpecEgressPortOutput struct{ *pulumi.OutputState }

func (SidecarSpecEgressPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecEgressPort)(nil)).Elem()
}

func (o SidecarSpecEgressPortOutput) ToSidecarSpecEgressPortOutput() SidecarSpecEgressPortOutput {
	return o
}

func (o SidecarSpecEgressPortOutput) ToSidecarSpecEgressPortOutputWithContext(ctx context.Context) SidecarSpecEgressPortOutput {
	return o
}

func (o SidecarSpecEgressPortOutput) ToSidecarSpecEgressPortPtrOutput() SidecarSpecEgressPortPtrOutput {
	return o.ToSidecarSpecEgressPortPtrOutputWithContext(context.Background())
}

func (o SidecarSpecEgressPortOutput) ToSidecarSpecEgressPortPtrOutputWithContext(ctx context.Context) SidecarSpecEgressPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecEgressPort) *SidecarSpecEgressPort {
		return &v
	}).(SidecarSpecEgressPortPtrOutput)
}

// Label assigned to the port.
func (o SidecarSpecEgressPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecEgressPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A valid non-negative integer port number.
func (o SidecarSpecEgressPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecEgressPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

// The protocol exposed on the port.
func (o SidecarSpecEgressPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecEgressPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o SidecarSpecEgressPortOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecEgressPort) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

type SidecarSpecEgressPortPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecEgressPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecEgressPort)(nil)).Elem()
}

func (o SidecarSpecEgressPortPtrOutput) ToSidecarSpecEgressPortPtrOutput() SidecarSpecEgressPortPtrOutput {
	return o
}

func (o SidecarSpecEgressPortPtrOutput) ToSidecarSpecEgressPortPtrOutputWithContext(ctx context.Context) SidecarSpecEgressPortPtrOutput {
	return o
}

func (o SidecarSpecEgressPortPtrOutput) Elem() SidecarSpecEgressPortOutput {
	return o.ApplyT(func(v *SidecarSpecEgressPort) SidecarSpecEgressPort {
		if v != nil {
			return *v
		}
		var ret SidecarSpecEgressPort
		return ret
	}).(SidecarSpecEgressPortOutput)
}

// Label assigned to the port.
func (o SidecarSpecEgressPortPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecEgressPort) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A valid non-negative integer port number.
func (o SidecarSpecEgressPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecEgressPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

// The protocol exposed on the port.
func (o SidecarSpecEgressPortPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecEgressPort) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

func (o SidecarSpecEgressPortPtrOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecEgressPort) *int {
		if v == nil {
			return nil
		}
		return v.TargetPort
	}).(pulumi.IntPtrOutput)
}

type SidecarSpecIngress struct {
	// The IP(IPv4 or IPv6) to which the listener should be bound.
	Bind            *string `pulumi:"bind"`
	CaptureMode     *string `pulumi:"captureMode"`
	DefaultEndpoint *string `pulumi:"defaultEndpoint"`
	// The port associated with the listener.
	Port *SidecarSpecIngressPort `pulumi:"port"`
	Tls  *SidecarSpecIngressTls  `pulumi:"tls"`
}

// SidecarSpecIngressInput is an input type that accepts SidecarSpecIngressArgs and SidecarSpecIngressOutput values.
// You can construct a concrete instance of `SidecarSpecIngressInput` via:
//
//	SidecarSpecIngressArgs{...}
type SidecarSpecIngressInput interface {
	pulumi.Input

	ToSidecarSpecIngressOutput() SidecarSpecIngressOutput
	ToSidecarSpecIngressOutputWithContext(context.Context) SidecarSpecIngressOutput
}

type SidecarSpecIngressArgs struct {
	// The IP(IPv4 or IPv6) to which the listener should be bound.
	Bind            pulumi.StringPtrInput `pulumi:"bind"`
	CaptureMode     pulumi.StringPtrInput `pulumi:"captureMode"`
	DefaultEndpoint pulumi.StringPtrInput `pulumi:"defaultEndpoint"`
	// The port associated with the listener.
	Port SidecarSpecIngressPortPtrInput `pulumi:"port"`
	Tls  SidecarSpecIngressTlsPtrInput  `pulumi:"tls"`
}

func (SidecarSpecIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngress)(nil)).Elem()
}

func (i SidecarSpecIngressArgs) ToSidecarSpecIngressOutput() SidecarSpecIngressOutput {
	return i.ToSidecarSpecIngressOutputWithContext(context.Background())
}

func (i SidecarSpecIngressArgs) ToSidecarSpecIngressOutputWithContext(ctx context.Context) SidecarSpecIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressOutput)
}

// SidecarSpecIngressArrayInput is an input type that accepts SidecarSpecIngressArray and SidecarSpecIngressArrayOutput values.
// You can construct a concrete instance of `SidecarSpecIngressArrayInput` via:
//
//	SidecarSpecIngressArray{ SidecarSpecIngressArgs{...} }
type SidecarSpecIngressArrayInput interface {
	pulumi.Input

	ToSidecarSpecIngressArrayOutput() SidecarSpecIngressArrayOutput
	ToSidecarSpecIngressArrayOutputWithContext(context.Context) SidecarSpecIngressArrayOutput
}

type SidecarSpecIngressArray []SidecarSpecIngressInput

func (SidecarSpecIngressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SidecarSpecIngress)(nil)).Elem()
}

func (i SidecarSpecIngressArray) ToSidecarSpecIngressArrayOutput() SidecarSpecIngressArrayOutput {
	return i.ToSidecarSpecIngressArrayOutputWithContext(context.Background())
}

func (i SidecarSpecIngressArray) ToSidecarSpecIngressArrayOutputWithContext(ctx context.Context) SidecarSpecIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressArrayOutput)
}

type SidecarSpecIngressOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngress)(nil)).Elem()
}

func (o SidecarSpecIngressOutput) ToSidecarSpecIngressOutput() SidecarSpecIngressOutput {
	return o
}

func (o SidecarSpecIngressOutput) ToSidecarSpecIngressOutputWithContext(ctx context.Context) SidecarSpecIngressOutput {
	return o
}

// The IP(IPv4 or IPv6) to which the listener should be bound.
func (o SidecarSpecIngressOutput) Bind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngress) *string { return v.Bind }).(pulumi.StringPtrOutput)
}

func (o SidecarSpecIngressOutput) CaptureMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngress) *string { return v.CaptureMode }).(pulumi.StringPtrOutput)
}

func (o SidecarSpecIngressOutput) DefaultEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngress) *string { return v.DefaultEndpoint }).(pulumi.StringPtrOutput)
}

// The port associated with the listener.
func (o SidecarSpecIngressOutput) Port() SidecarSpecIngressPortPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngress) *SidecarSpecIngressPort { return v.Port }).(SidecarSpecIngressPortPtrOutput)
}

func (o SidecarSpecIngressOutput) Tls() SidecarSpecIngressTlsPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngress) *SidecarSpecIngressTls { return v.Tls }).(SidecarSpecIngressTlsPtrOutput)
}

type SidecarSpecIngressArrayOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SidecarSpecIngress)(nil)).Elem()
}

func (o SidecarSpecIngressArrayOutput) ToSidecarSpecIngressArrayOutput() SidecarSpecIngressArrayOutput {
	return o
}

func (o SidecarSpecIngressArrayOutput) ToSidecarSpecIngressArrayOutputWithContext(ctx context.Context) SidecarSpecIngressArrayOutput {
	return o
}

func (o SidecarSpecIngressArrayOutput) Index(i pulumi.IntInput) SidecarSpecIngressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SidecarSpecIngress {
		return vs[0].([]SidecarSpecIngress)[vs[1].(int)]
	}).(SidecarSpecIngressOutput)
}

// The port associated with the listener.
type SidecarSpecIngressPort struct {
	// Label assigned to the port.
	Name *string `pulumi:"name"`
	// A valid non-negative integer port number.
	Number *int `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol   *string `pulumi:"protocol"`
	TargetPort *int    `pulumi:"targetPort"`
}

// SidecarSpecIngressPortInput is an input type that accepts SidecarSpecIngressPortArgs and SidecarSpecIngressPortOutput values.
// You can construct a concrete instance of `SidecarSpecIngressPortInput` via:
//
//	SidecarSpecIngressPortArgs{...}
type SidecarSpecIngressPortInput interface {
	pulumi.Input

	ToSidecarSpecIngressPortOutput() SidecarSpecIngressPortOutput
	ToSidecarSpecIngressPortOutputWithContext(context.Context) SidecarSpecIngressPortOutput
}

// The port associated with the listener.
type SidecarSpecIngressPortArgs struct {
	// Label assigned to the port.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A valid non-negative integer port number.
	Number pulumi.IntPtrInput `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol   pulumi.StringPtrInput `pulumi:"protocol"`
	TargetPort pulumi.IntPtrInput    `pulumi:"targetPort"`
}

func (SidecarSpecIngressPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressPort)(nil)).Elem()
}

func (i SidecarSpecIngressPortArgs) ToSidecarSpecIngressPortOutput() SidecarSpecIngressPortOutput {
	return i.ToSidecarSpecIngressPortOutputWithContext(context.Background())
}

func (i SidecarSpecIngressPortArgs) ToSidecarSpecIngressPortOutputWithContext(ctx context.Context) SidecarSpecIngressPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressPortOutput)
}

func (i SidecarSpecIngressPortArgs) ToSidecarSpecIngressPortPtrOutput() SidecarSpecIngressPortPtrOutput {
	return i.ToSidecarSpecIngressPortPtrOutputWithContext(context.Background())
}

func (i SidecarSpecIngressPortArgs) ToSidecarSpecIngressPortPtrOutputWithContext(ctx context.Context) SidecarSpecIngressPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressPortOutput).ToSidecarSpecIngressPortPtrOutputWithContext(ctx)
}

// SidecarSpecIngressPortPtrInput is an input type that accepts SidecarSpecIngressPortArgs, SidecarSpecIngressPortPtr and SidecarSpecIngressPortPtrOutput values.
// You can construct a concrete instance of `SidecarSpecIngressPortPtrInput` via:
//
//	        SidecarSpecIngressPortArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecIngressPortPtrInput interface {
	pulumi.Input

	ToSidecarSpecIngressPortPtrOutput() SidecarSpecIngressPortPtrOutput
	ToSidecarSpecIngressPortPtrOutputWithContext(context.Context) SidecarSpecIngressPortPtrOutput
}

type sidecarSpecIngressPortPtrType SidecarSpecIngressPortArgs

func SidecarSpecIngressPortPtr(v *SidecarSpecIngressPortArgs) SidecarSpecIngressPortPtrInput {
	return (*sidecarSpecIngressPortPtrType)(v)
}

func (*sidecarSpecIngressPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecIngressPort)(nil)).Elem()
}

func (i *sidecarSpecIngressPortPtrType) ToSidecarSpecIngressPortPtrOutput() SidecarSpecIngressPortPtrOutput {
	return i.ToSidecarSpecIngressPortPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecIngressPortPtrType) ToSidecarSpecIngressPortPtrOutputWithContext(ctx context.Context) SidecarSpecIngressPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressPortPtrOutput)
}

// The port associated with the listener.
type SidecarSpecIngressPortOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressPort)(nil)).Elem()
}

func (o SidecarSpecIngressPortOutput) ToSidecarSpecIngressPortOutput() SidecarSpecIngressPortOutput {
	return o
}

func (o SidecarSpecIngressPortOutput) ToSidecarSpecIngressPortOutputWithContext(ctx context.Context) SidecarSpecIngressPortOutput {
	return o
}

func (o SidecarSpecIngressPortOutput) ToSidecarSpecIngressPortPtrOutput() SidecarSpecIngressPortPtrOutput {
	return o.ToSidecarSpecIngressPortPtrOutputWithContext(context.Background())
}

func (o SidecarSpecIngressPortOutput) ToSidecarSpecIngressPortPtrOutputWithContext(ctx context.Context) SidecarSpecIngressPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecIngressPort) *SidecarSpecIngressPort {
		return &v
	}).(SidecarSpecIngressPortPtrOutput)
}

// Label assigned to the port.
func (o SidecarSpecIngressPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A valid non-negative integer port number.
func (o SidecarSpecIngressPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

// The protocol exposed on the port.
func (o SidecarSpecIngressPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o SidecarSpecIngressPortOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressPort) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

type SidecarSpecIngressPortPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecIngressPort)(nil)).Elem()
}

func (o SidecarSpecIngressPortPtrOutput) ToSidecarSpecIngressPortPtrOutput() SidecarSpecIngressPortPtrOutput {
	return o
}

func (o SidecarSpecIngressPortPtrOutput) ToSidecarSpecIngressPortPtrOutputWithContext(ctx context.Context) SidecarSpecIngressPortPtrOutput {
	return o
}

func (o SidecarSpecIngressPortPtrOutput) Elem() SidecarSpecIngressPortOutput {
	return o.ApplyT(func(v *SidecarSpecIngressPort) SidecarSpecIngressPort {
		if v != nil {
			return *v
		}
		var ret SidecarSpecIngressPort
		return ret
	}).(SidecarSpecIngressPortOutput)
}

// Label assigned to the port.
func (o SidecarSpecIngressPortPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressPort) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A valid non-negative integer port number.
func (o SidecarSpecIngressPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

// The protocol exposed on the port.
func (o SidecarSpecIngressPortPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressPort) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

func (o SidecarSpecIngressPortPtrOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressPort) *int {
		if v == nil {
			return nil
		}
		return v.TargetPort
	}).(pulumi.IntPtrOutput)
}

type SidecarSpecIngressTls struct {
	// REQUIRED if mode is `MUTUAL`.
	CaCertificates *string `pulumi:"caCertificates"`
	// Optional: If specified, only support the specified cipher list.
	CipherSuites   []string `pulumi:"cipherSuites"`
	CredentialName *string  `pulumi:"credentialName"`
	HttpsRedirect  *bool    `pulumi:"httpsRedirect"`
	// Optional: Maximum TLS protocol version.
	MaxProtocolVersion *string `pulumi:"maxProtocolVersion"`
	// Optional: Minimum TLS protocol version.
	MinProtocolVersion *string `pulumi:"minProtocolVersion"`
	Mode               *string `pulumi:"mode"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	PrivateKey *string `pulumi:"privateKey"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	ServerCertificate     *string  `pulumi:"serverCertificate"`
	SubjectAltNames       []string `pulumi:"subjectAltNames"`
	VerifyCertificateHash []string `pulumi:"verifyCertificateHash"`
	VerifyCertificateSpki []string `pulumi:"verifyCertificateSpki"`
}

// SidecarSpecIngressTlsInput is an input type that accepts SidecarSpecIngressTlsArgs and SidecarSpecIngressTlsOutput values.
// You can construct a concrete instance of `SidecarSpecIngressTlsInput` via:
//
//	SidecarSpecIngressTlsArgs{...}
type SidecarSpecIngressTlsInput interface {
	pulumi.Input

	ToSidecarSpecIngressTlsOutput() SidecarSpecIngressTlsOutput
	ToSidecarSpecIngressTlsOutputWithContext(context.Context) SidecarSpecIngressTlsOutput
}

type SidecarSpecIngressTlsArgs struct {
	// REQUIRED if mode is `MUTUAL`.
	CaCertificates pulumi.StringPtrInput `pulumi:"caCertificates"`
	// Optional: If specified, only support the specified cipher list.
	CipherSuites   pulumi.StringArrayInput `pulumi:"cipherSuites"`
	CredentialName pulumi.StringPtrInput   `pulumi:"credentialName"`
	HttpsRedirect  pulumi.BoolPtrInput     `pulumi:"httpsRedirect"`
	// Optional: Maximum TLS protocol version.
	MaxProtocolVersion pulumi.StringPtrInput `pulumi:"maxProtocolVersion"`
	// Optional: Minimum TLS protocol version.
	MinProtocolVersion pulumi.StringPtrInput `pulumi:"minProtocolVersion"`
	Mode               pulumi.StringPtrInput `pulumi:"mode"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	ServerCertificate     pulumi.StringPtrInput   `pulumi:"serverCertificate"`
	SubjectAltNames       pulumi.StringArrayInput `pulumi:"subjectAltNames"`
	VerifyCertificateHash pulumi.StringArrayInput `pulumi:"verifyCertificateHash"`
	VerifyCertificateSpki pulumi.StringArrayInput `pulumi:"verifyCertificateSpki"`
}

func (SidecarSpecIngressTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressTls)(nil)).Elem()
}

func (i SidecarSpecIngressTlsArgs) ToSidecarSpecIngressTlsOutput() SidecarSpecIngressTlsOutput {
	return i.ToSidecarSpecIngressTlsOutputWithContext(context.Background())
}

func (i SidecarSpecIngressTlsArgs) ToSidecarSpecIngressTlsOutputWithContext(ctx context.Context) SidecarSpecIngressTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressTlsOutput)
}

func (i SidecarSpecIngressTlsArgs) ToSidecarSpecIngressTlsPtrOutput() SidecarSpecIngressTlsPtrOutput {
	return i.ToSidecarSpecIngressTlsPtrOutputWithContext(context.Background())
}

func (i SidecarSpecIngressTlsArgs) ToSidecarSpecIngressTlsPtrOutputWithContext(ctx context.Context) SidecarSpecIngressTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressTlsOutput).ToSidecarSpecIngressTlsPtrOutputWithContext(ctx)
}

// SidecarSpecIngressTlsPtrInput is an input type that accepts SidecarSpecIngressTlsArgs, SidecarSpecIngressTlsPtr and SidecarSpecIngressTlsPtrOutput values.
// You can construct a concrete instance of `SidecarSpecIngressTlsPtrInput` via:
//
//	        SidecarSpecIngressTlsArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecIngressTlsPtrInput interface {
	pulumi.Input

	ToSidecarSpecIngressTlsPtrOutput() SidecarSpecIngressTlsPtrOutput
	ToSidecarSpecIngressTlsPtrOutputWithContext(context.Context) SidecarSpecIngressTlsPtrOutput
}

type sidecarSpecIngressTlsPtrType SidecarSpecIngressTlsArgs

func SidecarSpecIngressTlsPtr(v *SidecarSpecIngressTlsArgs) SidecarSpecIngressTlsPtrInput {
	return (*sidecarSpecIngressTlsPtrType)(v)
}

func (*sidecarSpecIngressTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecIngressTls)(nil)).Elem()
}

func (i *sidecarSpecIngressTlsPtrType) ToSidecarSpecIngressTlsPtrOutput() SidecarSpecIngressTlsPtrOutput {
	return i.ToSidecarSpecIngressTlsPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecIngressTlsPtrType) ToSidecarSpecIngressTlsPtrOutputWithContext(ctx context.Context) SidecarSpecIngressTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressTlsPtrOutput)
}

type SidecarSpecIngressTlsOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressTls)(nil)).Elem()
}

func (o SidecarSpecIngressTlsOutput) ToSidecarSpecIngressTlsOutput() SidecarSpecIngressTlsOutput {
	return o
}

func (o SidecarSpecIngressTlsOutput) ToSidecarSpecIngressTlsOutputWithContext(ctx context.Context) SidecarSpecIngressTlsOutput {
	return o
}

func (o SidecarSpecIngressTlsOutput) ToSidecarSpecIngressTlsPtrOutput() SidecarSpecIngressTlsPtrOutput {
	return o.ToSidecarSpecIngressTlsPtrOutputWithContext(context.Background())
}

func (o SidecarSpecIngressTlsOutput) ToSidecarSpecIngressTlsPtrOutputWithContext(ctx context.Context) SidecarSpecIngressTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecIngressTls) *SidecarSpecIngressTls {
		return &v
	}).(SidecarSpecIngressTlsPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o SidecarSpecIngressTlsOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.CaCertificates }).(pulumi.StringPtrOutput)
}

// Optional: If specified, only support the specified cipher list.
func (o SidecarSpecIngressTlsOutput) CipherSuites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) []string { return v.CipherSuites }).(pulumi.StringArrayOutput)
}

func (o SidecarSpecIngressTlsOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.CredentialName }).(pulumi.StringPtrOutput)
}

func (o SidecarSpecIngressTlsOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *bool { return v.HttpsRedirect }).(pulumi.BoolPtrOutput)
}

// Optional: Maximum TLS protocol version.
func (o SidecarSpecIngressTlsOutput) MaxProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.MaxProtocolVersion }).(pulumi.StringPtrOutput)
}

// Optional: Minimum TLS protocol version.
func (o SidecarSpecIngressTlsOutput) MinProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.MinProtocolVersion }).(pulumi.StringPtrOutput)
}

func (o SidecarSpecIngressTlsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o SidecarSpecIngressTlsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o SidecarSpecIngressTlsOutput) ServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.ServerCertificate }).(pulumi.StringPtrOutput)
}

func (o SidecarSpecIngressTlsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

func (o SidecarSpecIngressTlsOutput) VerifyCertificateHash() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) []string { return v.VerifyCertificateHash }).(pulumi.StringArrayOutput)
}

func (o SidecarSpecIngressTlsOutput) VerifyCertificateSpki() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) []string { return v.VerifyCertificateSpki }).(pulumi.StringArrayOutput)
}

type SidecarSpecIngressTlsPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecIngressTls)(nil)).Elem()
}

func (o SidecarSpecIngressTlsPtrOutput) ToSidecarSpecIngressTlsPtrOutput() SidecarSpecIngressTlsPtrOutput {
	return o
}

func (o SidecarSpecIngressTlsPtrOutput) ToSidecarSpecIngressTlsPtrOutputWithContext(ctx context.Context) SidecarSpecIngressTlsPtrOutput {
	return o
}

func (o SidecarSpecIngressTlsPtrOutput) Elem() SidecarSpecIngressTlsOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) SidecarSpecIngressTls {
		if v != nil {
			return *v
		}
		var ret SidecarSpecIngressTls
		return ret
	}).(SidecarSpecIngressTlsOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o SidecarSpecIngressTlsPtrOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificates
	}).(pulumi.StringPtrOutput)
}

// Optional: If specified, only support the specified cipher list.
func (o SidecarSpecIngressTlsPtrOutput) CipherSuites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) []string {
		if v == nil {
			return nil
		}
		return v.CipherSuites
	}).(pulumi.StringArrayOutput)
}

func (o SidecarSpecIngressTlsPtrOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.CredentialName
	}).(pulumi.StringPtrOutput)
}

func (o SidecarSpecIngressTlsPtrOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsRedirect
	}).(pulumi.BoolPtrOutput)
}

// Optional: Maximum TLS protocol version.
func (o SidecarSpecIngressTlsPtrOutput) MaxProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.MaxProtocolVersion
	}).(pulumi.StringPtrOutput)
}

// Optional: Minimum TLS protocol version.
func (o SidecarSpecIngressTlsPtrOutput) MinProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.MinProtocolVersion
	}).(pulumi.StringPtrOutput)
}

func (o SidecarSpecIngressTlsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o SidecarSpecIngressTlsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o SidecarSpecIngressTlsPtrOutput) ServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.ServerCertificate
	}).(pulumi.StringPtrOutput)
}

func (o SidecarSpecIngressTlsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

func (o SidecarSpecIngressTlsPtrOutput) VerifyCertificateHash() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) []string {
		if v == nil {
			return nil
		}
		return v.VerifyCertificateHash
	}).(pulumi.StringArrayOutput)
}

func (o SidecarSpecIngressTlsPtrOutput) VerifyCertificateSpki() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) []string {
		if v == nil {
			return nil
		}
		return v.VerifyCertificateSpki
	}).(pulumi.StringArrayOutput)
}

// Configuration for the outbound traffic policy.
type SidecarSpecOutboundtrafficpolicy struct {
	EgressProxy *SidecarSpecOutboundtrafficpolicyEgressproxy `pulumi:"egressProxy"`
	Mode        *string                                      `pulumi:"mode"`
}

// SidecarSpecOutboundtrafficpolicyInput is an input type that accepts SidecarSpecOutboundtrafficpolicyArgs and SidecarSpecOutboundtrafficpolicyOutput values.
// You can construct a concrete instance of `SidecarSpecOutboundtrafficpolicyInput` via:
//
//	SidecarSpecOutboundtrafficpolicyArgs{...}
type SidecarSpecOutboundtrafficpolicyInput interface {
	pulumi.Input

	ToSidecarSpecOutboundtrafficpolicyOutput() SidecarSpecOutboundtrafficpolicyOutput
	ToSidecarSpecOutboundtrafficpolicyOutputWithContext(context.Context) SidecarSpecOutboundtrafficpolicyOutput
}

// Configuration for the outbound traffic policy.
type SidecarSpecOutboundtrafficpolicyArgs struct {
	EgressProxy SidecarSpecOutboundtrafficpolicyEgressproxyPtrInput `pulumi:"egressProxy"`
	Mode        pulumi.StringPtrInput                               `pulumi:"mode"`
}

func (SidecarSpecOutboundtrafficpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecOutboundtrafficpolicy)(nil)).Elem()
}

func (i SidecarSpecOutboundtrafficpolicyArgs) ToSidecarSpecOutboundtrafficpolicyOutput() SidecarSpecOutboundtrafficpolicyOutput {
	return i.ToSidecarSpecOutboundtrafficpolicyOutputWithContext(context.Background())
}

func (i SidecarSpecOutboundtrafficpolicyArgs) ToSidecarSpecOutboundtrafficpolicyOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundtrafficpolicyOutput)
}

func (i SidecarSpecOutboundtrafficpolicyArgs) ToSidecarSpecOutboundtrafficpolicyPtrOutput() SidecarSpecOutboundtrafficpolicyPtrOutput {
	return i.ToSidecarSpecOutboundtrafficpolicyPtrOutputWithContext(context.Background())
}

func (i SidecarSpecOutboundtrafficpolicyArgs) ToSidecarSpecOutboundtrafficpolicyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundtrafficpolicyOutput).ToSidecarSpecOutboundtrafficpolicyPtrOutputWithContext(ctx)
}

// SidecarSpecOutboundtrafficpolicyPtrInput is an input type that accepts SidecarSpecOutboundtrafficpolicyArgs, SidecarSpecOutboundtrafficpolicyPtr and SidecarSpecOutboundtrafficpolicyPtrOutput values.
// You can construct a concrete instance of `SidecarSpecOutboundtrafficpolicyPtrInput` via:
//
//	        SidecarSpecOutboundtrafficpolicyArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecOutboundtrafficpolicyPtrInput interface {
	pulumi.Input

	ToSidecarSpecOutboundtrafficpolicyPtrOutput() SidecarSpecOutboundtrafficpolicyPtrOutput
	ToSidecarSpecOutboundtrafficpolicyPtrOutputWithContext(context.Context) SidecarSpecOutboundtrafficpolicyPtrOutput
}

type sidecarSpecOutboundtrafficpolicyPtrType SidecarSpecOutboundtrafficpolicyArgs

func SidecarSpecOutboundtrafficpolicyPtr(v *SidecarSpecOutboundtrafficpolicyArgs) SidecarSpecOutboundtrafficpolicyPtrInput {
	return (*sidecarSpecOutboundtrafficpolicyPtrType)(v)
}

func (*sidecarSpecOutboundtrafficpolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecOutboundtrafficpolicy)(nil)).Elem()
}

func (i *sidecarSpecOutboundtrafficpolicyPtrType) ToSidecarSpecOutboundtrafficpolicyPtrOutput() SidecarSpecOutboundtrafficpolicyPtrOutput {
	return i.ToSidecarSpecOutboundtrafficpolicyPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecOutboundtrafficpolicyPtrType) ToSidecarSpecOutboundtrafficpolicyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundtrafficpolicyPtrOutput)
}

// Configuration for the outbound traffic policy.
type SidecarSpecOutboundtrafficpolicyOutput struct{ *pulumi.OutputState }

func (SidecarSpecOutboundtrafficpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecOutboundtrafficpolicy)(nil)).Elem()
}

func (o SidecarSpecOutboundtrafficpolicyOutput) ToSidecarSpecOutboundtrafficpolicyOutput() SidecarSpecOutboundtrafficpolicyOutput {
	return o
}

func (o SidecarSpecOutboundtrafficpolicyOutput) ToSidecarSpecOutboundtrafficpolicyOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyOutput {
	return o
}

func (o SidecarSpecOutboundtrafficpolicyOutput) ToSidecarSpecOutboundtrafficpolicyPtrOutput() SidecarSpecOutboundtrafficpolicyPtrOutput {
	return o.ToSidecarSpecOutboundtrafficpolicyPtrOutputWithContext(context.Background())
}

func (o SidecarSpecOutboundtrafficpolicyOutput) ToSidecarSpecOutboundtrafficpolicyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecOutboundtrafficpolicy) *SidecarSpecOutboundtrafficpolicy {
		return &v
	}).(SidecarSpecOutboundtrafficpolicyPtrOutput)
}

func (o SidecarSpecOutboundtrafficpolicyOutput) EgressProxy() SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput {
	return o.ApplyT(func(v SidecarSpecOutboundtrafficpolicy) *SidecarSpecOutboundtrafficpolicyEgressproxy {
		return v.EgressProxy
	}).(SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput)
}

func (o SidecarSpecOutboundtrafficpolicyOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecOutboundtrafficpolicy) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type SidecarSpecOutboundtrafficpolicyPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecOutboundtrafficpolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecOutboundtrafficpolicy)(nil)).Elem()
}

func (o SidecarSpecOutboundtrafficpolicyPtrOutput) ToSidecarSpecOutboundtrafficpolicyPtrOutput() SidecarSpecOutboundtrafficpolicyPtrOutput {
	return o
}

func (o SidecarSpecOutboundtrafficpolicyPtrOutput) ToSidecarSpecOutboundtrafficpolicyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyPtrOutput {
	return o
}

func (o SidecarSpecOutboundtrafficpolicyPtrOutput) Elem() SidecarSpecOutboundtrafficpolicyOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundtrafficpolicy) SidecarSpecOutboundtrafficpolicy {
		if v != nil {
			return *v
		}
		var ret SidecarSpecOutboundtrafficpolicy
		return ret
	}).(SidecarSpecOutboundtrafficpolicyOutput)
}

func (o SidecarSpecOutboundtrafficpolicyPtrOutput) EgressProxy() SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundtrafficpolicy) *SidecarSpecOutboundtrafficpolicyEgressproxy {
		if v == nil {
			return nil
		}
		return v.EgressProxy
	}).(SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput)
}

func (o SidecarSpecOutboundtrafficpolicyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundtrafficpolicy) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

type SidecarSpecOutboundtrafficpolicyEgressproxy struct {
	// The name of a service from the service registry.
	Host *string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *SidecarSpecOutboundtrafficpolicyEgressproxyPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// SidecarSpecOutboundtrafficpolicyEgressproxyInput is an input type that accepts SidecarSpecOutboundtrafficpolicyEgressproxyArgs and SidecarSpecOutboundtrafficpolicyEgressproxyOutput values.
// You can construct a concrete instance of `SidecarSpecOutboundtrafficpolicyEgressproxyInput` via:
//
//	SidecarSpecOutboundtrafficpolicyEgressproxyArgs{...}
type SidecarSpecOutboundtrafficpolicyEgressproxyInput interface {
	pulumi.Input

	ToSidecarSpecOutboundtrafficpolicyEgressproxyOutput() SidecarSpecOutboundtrafficpolicyEgressproxyOutput
	ToSidecarSpecOutboundtrafficpolicyEgressproxyOutputWithContext(context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyOutput
}

type SidecarSpecOutboundtrafficpolicyEgressproxyArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (SidecarSpecOutboundtrafficpolicyEgressproxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecOutboundtrafficpolicyEgressproxy)(nil)).Elem()
}

func (i SidecarSpecOutboundtrafficpolicyEgressproxyArgs) ToSidecarSpecOutboundtrafficpolicyEgressproxyOutput() SidecarSpecOutboundtrafficpolicyEgressproxyOutput {
	return i.ToSidecarSpecOutboundtrafficpolicyEgressproxyOutputWithContext(context.Background())
}

func (i SidecarSpecOutboundtrafficpolicyEgressproxyArgs) ToSidecarSpecOutboundtrafficpolicyEgressproxyOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundtrafficpolicyEgressproxyOutput)
}

func (i SidecarSpecOutboundtrafficpolicyEgressproxyArgs) ToSidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput() SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput {
	return i.ToSidecarSpecOutboundtrafficpolicyEgressproxyPtrOutputWithContext(context.Background())
}

func (i SidecarSpecOutboundtrafficpolicyEgressproxyArgs) ToSidecarSpecOutboundtrafficpolicyEgressproxyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundtrafficpolicyEgressproxyOutput).ToSidecarSpecOutboundtrafficpolicyEgressproxyPtrOutputWithContext(ctx)
}

// SidecarSpecOutboundtrafficpolicyEgressproxyPtrInput is an input type that accepts SidecarSpecOutboundtrafficpolicyEgressproxyArgs, SidecarSpecOutboundtrafficpolicyEgressproxyPtr and SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput values.
// You can construct a concrete instance of `SidecarSpecOutboundtrafficpolicyEgressproxyPtrInput` via:
//
//	        SidecarSpecOutboundtrafficpolicyEgressproxyArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecOutboundtrafficpolicyEgressproxyPtrInput interface {
	pulumi.Input

	ToSidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput() SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput
	ToSidecarSpecOutboundtrafficpolicyEgressproxyPtrOutputWithContext(context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput
}

type sidecarSpecOutboundtrafficpolicyEgressproxyPtrType SidecarSpecOutboundtrafficpolicyEgressproxyArgs

func SidecarSpecOutboundtrafficpolicyEgressproxyPtr(v *SidecarSpecOutboundtrafficpolicyEgressproxyArgs) SidecarSpecOutboundtrafficpolicyEgressproxyPtrInput {
	return (*sidecarSpecOutboundtrafficpolicyEgressproxyPtrType)(v)
}

func (*sidecarSpecOutboundtrafficpolicyEgressproxyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecOutboundtrafficpolicyEgressproxy)(nil)).Elem()
}

func (i *sidecarSpecOutboundtrafficpolicyEgressproxyPtrType) ToSidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput() SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput {
	return i.ToSidecarSpecOutboundtrafficpolicyEgressproxyPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecOutboundtrafficpolicyEgressproxyPtrType) ToSidecarSpecOutboundtrafficpolicyEgressproxyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput)
}

type SidecarSpecOutboundtrafficpolicyEgressproxyOutput struct{ *pulumi.OutputState }

func (SidecarSpecOutboundtrafficpolicyEgressproxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecOutboundtrafficpolicyEgressproxy)(nil)).Elem()
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyOutput) ToSidecarSpecOutboundtrafficpolicyEgressproxyOutput() SidecarSpecOutboundtrafficpolicyEgressproxyOutput {
	return o
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyOutput) ToSidecarSpecOutboundtrafficpolicyEgressproxyOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyOutput {
	return o
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyOutput) ToSidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput() SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput {
	return o.ToSidecarSpecOutboundtrafficpolicyEgressproxyPtrOutputWithContext(context.Background())
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyOutput) ToSidecarSpecOutboundtrafficpolicyEgressproxyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecOutboundtrafficpolicyEgressproxy) *SidecarSpecOutboundtrafficpolicyEgressproxy {
		return &v
	}).(SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput)
}

// The name of a service from the service registry.
func (o SidecarSpecOutboundtrafficpolicyEgressproxyOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecOutboundtrafficpolicyEgressproxy) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o SidecarSpecOutboundtrafficpolicyEgressproxyOutput) Port() SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput {
	return o.ApplyT(func(v SidecarSpecOutboundtrafficpolicyEgressproxy) *SidecarSpecOutboundtrafficpolicyEgressproxyPort {
		return v.Port
	}).(SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput)
}

// The name of a subset within the service.
func (o SidecarSpecOutboundtrafficpolicyEgressproxyOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecOutboundtrafficpolicyEgressproxy) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

type SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecOutboundtrafficpolicyEgressproxy)(nil)).Elem()
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput) ToSidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput() SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput {
	return o
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput) ToSidecarSpecOutboundtrafficpolicyEgressproxyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput {
	return o
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput) Elem() SidecarSpecOutboundtrafficpolicyEgressproxyOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundtrafficpolicyEgressproxy) SidecarSpecOutboundtrafficpolicyEgressproxy {
		if v != nil {
			return *v
		}
		var ret SidecarSpecOutboundtrafficpolicyEgressproxy
		return ret
	}).(SidecarSpecOutboundtrafficpolicyEgressproxyOutput)
}

// The name of a service from the service registry.
func (o SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundtrafficpolicyEgressproxy) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput) Port() SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundtrafficpolicyEgressproxy) *SidecarSpecOutboundtrafficpolicyEgressproxyPort {
		if v == nil {
			return nil
		}
		return v.Port
	}).(SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput)
}

// The name of a subset within the service.
func (o SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundtrafficpolicyEgressproxy) *string {
		if v == nil {
			return nil
		}
		return v.Subset
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
type SidecarSpecOutboundtrafficpolicyEgressproxyPort struct {
	Number *int `pulumi:"number"`
}

// SidecarSpecOutboundtrafficpolicyEgressproxyPortInput is an input type that accepts SidecarSpecOutboundtrafficpolicyEgressproxyPortArgs and SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput values.
// You can construct a concrete instance of `SidecarSpecOutboundtrafficpolicyEgressproxyPortInput` via:
//
//	SidecarSpecOutboundtrafficpolicyEgressproxyPortArgs{...}
type SidecarSpecOutboundtrafficpolicyEgressproxyPortInput interface {
	pulumi.Input

	ToSidecarSpecOutboundtrafficpolicyEgressproxyPortOutput() SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput
	ToSidecarSpecOutboundtrafficpolicyEgressproxyPortOutputWithContext(context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput
}

// Specifies the port on the host that is being addressed.
type SidecarSpecOutboundtrafficpolicyEgressproxyPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (SidecarSpecOutboundtrafficpolicyEgressproxyPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecOutboundtrafficpolicyEgressproxyPort)(nil)).Elem()
}

func (i SidecarSpecOutboundtrafficpolicyEgressproxyPortArgs) ToSidecarSpecOutboundtrafficpolicyEgressproxyPortOutput() SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput {
	return i.ToSidecarSpecOutboundtrafficpolicyEgressproxyPortOutputWithContext(context.Background())
}

func (i SidecarSpecOutboundtrafficpolicyEgressproxyPortArgs) ToSidecarSpecOutboundtrafficpolicyEgressproxyPortOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput)
}

func (i SidecarSpecOutboundtrafficpolicyEgressproxyPortArgs) ToSidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput() SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput {
	return i.ToSidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutputWithContext(context.Background())
}

func (i SidecarSpecOutboundtrafficpolicyEgressproxyPortArgs) ToSidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput).ToSidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutputWithContext(ctx)
}

// SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrInput is an input type that accepts SidecarSpecOutboundtrafficpolicyEgressproxyPortArgs, SidecarSpecOutboundtrafficpolicyEgressproxyPortPtr and SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput values.
// You can construct a concrete instance of `SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrInput` via:
//
//	        SidecarSpecOutboundtrafficpolicyEgressproxyPortArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrInput interface {
	pulumi.Input

	ToSidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput() SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput
	ToSidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutputWithContext(context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput
}

type sidecarSpecOutboundtrafficpolicyEgressproxyPortPtrType SidecarSpecOutboundtrafficpolicyEgressproxyPortArgs

func SidecarSpecOutboundtrafficpolicyEgressproxyPortPtr(v *SidecarSpecOutboundtrafficpolicyEgressproxyPortArgs) SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrInput {
	return (*sidecarSpecOutboundtrafficpolicyEgressproxyPortPtrType)(v)
}

func (*sidecarSpecOutboundtrafficpolicyEgressproxyPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecOutboundtrafficpolicyEgressproxyPort)(nil)).Elem()
}

func (i *sidecarSpecOutboundtrafficpolicyEgressproxyPortPtrType) ToSidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput() SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput {
	return i.ToSidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecOutboundtrafficpolicyEgressproxyPortPtrType) ToSidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput struct{ *pulumi.OutputState }

func (SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecOutboundtrafficpolicyEgressproxyPort)(nil)).Elem()
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput) ToSidecarSpecOutboundtrafficpolicyEgressproxyPortOutput() SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput {
	return o
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput) ToSidecarSpecOutboundtrafficpolicyEgressproxyPortOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput {
	return o
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput) ToSidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput() SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput {
	return o.ToSidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutputWithContext(context.Background())
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput) ToSidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecOutboundtrafficpolicyEgressproxyPort) *SidecarSpecOutboundtrafficpolicyEgressproxyPort {
		return &v
	}).(SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput)
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecOutboundtrafficpolicyEgressproxyPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecOutboundtrafficpolicyEgressproxyPort)(nil)).Elem()
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput) ToSidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput() SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput {
	return o
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput) ToSidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput {
	return o
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput) Elem() SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundtrafficpolicyEgressproxyPort) SidecarSpecOutboundtrafficpolicyEgressproxyPort {
		if v != nil {
			return *v
		}
		var ret SidecarSpecOutboundtrafficpolicyEgressproxyPort
		return ret
	}).(SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput)
}

func (o SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundtrafficpolicyEgressproxyPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

type SidecarSpecWorkloadselector struct {
	Labels map[string]string `pulumi:"labels"`
}

// SidecarSpecWorkloadselectorInput is an input type that accepts SidecarSpecWorkloadselectorArgs and SidecarSpecWorkloadselectorOutput values.
// You can construct a concrete instance of `SidecarSpecWorkloadselectorInput` via:
//
//	SidecarSpecWorkloadselectorArgs{...}
type SidecarSpecWorkloadselectorInput interface {
	pulumi.Input

	ToSidecarSpecWorkloadselectorOutput() SidecarSpecWorkloadselectorOutput
	ToSidecarSpecWorkloadselectorOutputWithContext(context.Context) SidecarSpecWorkloadselectorOutput
}

type SidecarSpecWorkloadselectorArgs struct {
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (SidecarSpecWorkloadselectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecWorkloadselector)(nil)).Elem()
}

func (i SidecarSpecWorkloadselectorArgs) ToSidecarSpecWorkloadselectorOutput() SidecarSpecWorkloadselectorOutput {
	return i.ToSidecarSpecWorkloadselectorOutputWithContext(context.Background())
}

func (i SidecarSpecWorkloadselectorArgs) ToSidecarSpecWorkloadselectorOutputWithContext(ctx context.Context) SidecarSpecWorkloadselectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecWorkloadselectorOutput)
}

func (i SidecarSpecWorkloadselectorArgs) ToSidecarSpecWorkloadselectorPtrOutput() SidecarSpecWorkloadselectorPtrOutput {
	return i.ToSidecarSpecWorkloadselectorPtrOutputWithContext(context.Background())
}

func (i SidecarSpecWorkloadselectorArgs) ToSidecarSpecWorkloadselectorPtrOutputWithContext(ctx context.Context) SidecarSpecWorkloadselectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecWorkloadselectorOutput).ToSidecarSpecWorkloadselectorPtrOutputWithContext(ctx)
}

// SidecarSpecWorkloadselectorPtrInput is an input type that accepts SidecarSpecWorkloadselectorArgs, SidecarSpecWorkloadselectorPtr and SidecarSpecWorkloadselectorPtrOutput values.
// You can construct a concrete instance of `SidecarSpecWorkloadselectorPtrInput` via:
//
//	        SidecarSpecWorkloadselectorArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecWorkloadselectorPtrInput interface {
	pulumi.Input

	ToSidecarSpecWorkloadselectorPtrOutput() SidecarSpecWorkloadselectorPtrOutput
	ToSidecarSpecWorkloadselectorPtrOutputWithContext(context.Context) SidecarSpecWorkloadselectorPtrOutput
}

type sidecarSpecWorkloadselectorPtrType SidecarSpecWorkloadselectorArgs

func SidecarSpecWorkloadselectorPtr(v *SidecarSpecWorkloadselectorArgs) SidecarSpecWorkloadselectorPtrInput {
	return (*sidecarSpecWorkloadselectorPtrType)(v)
}

func (*sidecarSpecWorkloadselectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecWorkloadselector)(nil)).Elem()
}

func (i *sidecarSpecWorkloadselectorPtrType) ToSidecarSpecWorkloadselectorPtrOutput() SidecarSpecWorkloadselectorPtrOutput {
	return i.ToSidecarSpecWorkloadselectorPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecWorkloadselectorPtrType) ToSidecarSpecWorkloadselectorPtrOutputWithContext(ctx context.Context) SidecarSpecWorkloadselectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecWorkloadselectorPtrOutput)
}

type SidecarSpecWorkloadselectorOutput struct{ *pulumi.OutputState }

func (SidecarSpecWorkloadselectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecWorkloadselector)(nil)).Elem()
}

func (o SidecarSpecWorkloadselectorOutput) ToSidecarSpecWorkloadselectorOutput() SidecarSpecWorkloadselectorOutput {
	return o
}

func (o SidecarSpecWorkloadselectorOutput) ToSidecarSpecWorkloadselectorOutputWithContext(ctx context.Context) SidecarSpecWorkloadselectorOutput {
	return o
}

func (o SidecarSpecWorkloadselectorOutput) ToSidecarSpecWorkloadselectorPtrOutput() SidecarSpecWorkloadselectorPtrOutput {
	return o.ToSidecarSpecWorkloadselectorPtrOutputWithContext(context.Background())
}

func (o SidecarSpecWorkloadselectorOutput) ToSidecarSpecWorkloadselectorPtrOutputWithContext(ctx context.Context) SidecarSpecWorkloadselectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecWorkloadselector) *SidecarSpecWorkloadselector {
		return &v
	}).(SidecarSpecWorkloadselectorPtrOutput)
}

func (o SidecarSpecWorkloadselectorOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v SidecarSpecWorkloadselector) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type SidecarSpecWorkloadselectorPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecWorkloadselectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecWorkloadselector)(nil)).Elem()
}

func (o SidecarSpecWorkloadselectorPtrOutput) ToSidecarSpecWorkloadselectorPtrOutput() SidecarSpecWorkloadselectorPtrOutput {
	return o
}

func (o SidecarSpecWorkloadselectorPtrOutput) ToSidecarSpecWorkloadselectorPtrOutputWithContext(ctx context.Context) SidecarSpecWorkloadselectorPtrOutput {
	return o
}

func (o SidecarSpecWorkloadselectorPtrOutput) Elem() SidecarSpecWorkloadselectorOutput {
	return o.ApplyT(func(v *SidecarSpecWorkloadselector) SidecarSpecWorkloadselector {
		if v != nil {
			return *v
		}
		var ret SidecarSpecWorkloadselector
		return ret
	}).(SidecarSpecWorkloadselectorOutput)
}

func (o SidecarSpecWorkloadselectorPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SidecarSpecWorkloadselector) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

type SidecarSpecWorkloadselectorLabels struct {
}

type VirtualServiceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
	Spec   *VirtualServiceSpec    `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
type VirtualServiceSpec struct {
	// A list of namespaces to which this virtual service is exported.
	ExportTo []string `pulumi:"exportTo"`
	// The names of gateways and sidecars that should apply these routes.
	Gateways []string `pulumi:"gateways"`
	// The destination hosts to which traffic is being sent.
	Hosts []string `pulumi:"hosts"`
	// An ordered list of route rules for HTTP traffic.
	Http []VirtualServiceSpecHttp `pulumi:"http"`
	// An ordered list of route rules for opaque TCP traffic.
	Tcp []VirtualServiceSpecTcp `pulumi:"tcp"`
	Tls []VirtualServiceSpecTls `pulumi:"tls"`
}

// VirtualServiceSpecInput is an input type that accepts VirtualServiceSpecArgs and VirtualServiceSpecOutput values.
// You can construct a concrete instance of `VirtualServiceSpecInput` via:
//
//	VirtualServiceSpecArgs{...}
type VirtualServiceSpecInput interface {
	pulumi.Input

	ToVirtualServiceSpecOutput() VirtualServiceSpecOutput
	ToVirtualServiceSpecOutputWithContext(context.Context) VirtualServiceSpecOutput
}

// Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
type VirtualServiceSpecArgs struct {
	// A list of namespaces to which this virtual service is exported.
	ExportTo pulumi.StringArrayInput `pulumi:"exportTo"`
	// The names of gateways and sidecars that should apply these routes.
	Gateways pulumi.StringArrayInput `pulumi:"gateways"`
	// The destination hosts to which traffic is being sent.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// An ordered list of route rules for HTTP traffic.
	Http VirtualServiceSpecHttpArrayInput `pulumi:"http"`
	// An ordered list of route rules for opaque TCP traffic.
	Tcp VirtualServiceSpecTcpArrayInput `pulumi:"tcp"`
	Tls VirtualServiceSpecTlsArrayInput `pulumi:"tls"`
}

func (VirtualServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpec)(nil)).Elem()
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecOutput() VirtualServiceSpecOutput {
	return i.ToVirtualServiceSpecOutputWithContext(context.Background())
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecOutputWithContext(ctx context.Context) VirtualServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecOutput)
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return i.ToVirtualServiceSpecPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecOutput).ToVirtualServiceSpecPtrOutputWithContext(ctx)
}

// VirtualServiceSpecPtrInput is an input type that accepts VirtualServiceSpecArgs, VirtualServiceSpecPtr and VirtualServiceSpecPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecPtrInput` via:
//
//	        VirtualServiceSpecArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput
	ToVirtualServiceSpecPtrOutputWithContext(context.Context) VirtualServiceSpecPtrOutput
}

type virtualServiceSpecPtrType VirtualServiceSpecArgs

func VirtualServiceSpecPtr(v *VirtualServiceSpecArgs) VirtualServiceSpecPtrInput {
	return (*virtualServiceSpecPtrType)(v)
}

func (*virtualServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpec)(nil)).Elem()
}

func (i *virtualServiceSpecPtrType) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return i.ToVirtualServiceSpecPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecPtrType) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecPtrOutput)
}

// Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
type VirtualServiceSpecOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpec)(nil)).Elem()
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecOutput() VirtualServiceSpecOutput {
	return o
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecOutputWithContext(ctx context.Context) VirtualServiceSpecOutput {
	return o
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return o.ToVirtualServiceSpecPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpec) *VirtualServiceSpec {
		return &v
	}).(VirtualServiceSpecPtrOutput)
}

// A list of namespaces to which this virtual service is exported.
func (o VirtualServiceSpecOutput) ExportTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []string { return v.ExportTo }).(pulumi.StringArrayOutput)
}

// The names of gateways and sidecars that should apply these routes.
func (o VirtualServiceSpecOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []string { return v.Gateways }).(pulumi.StringArrayOutput)
}

// The destination hosts to which traffic is being sent.
func (o VirtualServiceSpecOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// An ordered list of route rules for HTTP traffic.
func (o VirtualServiceSpecOutput) Http() VirtualServiceSpecHttpArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []VirtualServiceSpecHttp { return v.Http }).(VirtualServiceSpecHttpArrayOutput)
}

// An ordered list of route rules for opaque TCP traffic.
func (o VirtualServiceSpecOutput) Tcp() VirtualServiceSpecTcpArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []VirtualServiceSpecTcp { return v.Tcp }).(VirtualServiceSpecTcpArrayOutput)
}

func (o VirtualServiceSpecOutput) Tls() VirtualServiceSpecTlsArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []VirtualServiceSpecTls { return v.Tls }).(VirtualServiceSpecTlsArrayOutput)
}

type VirtualServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpec)(nil)).Elem()
}

func (o VirtualServiceSpecPtrOutput) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return o
}

func (o VirtualServiceSpecPtrOutput) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return o
}

func (o VirtualServiceSpecPtrOutput) Elem() VirtualServiceSpecOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) VirtualServiceSpec {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpec
		return ret
	}).(VirtualServiceSpecOutput)
}

// A list of namespaces to which this virtual service is exported.
func (o VirtualServiceSpecPtrOutput) ExportTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExportTo
	}).(pulumi.StringArrayOutput)
}

// The names of gateways and sidecars that should apply these routes.
func (o VirtualServiceSpecPtrOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.Gateways
	}).(pulumi.StringArrayOutput)
}

// The destination hosts to which traffic is being sent.
func (o VirtualServiceSpecPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// An ordered list of route rules for HTTP traffic.
func (o VirtualServiceSpecPtrOutput) Http() VirtualServiceSpecHttpArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []VirtualServiceSpecHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(VirtualServiceSpecHttpArrayOutput)
}

// An ordered list of route rules for opaque TCP traffic.
func (o VirtualServiceSpecPtrOutput) Tcp() VirtualServiceSpecTcpArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []VirtualServiceSpecTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(VirtualServiceSpecTcpArrayOutput)
}

func (o VirtualServiceSpecPtrOutput) Tls() VirtualServiceSpecTlsArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []VirtualServiceSpecTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(VirtualServiceSpecTlsArrayOutput)
}

type VirtualServiceSpecHttp struct {
	// Cross-Origin Resource Sharing policy (CORS).
	CorsPolicy *VirtualServiceSpecHttpCorspolicy `pulumi:"corsPolicy"`
	Delegate   *VirtualServiceSpecHttpDelegate   `pulumi:"delegate"`
	// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
	DirectResponse *VirtualServiceSpecHttpDirectresponse `pulumi:"directResponse"`
	// Fault injection policy to apply on HTTP traffic at the client side.
	Fault   *VirtualServiceSpecHttpFault   `pulumi:"fault"`
	Headers *VirtualServiceSpecHttpHeaders `pulumi:"headers"`
	Match   []VirtualServiceSpecHttpMatch  `pulumi:"match"`
	Mirror  *VirtualServiceSpecHttpMirror  `pulumi:"mirror"`
	// Percentage of the traffic to be mirrored by the `mirror` field.
	MirrorPercent *int `pulumi:"mirrorPercent"`
	// Percentage of the traffic to be mirrored by the `mirror` field.
	MirrorPercentage *VirtualServiceSpecHttpMirrorpercentage `pulumi:"mirrorPercentage"`
	// Percentage of the traffic to be mirrored by the `mirror` field.
	Mirror_percent *int `pulumi:"mirror_percent"`
	// The name assigned to the route for debugging purposes.
	Name *string `pulumi:"name"`
	// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
	Redirect interface{} `pulumi:"redirect"`
	// Retry policy for HTTP requests.
	Retries *VirtualServiceSpecHttpRetries `pulumi:"retries"`
	// Rewrite HTTP URIs and Authority headers.
	Rewrite *VirtualServiceSpecHttpRewrite `pulumi:"rewrite"`
	// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
	Route []VirtualServiceSpecHttpRoute `pulumi:"route"`
	// Timeout for HTTP requests, default is disabled.
	Timeout *string `pulumi:"timeout"`
}

// VirtualServiceSpecHttpInput is an input type that accepts VirtualServiceSpecHttpArgs and VirtualServiceSpecHttpOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpInput` via:
//
//	VirtualServiceSpecHttpArgs{...}
type VirtualServiceSpecHttpInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpOutput() VirtualServiceSpecHttpOutput
	ToVirtualServiceSpecHttpOutputWithContext(context.Context) VirtualServiceSpecHttpOutput
}

type VirtualServiceSpecHttpArgs struct {
	// Cross-Origin Resource Sharing policy (CORS).
	CorsPolicy VirtualServiceSpecHttpCorspolicyPtrInput `pulumi:"corsPolicy"`
	Delegate   VirtualServiceSpecHttpDelegatePtrInput   `pulumi:"delegate"`
	// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
	DirectResponse VirtualServiceSpecHttpDirectresponsePtrInput `pulumi:"directResponse"`
	// Fault injection policy to apply on HTTP traffic at the client side.
	Fault   VirtualServiceSpecHttpFaultPtrInput   `pulumi:"fault"`
	Headers VirtualServiceSpecHttpHeadersPtrInput `pulumi:"headers"`
	Match   VirtualServiceSpecHttpMatchArrayInput `pulumi:"match"`
	Mirror  VirtualServiceSpecHttpMirrorPtrInput  `pulumi:"mirror"`
	// Percentage of the traffic to be mirrored by the `mirror` field.
	MirrorPercent pulumi.IntPtrInput `pulumi:"mirrorPercent"`
	// Percentage of the traffic to be mirrored by the `mirror` field.
	MirrorPercentage VirtualServiceSpecHttpMirrorpercentagePtrInput `pulumi:"mirrorPercentage"`
	// Percentage of the traffic to be mirrored by the `mirror` field.
	Mirror_percent pulumi.IntPtrInput `pulumi:"mirror_percent"`
	// The name assigned to the route for debugging purposes.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
	Redirect pulumi.Input `pulumi:"redirect"`
	// Retry policy for HTTP requests.
	Retries VirtualServiceSpecHttpRetriesPtrInput `pulumi:"retries"`
	// Rewrite HTTP URIs and Authority headers.
	Rewrite VirtualServiceSpecHttpRewritePtrInput `pulumi:"rewrite"`
	// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
	Route VirtualServiceSpecHttpRouteArrayInput `pulumi:"route"`
	// Timeout for HTTP requests, default is disabled.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (VirtualServiceSpecHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttp)(nil)).Elem()
}

func (i VirtualServiceSpecHttpArgs) ToVirtualServiceSpecHttpOutput() VirtualServiceSpecHttpOutput {
	return i.ToVirtualServiceSpecHttpOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpArgs) ToVirtualServiceSpecHttpOutputWithContext(ctx context.Context) VirtualServiceSpecHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpOutput)
}

// VirtualServiceSpecHttpArrayInput is an input type that accepts VirtualServiceSpecHttpArray and VirtualServiceSpecHttpArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpArrayInput` via:
//
//	VirtualServiceSpecHttpArray{ VirtualServiceSpecHttpArgs{...} }
type VirtualServiceSpecHttpArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpArrayOutput() VirtualServiceSpecHttpArrayOutput
	ToVirtualServiceSpecHttpArrayOutputWithContext(context.Context) VirtualServiceSpecHttpArrayOutput
}

type VirtualServiceSpecHttpArray []VirtualServiceSpecHttpInput

func (VirtualServiceSpecHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttp)(nil)).Elem()
}

func (i VirtualServiceSpecHttpArray) ToVirtualServiceSpecHttpArrayOutput() VirtualServiceSpecHttpArrayOutput {
	return i.ToVirtualServiceSpecHttpArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpArray) ToVirtualServiceSpecHttpArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpArrayOutput)
}

type VirtualServiceSpecHttpOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttp)(nil)).Elem()
}

func (o VirtualServiceSpecHttpOutput) ToVirtualServiceSpecHttpOutput() VirtualServiceSpecHttpOutput {
	return o
}

func (o VirtualServiceSpecHttpOutput) ToVirtualServiceSpecHttpOutputWithContext(ctx context.Context) VirtualServiceSpecHttpOutput {
	return o
}

// Cross-Origin Resource Sharing policy (CORS).
func (o VirtualServiceSpecHttpOutput) CorsPolicy() VirtualServiceSpecHttpCorspolicyPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpCorspolicy { return v.CorsPolicy }).(VirtualServiceSpecHttpCorspolicyPtrOutput)
}

func (o VirtualServiceSpecHttpOutput) Delegate() VirtualServiceSpecHttpDelegatePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpDelegate { return v.Delegate }).(VirtualServiceSpecHttpDelegatePtrOutput)
}

// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
func (o VirtualServiceSpecHttpOutput) DirectResponse() VirtualServiceSpecHttpDirectresponsePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpDirectresponse { return v.DirectResponse }).(VirtualServiceSpecHttpDirectresponsePtrOutput)
}

// Fault injection policy to apply on HTTP traffic at the client side.
func (o VirtualServiceSpecHttpOutput) Fault() VirtualServiceSpecHttpFaultPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpFault { return v.Fault }).(VirtualServiceSpecHttpFaultPtrOutput)
}

func (o VirtualServiceSpecHttpOutput) Headers() VirtualServiceSpecHttpHeadersPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpHeaders { return v.Headers }).(VirtualServiceSpecHttpHeadersPtrOutput)
}

func (o VirtualServiceSpecHttpOutput) Match() VirtualServiceSpecHttpMatchArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) []VirtualServiceSpecHttpMatch { return v.Match }).(VirtualServiceSpecHttpMatchArrayOutput)
}

func (o VirtualServiceSpecHttpOutput) Mirror() VirtualServiceSpecHttpMirrorPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpMirror { return v.Mirror }).(VirtualServiceSpecHttpMirrorPtrOutput)
}

// Percentage of the traffic to be mirrored by the `mirror` field.
func (o VirtualServiceSpecHttpOutput) MirrorPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *int { return v.MirrorPercent }).(pulumi.IntPtrOutput)
}

// Percentage of the traffic to be mirrored by the `mirror` field.
func (o VirtualServiceSpecHttpOutput) MirrorPercentage() VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpMirrorpercentage { return v.MirrorPercentage }).(VirtualServiceSpecHttpMirrorpercentagePtrOutput)
}

// Percentage of the traffic to be mirrored by the `mirror` field.
func (o VirtualServiceSpecHttpOutput) Mirror_percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *int { return v.Mirror_percent }).(pulumi.IntPtrOutput)
}

// The name assigned to the route for debugging purposes.
func (o VirtualServiceSpecHttpOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
func (o VirtualServiceSpecHttpOutput) Redirect() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) interface{} { return v.Redirect }).(pulumi.AnyOutput)
}

// Retry policy for HTTP requests.
func (o VirtualServiceSpecHttpOutput) Retries() VirtualServiceSpecHttpRetriesPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpRetries { return v.Retries }).(VirtualServiceSpecHttpRetriesPtrOutput)
}

// Rewrite HTTP URIs and Authority headers.
func (o VirtualServiceSpecHttpOutput) Rewrite() VirtualServiceSpecHttpRewritePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpRewrite { return v.Rewrite }).(VirtualServiceSpecHttpRewritePtrOutput)
}

// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
func (o VirtualServiceSpecHttpOutput) Route() VirtualServiceSpecHttpRouteArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) []VirtualServiceSpecHttpRoute { return v.Route }).(VirtualServiceSpecHttpRouteArrayOutput)
}

// Timeout for HTTP requests, default is disabled.
func (o VirtualServiceSpecHttpOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttp)(nil)).Elem()
}

func (o VirtualServiceSpecHttpArrayOutput) ToVirtualServiceSpecHttpArrayOutput() VirtualServiceSpecHttpArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpArrayOutput) ToVirtualServiceSpecHttpArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecHttp {
		return vs[0].([]VirtualServiceSpecHttp)[vs[1].(int)]
	}).(VirtualServiceSpecHttpOutput)
}

// Cross-Origin Resource Sharing policy (CORS).
type VirtualServiceSpecHttpCorspolicy struct {
	AllowCredentials *bool    `pulumi:"allowCredentials"`
	AllowHeaders     []string `pulumi:"allowHeaders"`
	// List of HTTP methods allowed to access the resource.
	AllowMethods []string `pulumi:"allowMethods"`
	// The list of origins that are allowed to perform CORS requests.
	AllowOrigin []string `pulumi:"allowOrigin"`
	// String patterns that match allowed origins.
	AllowOrigins  []interface{} `pulumi:"allowOrigins"`
	ExposeHeaders []string      `pulumi:"exposeHeaders"`
	MaxAge        *string       `pulumi:"maxAge"`
}

// VirtualServiceSpecHttpCorspolicyInput is an input type that accepts VirtualServiceSpecHttpCorspolicyArgs and VirtualServiceSpecHttpCorspolicyOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpCorspolicyInput` via:
//
//	VirtualServiceSpecHttpCorspolicyArgs{...}
type VirtualServiceSpecHttpCorspolicyInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpCorspolicyOutput() VirtualServiceSpecHttpCorspolicyOutput
	ToVirtualServiceSpecHttpCorspolicyOutputWithContext(context.Context) VirtualServiceSpecHttpCorspolicyOutput
}

// Cross-Origin Resource Sharing policy (CORS).
type VirtualServiceSpecHttpCorspolicyArgs struct {
	AllowCredentials pulumi.BoolPtrInput     `pulumi:"allowCredentials"`
	AllowHeaders     pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// List of HTTP methods allowed to access the resource.
	AllowMethods pulumi.StringArrayInput `pulumi:"allowMethods"`
	// The list of origins that are allowed to perform CORS requests.
	AllowOrigin pulumi.StringArrayInput `pulumi:"allowOrigin"`
	// String patterns that match allowed origins.
	AllowOrigins  pulumi.ArrayInput       `pulumi:"allowOrigins"`
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	MaxAge        pulumi.StringPtrInput   `pulumi:"maxAge"`
}

func (VirtualServiceSpecHttpCorspolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpCorspolicy)(nil)).Elem()
}

func (i VirtualServiceSpecHttpCorspolicyArgs) ToVirtualServiceSpecHttpCorspolicyOutput() VirtualServiceSpecHttpCorspolicyOutput {
	return i.ToVirtualServiceSpecHttpCorspolicyOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpCorspolicyArgs) ToVirtualServiceSpecHttpCorspolicyOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorspolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpCorspolicyOutput)
}

func (i VirtualServiceSpecHttpCorspolicyArgs) ToVirtualServiceSpecHttpCorspolicyPtrOutput() VirtualServiceSpecHttpCorspolicyPtrOutput {
	return i.ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpCorspolicyArgs) ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorspolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpCorspolicyOutput).ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpCorspolicyPtrInput is an input type that accepts VirtualServiceSpecHttpCorspolicyArgs, VirtualServiceSpecHttpCorspolicyPtr and VirtualServiceSpecHttpCorspolicyPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpCorspolicyPtrInput` via:
//
//	        VirtualServiceSpecHttpCorspolicyArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpCorspolicyPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpCorspolicyPtrOutput() VirtualServiceSpecHttpCorspolicyPtrOutput
	ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(context.Context) VirtualServiceSpecHttpCorspolicyPtrOutput
}

type virtualServiceSpecHttpCorspolicyPtrType VirtualServiceSpecHttpCorspolicyArgs

func VirtualServiceSpecHttpCorspolicyPtr(v *VirtualServiceSpecHttpCorspolicyArgs) VirtualServiceSpecHttpCorspolicyPtrInput {
	return (*virtualServiceSpecHttpCorspolicyPtrType)(v)
}

func (*virtualServiceSpecHttpCorspolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpCorspolicy)(nil)).Elem()
}

func (i *virtualServiceSpecHttpCorspolicyPtrType) ToVirtualServiceSpecHttpCorspolicyPtrOutput() VirtualServiceSpecHttpCorspolicyPtrOutput {
	return i.ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpCorspolicyPtrType) ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorspolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpCorspolicyPtrOutput)
}

// Cross-Origin Resource Sharing policy (CORS).
type VirtualServiceSpecHttpCorspolicyOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpCorspolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpCorspolicy)(nil)).Elem()
}

func (o VirtualServiceSpecHttpCorspolicyOutput) ToVirtualServiceSpecHttpCorspolicyOutput() VirtualServiceSpecHttpCorspolicyOutput {
	return o
}

func (o VirtualServiceSpecHttpCorspolicyOutput) ToVirtualServiceSpecHttpCorspolicyOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorspolicyOutput {
	return o
}

func (o VirtualServiceSpecHttpCorspolicyOutput) ToVirtualServiceSpecHttpCorspolicyPtrOutput() VirtualServiceSpecHttpCorspolicyPtrOutput {
	return o.ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpCorspolicyOutput) ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorspolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpCorspolicy) *VirtualServiceSpecHttpCorspolicy {
		return &v
	}).(VirtualServiceSpecHttpCorspolicyPtrOutput)
}

func (o VirtualServiceSpecHttpCorspolicyOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorspolicy) *bool { return v.AllowCredentials }).(pulumi.BoolPtrOutput)
}

func (o VirtualServiceSpecHttpCorspolicyOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorspolicy) []string { return v.AllowHeaders }).(pulumi.StringArrayOutput)
}

// List of HTTP methods allowed to access the resource.
func (o VirtualServiceSpecHttpCorspolicyOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorspolicy) []string { return v.AllowMethods }).(pulumi.StringArrayOutput)
}

// The list of origins that are allowed to perform CORS requests.
func (o VirtualServiceSpecHttpCorspolicyOutput) AllowOrigin() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorspolicy) []string { return v.AllowOrigin }).(pulumi.StringArrayOutput)
}

// String patterns that match allowed origins.
func (o VirtualServiceSpecHttpCorspolicyOutput) AllowOrigins() pulumi.ArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorspolicy) []interface{} { return v.AllowOrigins }).(pulumi.ArrayOutput)
}

func (o VirtualServiceSpecHttpCorspolicyOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorspolicy) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpCorspolicyOutput) MaxAge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorspolicy) *string { return v.MaxAge }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpCorspolicyPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpCorspolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpCorspolicy)(nil)).Elem()
}

func (o VirtualServiceSpecHttpCorspolicyPtrOutput) ToVirtualServiceSpecHttpCorspolicyPtrOutput() VirtualServiceSpecHttpCorspolicyPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpCorspolicyPtrOutput) ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorspolicyPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpCorspolicyPtrOutput) Elem() VirtualServiceSpecHttpCorspolicyOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) VirtualServiceSpecHttpCorspolicy {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpCorspolicy
		return ret
	}).(VirtualServiceSpecHttpCorspolicyOutput)
}

func (o VirtualServiceSpecHttpCorspolicyPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

func (o VirtualServiceSpecHttpCorspolicyPtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// List of HTTP methods allowed to access the resource.
func (o VirtualServiceSpecHttpCorspolicyPtrOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// The list of origins that are allowed to perform CORS requests.
func (o VirtualServiceSpecHttpCorspolicyPtrOutput) AllowOrigin() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigin
	}).(pulumi.StringArrayOutput)
}

// String patterns that match allowed origins.
func (o VirtualServiceSpecHttpCorspolicyPtrOutput) AllowOrigins() pulumi.ArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) []interface{} {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.ArrayOutput)
}

func (o VirtualServiceSpecHttpCorspolicyPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpCorspolicyPtrOutput) MaxAge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) *string {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpDelegate struct {
	// Name specifies the name of the delegate VirtualService.
	Name *string `pulumi:"name"`
	// Namespace specifies the namespace where the delegate VirtualService resides.
	Namespace *string `pulumi:"namespace"`
}

// VirtualServiceSpecHttpDelegateInput is an input type that accepts VirtualServiceSpecHttpDelegateArgs and VirtualServiceSpecHttpDelegateOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpDelegateInput` via:
//
//	VirtualServiceSpecHttpDelegateArgs{...}
type VirtualServiceSpecHttpDelegateInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpDelegateOutput() VirtualServiceSpecHttpDelegateOutput
	ToVirtualServiceSpecHttpDelegateOutputWithContext(context.Context) VirtualServiceSpecHttpDelegateOutput
}

type VirtualServiceSpecHttpDelegateArgs struct {
	// Name specifies the name of the delegate VirtualService.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace specifies the namespace where the delegate VirtualService resides.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VirtualServiceSpecHttpDelegateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpDelegate)(nil)).Elem()
}

func (i VirtualServiceSpecHttpDelegateArgs) ToVirtualServiceSpecHttpDelegateOutput() VirtualServiceSpecHttpDelegateOutput {
	return i.ToVirtualServiceSpecHttpDelegateOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpDelegateArgs) ToVirtualServiceSpecHttpDelegateOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDelegateOutput)
}

func (i VirtualServiceSpecHttpDelegateArgs) ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput {
	return i.ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpDelegateArgs) ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDelegateOutput).ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpDelegatePtrInput is an input type that accepts VirtualServiceSpecHttpDelegateArgs, VirtualServiceSpecHttpDelegatePtr and VirtualServiceSpecHttpDelegatePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpDelegatePtrInput` via:
//
//	        VirtualServiceSpecHttpDelegateArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpDelegatePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput
	ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(context.Context) VirtualServiceSpecHttpDelegatePtrOutput
}

type virtualServiceSpecHttpDelegatePtrType VirtualServiceSpecHttpDelegateArgs

func VirtualServiceSpecHttpDelegatePtr(v *VirtualServiceSpecHttpDelegateArgs) VirtualServiceSpecHttpDelegatePtrInput {
	return (*virtualServiceSpecHttpDelegatePtrType)(v)
}

func (*virtualServiceSpecHttpDelegatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpDelegate)(nil)).Elem()
}

func (i *virtualServiceSpecHttpDelegatePtrType) ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput {
	return i.ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpDelegatePtrType) ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDelegatePtrOutput)
}

type VirtualServiceSpecHttpDelegateOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpDelegateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpDelegate)(nil)).Elem()
}

func (o VirtualServiceSpecHttpDelegateOutput) ToVirtualServiceSpecHttpDelegateOutput() VirtualServiceSpecHttpDelegateOutput {
	return o
}

func (o VirtualServiceSpecHttpDelegateOutput) ToVirtualServiceSpecHttpDelegateOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegateOutput {
	return o
}

func (o VirtualServiceSpecHttpDelegateOutput) ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput {
	return o.ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpDelegateOutput) ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpDelegate) *VirtualServiceSpecHttpDelegate {
		return &v
	}).(VirtualServiceSpecHttpDelegatePtrOutput)
}

// Name specifies the name of the delegate VirtualService.
func (o VirtualServiceSpecHttpDelegateOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpDelegate) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace specifies the namespace where the delegate VirtualService resides.
func (o VirtualServiceSpecHttpDelegateOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpDelegate) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpDelegatePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpDelegatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpDelegate)(nil)).Elem()
}

func (o VirtualServiceSpecHttpDelegatePtrOutput) ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpDelegatePtrOutput) ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegatePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpDelegatePtrOutput) Elem() VirtualServiceSpecHttpDelegateOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDelegate) VirtualServiceSpecHttpDelegate {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpDelegate
		return ret
	}).(VirtualServiceSpecHttpDelegateOutput)
}

// Name specifies the name of the delegate VirtualService.
func (o VirtualServiceSpecHttpDelegatePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDelegate) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace specifies the namespace where the delegate VirtualService resides.
func (o VirtualServiceSpecHttpDelegatePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDelegate) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
type VirtualServiceSpecHttpDirectresponse struct {
	// Specifies the content of the response body.
	Body interface{} `pulumi:"body"`
	// Specifies the HTTP response status to be returned.
	Status *int `pulumi:"status"`
}

// VirtualServiceSpecHttpDirectresponseInput is an input type that accepts VirtualServiceSpecHttpDirectresponseArgs and VirtualServiceSpecHttpDirectresponseOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpDirectresponseInput` via:
//
//	VirtualServiceSpecHttpDirectresponseArgs{...}
type VirtualServiceSpecHttpDirectresponseInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpDirectresponseOutput() VirtualServiceSpecHttpDirectresponseOutput
	ToVirtualServiceSpecHttpDirectresponseOutputWithContext(context.Context) VirtualServiceSpecHttpDirectresponseOutput
}

// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
type VirtualServiceSpecHttpDirectresponseArgs struct {
	// Specifies the content of the response body.
	Body pulumi.Input `pulumi:"body"`
	// Specifies the HTTP response status to be returned.
	Status pulumi.IntPtrInput `pulumi:"status"`
}

func (VirtualServiceSpecHttpDirectresponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpDirectresponse)(nil)).Elem()
}

func (i VirtualServiceSpecHttpDirectresponseArgs) ToVirtualServiceSpecHttpDirectresponseOutput() VirtualServiceSpecHttpDirectresponseOutput {
	return i.ToVirtualServiceSpecHttpDirectresponseOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpDirectresponseArgs) ToVirtualServiceSpecHttpDirectresponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDirectresponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDirectresponseOutput)
}

func (i VirtualServiceSpecHttpDirectresponseArgs) ToVirtualServiceSpecHttpDirectresponsePtrOutput() VirtualServiceSpecHttpDirectresponsePtrOutput {
	return i.ToVirtualServiceSpecHttpDirectresponsePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpDirectresponseArgs) ToVirtualServiceSpecHttpDirectresponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDirectresponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDirectresponseOutput).ToVirtualServiceSpecHttpDirectresponsePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpDirectresponsePtrInput is an input type that accepts VirtualServiceSpecHttpDirectresponseArgs, VirtualServiceSpecHttpDirectresponsePtr and VirtualServiceSpecHttpDirectresponsePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpDirectresponsePtrInput` via:
//
//	        VirtualServiceSpecHttpDirectresponseArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpDirectresponsePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpDirectresponsePtrOutput() VirtualServiceSpecHttpDirectresponsePtrOutput
	ToVirtualServiceSpecHttpDirectresponsePtrOutputWithContext(context.Context) VirtualServiceSpecHttpDirectresponsePtrOutput
}

type virtualServiceSpecHttpDirectresponsePtrType VirtualServiceSpecHttpDirectresponseArgs

func VirtualServiceSpecHttpDirectresponsePtr(v *VirtualServiceSpecHttpDirectresponseArgs) VirtualServiceSpecHttpDirectresponsePtrInput {
	return (*virtualServiceSpecHttpDirectresponsePtrType)(v)
}

func (*virtualServiceSpecHttpDirectresponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpDirectresponse)(nil)).Elem()
}

func (i *virtualServiceSpecHttpDirectresponsePtrType) ToVirtualServiceSpecHttpDirectresponsePtrOutput() VirtualServiceSpecHttpDirectresponsePtrOutput {
	return i.ToVirtualServiceSpecHttpDirectresponsePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpDirectresponsePtrType) ToVirtualServiceSpecHttpDirectresponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDirectresponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDirectresponsePtrOutput)
}

// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
type VirtualServiceSpecHttpDirectresponseOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpDirectresponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpDirectresponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpDirectresponseOutput) ToVirtualServiceSpecHttpDirectresponseOutput() VirtualServiceSpecHttpDirectresponseOutput {
	return o
}

func (o VirtualServiceSpecHttpDirectresponseOutput) ToVirtualServiceSpecHttpDirectresponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDirectresponseOutput {
	return o
}

func (o VirtualServiceSpecHttpDirectresponseOutput) ToVirtualServiceSpecHttpDirectresponsePtrOutput() VirtualServiceSpecHttpDirectresponsePtrOutput {
	return o.ToVirtualServiceSpecHttpDirectresponsePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpDirectresponseOutput) ToVirtualServiceSpecHttpDirectresponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDirectresponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpDirectresponse) *VirtualServiceSpecHttpDirectresponse {
		return &v
	}).(VirtualServiceSpecHttpDirectresponsePtrOutput)
}

// Specifies the content of the response body.
func (o VirtualServiceSpecHttpDirectresponseOutput) Body() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpDirectresponse) interface{} { return v.Body }).(pulumi.AnyOutput)
}

// Specifies the HTTP response status to be returned.
func (o VirtualServiceSpecHttpDirectresponseOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpDirectresponse) *int { return v.Status }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpDirectresponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpDirectresponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpDirectresponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpDirectresponsePtrOutput) ToVirtualServiceSpecHttpDirectresponsePtrOutput() VirtualServiceSpecHttpDirectresponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpDirectresponsePtrOutput) ToVirtualServiceSpecHttpDirectresponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDirectresponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpDirectresponsePtrOutput) Elem() VirtualServiceSpecHttpDirectresponseOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDirectresponse) VirtualServiceSpecHttpDirectresponse {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpDirectresponse
		return ret
	}).(VirtualServiceSpecHttpDirectresponseOutput)
}

// Specifies the content of the response body.
func (o VirtualServiceSpecHttpDirectresponsePtrOutput) Body() pulumi.AnyOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDirectresponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.AnyOutput)
}

// Specifies the HTTP response status to be returned.
func (o VirtualServiceSpecHttpDirectresponsePtrOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDirectresponse) *int {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.IntPtrOutput)
}

// Fault injection policy to apply on HTTP traffic at the client side.
type VirtualServiceSpecHttpFault struct {
	Abort interface{} `pulumi:"abort"`
	Delay interface{} `pulumi:"delay"`
}

// VirtualServiceSpecHttpFaultInput is an input type that accepts VirtualServiceSpecHttpFaultArgs and VirtualServiceSpecHttpFaultOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpFaultInput` via:
//
//	VirtualServiceSpecHttpFaultArgs{...}
type VirtualServiceSpecHttpFaultInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpFaultOutput() VirtualServiceSpecHttpFaultOutput
	ToVirtualServiceSpecHttpFaultOutputWithContext(context.Context) VirtualServiceSpecHttpFaultOutput
}

// Fault injection policy to apply on HTTP traffic at the client side.
type VirtualServiceSpecHttpFaultArgs struct {
	Abort pulumi.Input `pulumi:"abort"`
	Delay pulumi.Input `pulumi:"delay"`
}

func (VirtualServiceSpecHttpFaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpFault)(nil)).Elem()
}

func (i VirtualServiceSpecHttpFaultArgs) ToVirtualServiceSpecHttpFaultOutput() VirtualServiceSpecHttpFaultOutput {
	return i.ToVirtualServiceSpecHttpFaultOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpFaultArgs) ToVirtualServiceSpecHttpFaultOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpFaultOutput)
}

func (i VirtualServiceSpecHttpFaultArgs) ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput {
	return i.ToVirtualServiceSpecHttpFaultPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpFaultArgs) ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpFaultOutput).ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpFaultPtrInput is an input type that accepts VirtualServiceSpecHttpFaultArgs, VirtualServiceSpecHttpFaultPtr and VirtualServiceSpecHttpFaultPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpFaultPtrInput` via:
//
//	        VirtualServiceSpecHttpFaultArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpFaultPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput
	ToVirtualServiceSpecHttpFaultPtrOutputWithContext(context.Context) VirtualServiceSpecHttpFaultPtrOutput
}

type virtualServiceSpecHttpFaultPtrType VirtualServiceSpecHttpFaultArgs

func VirtualServiceSpecHttpFaultPtr(v *VirtualServiceSpecHttpFaultArgs) VirtualServiceSpecHttpFaultPtrInput {
	return (*virtualServiceSpecHttpFaultPtrType)(v)
}

func (*virtualServiceSpecHttpFaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpFault)(nil)).Elem()
}

func (i *virtualServiceSpecHttpFaultPtrType) ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput {
	return i.ToVirtualServiceSpecHttpFaultPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpFaultPtrType) ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpFaultPtrOutput)
}

// Fault injection policy to apply on HTTP traffic at the client side.
type VirtualServiceSpecHttpFaultOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpFaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpFault)(nil)).Elem()
}

func (o VirtualServiceSpecHttpFaultOutput) ToVirtualServiceSpecHttpFaultOutput() VirtualServiceSpecHttpFaultOutput {
	return o
}

func (o VirtualServiceSpecHttpFaultOutput) ToVirtualServiceSpecHttpFaultOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultOutput {
	return o
}

func (o VirtualServiceSpecHttpFaultOutput) ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput {
	return o.ToVirtualServiceSpecHttpFaultPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpFaultOutput) ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpFault) *VirtualServiceSpecHttpFault {
		return &v
	}).(VirtualServiceSpecHttpFaultPtrOutput)
}

func (o VirtualServiceSpecHttpFaultOutput) Abort() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpFault) interface{} { return v.Abort }).(pulumi.AnyOutput)
}

func (o VirtualServiceSpecHttpFaultOutput) Delay() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpFault) interface{} { return v.Delay }).(pulumi.AnyOutput)
}

type VirtualServiceSpecHttpFaultPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpFaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpFault)(nil)).Elem()
}

func (o VirtualServiceSpecHttpFaultPtrOutput) ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpFaultPtrOutput) ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpFaultPtrOutput) Elem() VirtualServiceSpecHttpFaultOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpFault) VirtualServiceSpecHttpFault {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpFault
		return ret
	}).(VirtualServiceSpecHttpFaultOutput)
}

func (o VirtualServiceSpecHttpFaultPtrOutput) Abort() pulumi.AnyOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpFault) interface{} {
		if v == nil {
			return nil
		}
		return v.Abort
	}).(pulumi.AnyOutput)
}

func (o VirtualServiceSpecHttpFaultPtrOutput) Delay() pulumi.AnyOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpFault) interface{} {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.AnyOutput)
}

type VirtualServiceSpecHttpHeaders struct {
	Request  *VirtualServiceSpecHttpHeadersRequest  `pulumi:"request"`
	Response *VirtualServiceSpecHttpHeadersResponse `pulumi:"response"`
}

// VirtualServiceSpecHttpHeadersInput is an input type that accepts VirtualServiceSpecHttpHeadersArgs and VirtualServiceSpecHttpHeadersOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersInput` via:
//
//	VirtualServiceSpecHttpHeadersArgs{...}
type VirtualServiceSpecHttpHeadersInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersOutput() VirtualServiceSpecHttpHeadersOutput
	ToVirtualServiceSpecHttpHeadersOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersOutput
}

type VirtualServiceSpecHttpHeadersArgs struct {
	Request  VirtualServiceSpecHttpHeadersRequestPtrInput  `pulumi:"request"`
	Response VirtualServiceSpecHttpHeadersResponsePtrInput `pulumi:"response"`
}

func (VirtualServiceSpecHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeaders)(nil)).Elem()
}

func (i VirtualServiceSpecHttpHeadersArgs) ToVirtualServiceSpecHttpHeadersOutput() VirtualServiceSpecHttpHeadersOutput {
	return i.ToVirtualServiceSpecHttpHeadersOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersArgs) ToVirtualServiceSpecHttpHeadersOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersOutput)
}

func (i VirtualServiceSpecHttpHeadersArgs) ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersArgs) ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersOutput).ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpHeadersPtrInput is an input type that accepts VirtualServiceSpecHttpHeadersArgs, VirtualServiceSpecHttpHeadersPtr and VirtualServiceSpecHttpHeadersPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersPtrInput` via:
//
//	        VirtualServiceSpecHttpHeadersArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpHeadersPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput
	ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersPtrOutput
}

type virtualServiceSpecHttpHeadersPtrType VirtualServiceSpecHttpHeadersArgs

func VirtualServiceSpecHttpHeadersPtr(v *VirtualServiceSpecHttpHeadersArgs) VirtualServiceSpecHttpHeadersPtrInput {
	return (*virtualServiceSpecHttpHeadersPtrType)(v)
}

func (*virtualServiceSpecHttpHeadersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeaders)(nil)).Elem()
}

func (i *virtualServiceSpecHttpHeadersPtrType) ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpHeadersPtrType) ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersPtrOutput)
}

type VirtualServiceSpecHttpHeadersOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeaders)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersOutput) ToVirtualServiceSpecHttpHeadersOutput() VirtualServiceSpecHttpHeadersOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersOutput) ToVirtualServiceSpecHttpHeadersOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersOutput) ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput {
	return o.ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpHeadersOutput) ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeaders {
		return &v
	}).(VirtualServiceSpecHttpHeadersPtrOutput)
}

func (o VirtualServiceSpecHttpHeadersOutput) Request() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeadersRequest { return v.Request }).(VirtualServiceSpecHttpHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpHeadersOutput) Response() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeadersResponse { return v.Response }).(VirtualServiceSpecHttpHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpHeadersPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeaders)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) Elem() VirtualServiceSpecHttpHeadersOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeaders) VirtualServiceSpecHttpHeaders {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpHeaders
		return ret
	}).(VirtualServiceSpecHttpHeadersOutput)
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) Request() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeadersRequest {
		if v == nil {
			return nil
		}
		return v.Request
	}).(VirtualServiceSpecHttpHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) Response() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeadersResponse {
		if v == nil {
			return nil
		}
		return v.Response
	}).(VirtualServiceSpecHttpHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpHeadersRequest struct {
	Add    map[string]string `pulumi:"add"`
	Remove []string          `pulumi:"remove"`
	Set    map[string]string `pulumi:"set"`
}

// VirtualServiceSpecHttpHeadersRequestInput is an input type that accepts VirtualServiceSpecHttpHeadersRequestArgs and VirtualServiceSpecHttpHeadersRequestOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersRequestInput` via:
//
//	VirtualServiceSpecHttpHeadersRequestArgs{...}
type VirtualServiceSpecHttpHeadersRequestInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersRequestOutput() VirtualServiceSpecHttpHeadersRequestOutput
	ToVirtualServiceSpecHttpHeadersRequestOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersRequestOutput
}

type VirtualServiceSpecHttpHeadersRequestArgs struct {
	Add    pulumi.StringMapInput   `pulumi:"add"`
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	Set    pulumi.StringMapInput   `pulumi:"set"`
}

func (VirtualServiceSpecHttpHeadersRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeadersRequest)(nil)).Elem()
}

func (i VirtualServiceSpecHttpHeadersRequestArgs) ToVirtualServiceSpecHttpHeadersRequestOutput() VirtualServiceSpecHttpHeadersRequestOutput {
	return i.ToVirtualServiceSpecHttpHeadersRequestOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersRequestArgs) ToVirtualServiceSpecHttpHeadersRequestOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersRequestOutput)
}

func (i VirtualServiceSpecHttpHeadersRequestArgs) ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersRequestArgs) ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersRequestOutput).ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpHeadersRequestPtrInput is an input type that accepts VirtualServiceSpecHttpHeadersRequestArgs, VirtualServiceSpecHttpHeadersRequestPtr and VirtualServiceSpecHttpHeadersRequestPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersRequestPtrInput` via:
//
//	        VirtualServiceSpecHttpHeadersRequestArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpHeadersRequestPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput
	ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput
}

type virtualServiceSpecHttpHeadersRequestPtrType VirtualServiceSpecHttpHeadersRequestArgs

func VirtualServiceSpecHttpHeadersRequestPtr(v *VirtualServiceSpecHttpHeadersRequestArgs) VirtualServiceSpecHttpHeadersRequestPtrInput {
	return (*virtualServiceSpecHttpHeadersRequestPtrType)(v)
}

func (*virtualServiceSpecHttpHeadersRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeadersRequest)(nil)).Elem()
}

func (i *virtualServiceSpecHttpHeadersRequestPtrType) ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpHeadersRequestPtrType) ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersRequestPtrOutput)
}

type VirtualServiceSpecHttpHeadersRequestOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeadersRequest)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) ToVirtualServiceSpecHttpHeadersRequestOutput() VirtualServiceSpecHttpHeadersRequestOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) ToVirtualServiceSpecHttpHeadersRequestOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o.ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpHeadersRequest) *VirtualServiceSpecHttpHeadersRequest {
		return &v
	}).(VirtualServiceSpecHttpHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersRequest) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersRequest) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersRequest) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpHeadersRequestPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeadersRequest)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) Elem() VirtualServiceSpecHttpHeadersRequestOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersRequest) VirtualServiceSpecHttpHeadersRequest {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpHeadersRequest
		return ret
	}).(VirtualServiceSpecHttpHeadersRequestOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersRequest) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpHeadersRequestAdd struct {
}

type VirtualServiceSpecHttpHeadersRequestSet struct {
}

type VirtualServiceSpecHttpHeadersResponse struct {
	Add    map[string]string `pulumi:"add"`
	Remove []string          `pulumi:"remove"`
	Set    map[string]string `pulumi:"set"`
}

// VirtualServiceSpecHttpHeadersResponseInput is an input type that accepts VirtualServiceSpecHttpHeadersResponseArgs and VirtualServiceSpecHttpHeadersResponseOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersResponseInput` via:
//
//	VirtualServiceSpecHttpHeadersResponseArgs{...}
type VirtualServiceSpecHttpHeadersResponseInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersResponseOutput() VirtualServiceSpecHttpHeadersResponseOutput
	ToVirtualServiceSpecHttpHeadersResponseOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersResponseOutput
}

type VirtualServiceSpecHttpHeadersResponseArgs struct {
	Add    pulumi.StringMapInput   `pulumi:"add"`
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	Set    pulumi.StringMapInput   `pulumi:"set"`
}

func (VirtualServiceSpecHttpHeadersResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeadersResponse)(nil)).Elem()
}

func (i VirtualServiceSpecHttpHeadersResponseArgs) ToVirtualServiceSpecHttpHeadersResponseOutput() VirtualServiceSpecHttpHeadersResponseOutput {
	return i.ToVirtualServiceSpecHttpHeadersResponseOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersResponseArgs) ToVirtualServiceSpecHttpHeadersResponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersResponseOutput)
}

func (i VirtualServiceSpecHttpHeadersResponseArgs) ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersResponseArgs) ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersResponseOutput).ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpHeadersResponsePtrInput is an input type that accepts VirtualServiceSpecHttpHeadersResponseArgs, VirtualServiceSpecHttpHeadersResponsePtr and VirtualServiceSpecHttpHeadersResponsePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersResponsePtrInput` via:
//
//	        VirtualServiceSpecHttpHeadersResponseArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpHeadersResponsePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput
	ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput
}

type virtualServiceSpecHttpHeadersResponsePtrType VirtualServiceSpecHttpHeadersResponseArgs

func VirtualServiceSpecHttpHeadersResponsePtr(v *VirtualServiceSpecHttpHeadersResponseArgs) VirtualServiceSpecHttpHeadersResponsePtrInput {
	return (*virtualServiceSpecHttpHeadersResponsePtrType)(v)
}

func (*virtualServiceSpecHttpHeadersResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeadersResponse)(nil)).Elem()
}

func (i *virtualServiceSpecHttpHeadersResponsePtrType) ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpHeadersResponsePtrType) ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpHeadersResponseOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeadersResponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) ToVirtualServiceSpecHttpHeadersResponseOutput() VirtualServiceSpecHttpHeadersResponseOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) ToVirtualServiceSpecHttpHeadersResponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponseOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o.ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpHeadersResponse) *VirtualServiceSpecHttpHeadersResponse {
		return &v
	}).(VirtualServiceSpecHttpHeadersResponsePtrOutput)
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersResponse) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersResponse) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersResponse) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpHeadersResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeadersResponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) Elem() VirtualServiceSpecHttpHeadersResponseOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersResponse) VirtualServiceSpecHttpHeadersResponse {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpHeadersResponse
		return ret
	}).(VirtualServiceSpecHttpHeadersResponseOutput)
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersResponse) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpHeadersResponseAdd struct {
}

type VirtualServiceSpecHttpHeadersResponseSet struct {
}

type VirtualServiceSpecHttpMatch struct {
	Authority interface{} `pulumi:"authority"`
	// Names of gateways where the rule should be applied.
	Gateways []string               `pulumi:"gateways"`
	Headers  map[string]interface{} `pulumi:"headers"`
	// Flag to specify whether the URI matching should be case-insensitive.
	IgnoreUriCase *bool       `pulumi:"ignoreUriCase"`
	Method        interface{} `pulumi:"method"`
	// The name assigned to a match.
	Name *string `pulumi:"name"`
	// Specifies the ports on the host that is being addressed.
	Port *int `pulumi:"port"`
	// Query parameters for matching.
	QueryParams  map[string]interface{} `pulumi:"queryParams"`
	Scheme       interface{}            `pulumi:"scheme"`
	SourceLabels map[string]string      `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace *string `pulumi:"sourceNamespace"`
	// The human readable prefix to use when emitting statistics for this route.
	StatPrefix *string     `pulumi:"statPrefix"`
	Uri        interface{} `pulumi:"uri"`
	// withoutHeader has the same syntax with the header, but has opposite meaning.
	WithoutHeaders map[string]interface{} `pulumi:"withoutHeaders"`
}

// VirtualServiceSpecHttpMatchInput is an input type that accepts VirtualServiceSpecHttpMatchArgs and VirtualServiceSpecHttpMatchOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMatchInput` via:
//
//	VirtualServiceSpecHttpMatchArgs{...}
type VirtualServiceSpecHttpMatchInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMatchOutput() VirtualServiceSpecHttpMatchOutput
	ToVirtualServiceSpecHttpMatchOutputWithContext(context.Context) VirtualServiceSpecHttpMatchOutput
}

type VirtualServiceSpecHttpMatchArgs struct {
	Authority pulumi.Input `pulumi:"authority"`
	// Names of gateways where the rule should be applied.
	Gateways pulumi.StringArrayInput `pulumi:"gateways"`
	Headers  pulumi.MapInput         `pulumi:"headers"`
	// Flag to specify whether the URI matching should be case-insensitive.
	IgnoreUriCase pulumi.BoolPtrInput `pulumi:"ignoreUriCase"`
	Method        pulumi.Input        `pulumi:"method"`
	// The name assigned to a match.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the ports on the host that is being addressed.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Query parameters for matching.
	QueryParams  pulumi.MapInput       `pulumi:"queryParams"`
	Scheme       pulumi.Input          `pulumi:"scheme"`
	SourceLabels pulumi.StringMapInput `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace pulumi.StringPtrInput `pulumi:"sourceNamespace"`
	// The human readable prefix to use when emitting statistics for this route.
	StatPrefix pulumi.StringPtrInput `pulumi:"statPrefix"`
	Uri        pulumi.Input          `pulumi:"uri"`
	// withoutHeader has the same syntax with the header, but has opposite meaning.
	WithoutHeaders pulumi.MapInput `pulumi:"withoutHeaders"`
}

func (VirtualServiceSpecHttpMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMatch)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMatchArgs) ToVirtualServiceSpecHttpMatchOutput() VirtualServiceSpecHttpMatchOutput {
	return i.ToVirtualServiceSpecHttpMatchOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMatchArgs) ToVirtualServiceSpecHttpMatchOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMatchOutput)
}

// VirtualServiceSpecHttpMatchArrayInput is an input type that accepts VirtualServiceSpecHttpMatchArray and VirtualServiceSpecHttpMatchArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMatchArrayInput` via:
//
//	VirtualServiceSpecHttpMatchArray{ VirtualServiceSpecHttpMatchArgs{...} }
type VirtualServiceSpecHttpMatchArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMatchArrayOutput() VirtualServiceSpecHttpMatchArrayOutput
	ToVirtualServiceSpecHttpMatchArrayOutputWithContext(context.Context) VirtualServiceSpecHttpMatchArrayOutput
}

type VirtualServiceSpecHttpMatchArray []VirtualServiceSpecHttpMatchInput

func (VirtualServiceSpecHttpMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttpMatch)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMatchArray) ToVirtualServiceSpecHttpMatchArrayOutput() VirtualServiceSpecHttpMatchArrayOutput {
	return i.ToVirtualServiceSpecHttpMatchArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMatchArray) ToVirtualServiceSpecHttpMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMatchArrayOutput)
}

type VirtualServiceSpecHttpMatchOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMatch)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMatchOutput) ToVirtualServiceSpecHttpMatchOutput() VirtualServiceSpecHttpMatchOutput {
	return o
}

func (o VirtualServiceSpecHttpMatchOutput) ToVirtualServiceSpecHttpMatchOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMatchOutput {
	return o
}

func (o VirtualServiceSpecHttpMatchOutput) Authority() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) interface{} { return v.Authority }).(pulumi.AnyOutput)
}

// Names of gateways where the rule should be applied.
func (o VirtualServiceSpecHttpMatchOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) []string { return v.Gateways }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpMatchOutput) Headers() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) map[string]interface{} { return v.Headers }).(pulumi.MapOutput)
}

// Flag to specify whether the URI matching should be case-insensitive.
func (o VirtualServiceSpecHttpMatchOutput) IgnoreUriCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) *bool { return v.IgnoreUriCase }).(pulumi.BoolPtrOutput)
}

func (o VirtualServiceSpecHttpMatchOutput) Method() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) interface{} { return v.Method }).(pulumi.AnyOutput)
}

// The name assigned to a match.
func (o VirtualServiceSpecHttpMatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the ports on the host that is being addressed.
func (o VirtualServiceSpecHttpMatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Query parameters for matching.
func (o VirtualServiceSpecHttpMatchOutput) QueryParams() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) map[string]interface{} { return v.QueryParams }).(pulumi.MapOutput)
}

func (o VirtualServiceSpecHttpMatchOutput) Scheme() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) interface{} { return v.Scheme }).(pulumi.AnyOutput)
}

func (o VirtualServiceSpecHttpMatchOutput) SourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) map[string]string { return v.SourceLabels }).(pulumi.StringMapOutput)
}

// Source namespace constraining the applicability of a rule to workloads in that namespace.
func (o VirtualServiceSpecHttpMatchOutput) SourceNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) *string { return v.SourceNamespace }).(pulumi.StringPtrOutput)
}

// The human readable prefix to use when emitting statistics for this route.
func (o VirtualServiceSpecHttpMatchOutput) StatPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) *string { return v.StatPrefix }).(pulumi.StringPtrOutput)
}

func (o VirtualServiceSpecHttpMatchOutput) Uri() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) interface{} { return v.Uri }).(pulumi.AnyOutput)
}

// withoutHeader has the same syntax with the header, but has opposite meaning.
func (o VirtualServiceSpecHttpMatchOutput) WithoutHeaders() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) map[string]interface{} { return v.WithoutHeaders }).(pulumi.MapOutput)
}

type VirtualServiceSpecHttpMatchArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttpMatch)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMatchArrayOutput) ToVirtualServiceSpecHttpMatchArrayOutput() VirtualServiceSpecHttpMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpMatchArrayOutput) ToVirtualServiceSpecHttpMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpMatchArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecHttpMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecHttpMatch {
		return vs[0].([]VirtualServiceSpecHttpMatch)[vs[1].(int)]
	}).(VirtualServiceSpecHttpMatchOutput)
}

type VirtualServiceSpecHttpMatchHeaders struct {
}

// Query parameters for matching.
type VirtualServiceSpecHttpMatchQueryparams struct {
}

type VirtualServiceSpecHttpMatchSourcelabels struct {
}

// withoutHeader has the same syntax with the header, but has opposite meaning.
type VirtualServiceSpecHttpMatchWithoutheaders struct {
}

type VirtualServiceSpecHttpMirror struct {
	// The name of a service from the service registry.
	Host *string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *VirtualServiceSpecHttpMirrorPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// VirtualServiceSpecHttpMirrorInput is an input type that accepts VirtualServiceSpecHttpMirrorArgs and VirtualServiceSpecHttpMirrorOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorInput` via:
//
//	VirtualServiceSpecHttpMirrorArgs{...}
type VirtualServiceSpecHttpMirrorInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorOutput() VirtualServiceSpecHttpMirrorOutput
	ToVirtualServiceSpecHttpMirrorOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorOutput
}

type VirtualServiceSpecHttpMirrorArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port VirtualServiceSpecHttpMirrorPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (VirtualServiceSpecHttpMirrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirror)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMirrorArgs) ToVirtualServiceSpecHttpMirrorOutput() VirtualServiceSpecHttpMirrorOutput {
	return i.ToVirtualServiceSpecHttpMirrorOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorArgs) ToVirtualServiceSpecHttpMirrorOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorOutput)
}

func (i VirtualServiceSpecHttpMirrorArgs) ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorArgs) ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorOutput).ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpMirrorPtrInput is an input type that accepts VirtualServiceSpecHttpMirrorArgs, VirtualServiceSpecHttpMirrorPtr and VirtualServiceSpecHttpMirrorPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorPtrInput` via:
//
//	        VirtualServiceSpecHttpMirrorArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpMirrorPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput
	ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorPtrOutput
}

type virtualServiceSpecHttpMirrorPtrType VirtualServiceSpecHttpMirrorArgs

func VirtualServiceSpecHttpMirrorPtr(v *VirtualServiceSpecHttpMirrorArgs) VirtualServiceSpecHttpMirrorPtrInput {
	return (*virtualServiceSpecHttpMirrorPtrType)(v)
}

func (*virtualServiceSpecHttpMirrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirror)(nil)).Elem()
}

func (i *virtualServiceSpecHttpMirrorPtrType) ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpMirrorPtrType) ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPtrOutput)
}

type VirtualServiceSpecHttpMirrorOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirror)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorOutput) ToVirtualServiceSpecHttpMirrorOutput() VirtualServiceSpecHttpMirrorOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorOutput) ToVirtualServiceSpecHttpMirrorOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorOutput) ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput {
	return o.ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpMirrorOutput) ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpMirror) *VirtualServiceSpecHttpMirror {
		return &v
	}).(VirtualServiceSpecHttpMirrorPtrOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecHttpMirrorOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirror) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecHttpMirrorOutput) Port() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirror) *VirtualServiceSpecHttpMirrorPort { return v.Port }).(VirtualServiceSpecHttpMirrorPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecHttpMirrorOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirror) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpMirrorPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirror)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorPtrOutput) ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPtrOutput) ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPtrOutput) Elem() VirtualServiceSpecHttpMirrorOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirror) VirtualServiceSpecHttpMirror {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpMirror
		return ret
	}).(VirtualServiceSpecHttpMirrorOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecHttpMirrorPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirror) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecHttpMirrorPtrOutput) Port() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirror) *VirtualServiceSpecHttpMirrorPort {
		if v == nil {
			return nil
		}
		return v.Port
	}).(VirtualServiceSpecHttpMirrorPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecHttpMirrorPtrOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirror) *string {
		if v == nil {
			return nil
		}
		return v.Subset
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpMirrorPort struct {
	Number *int `pulumi:"number"`
}

// VirtualServiceSpecHttpMirrorPortInput is an input type that accepts VirtualServiceSpecHttpMirrorPortArgs and VirtualServiceSpecHttpMirrorPortOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorPortInput` via:
//
//	VirtualServiceSpecHttpMirrorPortArgs{...}
type VirtualServiceSpecHttpMirrorPortInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorPortOutput() VirtualServiceSpecHttpMirrorPortOutput
	ToVirtualServiceSpecHttpMirrorPortOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorPortOutput
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpMirrorPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (VirtualServiceSpecHttpMirrorPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorPort)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMirrorPortArgs) ToVirtualServiceSpecHttpMirrorPortOutput() VirtualServiceSpecHttpMirrorPortOutput {
	return i.ToVirtualServiceSpecHttpMirrorPortOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorPortArgs) ToVirtualServiceSpecHttpMirrorPortOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPortOutput)
}

func (i VirtualServiceSpecHttpMirrorPortArgs) ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorPortArgs) ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPortOutput).ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpMirrorPortPtrInput is an input type that accepts VirtualServiceSpecHttpMirrorPortArgs, VirtualServiceSpecHttpMirrorPortPtr and VirtualServiceSpecHttpMirrorPortPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorPortPtrInput` via:
//
//	        VirtualServiceSpecHttpMirrorPortArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpMirrorPortPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput
	ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput
}

type virtualServiceSpecHttpMirrorPortPtrType VirtualServiceSpecHttpMirrorPortArgs

func VirtualServiceSpecHttpMirrorPortPtr(v *VirtualServiceSpecHttpMirrorPortArgs) VirtualServiceSpecHttpMirrorPortPtrInput {
	return (*virtualServiceSpecHttpMirrorPortPtrType)(v)
}

func (*virtualServiceSpecHttpMirrorPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorPort)(nil)).Elem()
}

func (i *virtualServiceSpecHttpMirrorPortPtrType) ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpMirrorPortPtrType) ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpMirrorPortOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorPort)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorPortOutput) ToVirtualServiceSpecHttpMirrorPortOutput() VirtualServiceSpecHttpMirrorPortOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPortOutput) ToVirtualServiceSpecHttpMirrorPortOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPortOutput) ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o.ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpMirrorPortOutput) ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpMirrorPort) *VirtualServiceSpecHttpMirrorPort {
		return &v
	}).(VirtualServiceSpecHttpMirrorPortPtrOutput)
}

func (o VirtualServiceSpecHttpMirrorPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirrorPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpMirrorPortPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorPort)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorPortPtrOutput) ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPortPtrOutput) ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPortPtrOutput) Elem() VirtualServiceSpecHttpMirrorPortOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorPort) VirtualServiceSpecHttpMirrorPort {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpMirrorPort
		return ret
	}).(VirtualServiceSpecHttpMirrorPortOutput)
}

func (o VirtualServiceSpecHttpMirrorPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

// Percentage of the traffic to be mirrored by the `mirror` field.
type VirtualServiceSpecHttpMirrorpercentage struct {
	Value *float64 `pulumi:"value"`
}

// VirtualServiceSpecHttpMirrorpercentageInput is an input type that accepts VirtualServiceSpecHttpMirrorpercentageArgs and VirtualServiceSpecHttpMirrorpercentageOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorpercentageInput` via:
//
//	VirtualServiceSpecHttpMirrorpercentageArgs{...}
type VirtualServiceSpecHttpMirrorpercentageInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorpercentageOutput() VirtualServiceSpecHttpMirrorpercentageOutput
	ToVirtualServiceSpecHttpMirrorpercentageOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorpercentageOutput
}

// Percentage of the traffic to be mirrored by the `mirror` field.
type VirtualServiceSpecHttpMirrorpercentageArgs struct {
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (VirtualServiceSpecHttpMirrorpercentageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorpercentage)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMirrorpercentageArgs) ToVirtualServiceSpecHttpMirrorpercentageOutput() VirtualServiceSpecHttpMirrorpercentageOutput {
	return i.ToVirtualServiceSpecHttpMirrorpercentageOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorpercentageArgs) ToVirtualServiceSpecHttpMirrorpercentageOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorpercentageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorpercentageOutput)
}

func (i VirtualServiceSpecHttpMirrorpercentageArgs) ToVirtualServiceSpecHttpMirrorpercentagePtrOutput() VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorpercentageArgs) ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorpercentageOutput).ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpMirrorpercentagePtrInput is an input type that accepts VirtualServiceSpecHttpMirrorpercentageArgs, VirtualServiceSpecHttpMirrorpercentagePtr and VirtualServiceSpecHttpMirrorpercentagePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorpercentagePtrInput` via:
//
//	        VirtualServiceSpecHttpMirrorpercentageArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpMirrorpercentagePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorpercentagePtrOutput() VirtualServiceSpecHttpMirrorpercentagePtrOutput
	ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorpercentagePtrOutput
}

type virtualServiceSpecHttpMirrorpercentagePtrType VirtualServiceSpecHttpMirrorpercentageArgs

func VirtualServiceSpecHttpMirrorpercentagePtr(v *VirtualServiceSpecHttpMirrorpercentageArgs) VirtualServiceSpecHttpMirrorpercentagePtrInput {
	return (*virtualServiceSpecHttpMirrorpercentagePtrType)(v)
}

func (*virtualServiceSpecHttpMirrorpercentagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorpercentage)(nil)).Elem()
}

func (i *virtualServiceSpecHttpMirrorpercentagePtrType) ToVirtualServiceSpecHttpMirrorpercentagePtrOutput() VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpMirrorpercentagePtrType) ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorpercentagePtrOutput)
}

// Percentage of the traffic to be mirrored by the `mirror` field.
type VirtualServiceSpecHttpMirrorpercentageOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorpercentageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorpercentage)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorpercentageOutput) ToVirtualServiceSpecHttpMirrorpercentageOutput() VirtualServiceSpecHttpMirrorpercentageOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorpercentageOutput) ToVirtualServiceSpecHttpMirrorpercentageOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorpercentageOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorpercentageOutput) ToVirtualServiceSpecHttpMirrorpercentagePtrOutput() VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return o.ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpMirrorpercentageOutput) ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpMirrorpercentage) *VirtualServiceSpecHttpMirrorpercentage {
		return &v
	}).(VirtualServiceSpecHttpMirrorpercentagePtrOutput)
}

func (o VirtualServiceSpecHttpMirrorpercentageOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirrorpercentage) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type VirtualServiceSpecHttpMirrorpercentagePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorpercentagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorpercentage)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorpercentagePtrOutput) ToVirtualServiceSpecHttpMirrorpercentagePtrOutput() VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorpercentagePtrOutput) ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorpercentagePtrOutput) Elem() VirtualServiceSpecHttpMirrorpercentageOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorpercentage) VirtualServiceSpecHttpMirrorpercentage {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpMirrorpercentage
		return ret
	}).(VirtualServiceSpecHttpMirrorpercentageOutput)
}

func (o VirtualServiceSpecHttpMirrorpercentagePtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorpercentage) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

// Retry policy for HTTP requests.
type VirtualServiceSpecHttpRetries struct {
	// Number of retries to be allowed for a given request.
	Attempts *int `pulumi:"attempts"`
	// Timeout per attempt for a given request, including the initial call and any retries.
	PerTryTimeout *string `pulumi:"perTryTimeout"`
	// Specifies the conditions under which retry takes place.
	RetryOn *string `pulumi:"retryOn"`
	// Flag to specify whether the retries should retry to other localities.
	RetryRemoteLocalities *bool `pulumi:"retryRemoteLocalities"`
}

// VirtualServiceSpecHttpRetriesInput is an input type that accepts VirtualServiceSpecHttpRetriesArgs and VirtualServiceSpecHttpRetriesOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRetriesInput` via:
//
//	VirtualServiceSpecHttpRetriesArgs{...}
type VirtualServiceSpecHttpRetriesInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRetriesOutput() VirtualServiceSpecHttpRetriesOutput
	ToVirtualServiceSpecHttpRetriesOutputWithContext(context.Context) VirtualServiceSpecHttpRetriesOutput
}

// Retry policy for HTTP requests.
type VirtualServiceSpecHttpRetriesArgs struct {
	// Number of retries to be allowed for a given request.
	Attempts pulumi.IntPtrInput `pulumi:"attempts"`
	// Timeout per attempt for a given request, including the initial call and any retries.
	PerTryTimeout pulumi.StringPtrInput `pulumi:"perTryTimeout"`
	// Specifies the conditions under which retry takes place.
	RetryOn pulumi.StringPtrInput `pulumi:"retryOn"`
	// Flag to specify whether the retries should retry to other localities.
	RetryRemoteLocalities pulumi.BoolPtrInput `pulumi:"retryRemoteLocalities"`
}

func (VirtualServiceSpecHttpRetriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRetries)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRetriesArgs) ToVirtualServiceSpecHttpRetriesOutput() VirtualServiceSpecHttpRetriesOutput {
	return i.ToVirtualServiceSpecHttpRetriesOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRetriesArgs) ToVirtualServiceSpecHttpRetriesOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRetriesOutput)
}

func (i VirtualServiceSpecHttpRetriesArgs) ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput {
	return i.ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRetriesArgs) ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRetriesOutput).ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRetriesPtrInput is an input type that accepts VirtualServiceSpecHttpRetriesArgs, VirtualServiceSpecHttpRetriesPtr and VirtualServiceSpecHttpRetriesPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRetriesPtrInput` via:
//
//	        VirtualServiceSpecHttpRetriesArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpRetriesPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput
	ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(context.Context) VirtualServiceSpecHttpRetriesPtrOutput
}

type virtualServiceSpecHttpRetriesPtrType VirtualServiceSpecHttpRetriesArgs

func VirtualServiceSpecHttpRetriesPtr(v *VirtualServiceSpecHttpRetriesArgs) VirtualServiceSpecHttpRetriesPtrInput {
	return (*virtualServiceSpecHttpRetriesPtrType)(v)
}

func (*virtualServiceSpecHttpRetriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRetries)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRetriesPtrType) ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput {
	return i.ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRetriesPtrType) ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRetriesPtrOutput)
}

// Retry policy for HTTP requests.
type VirtualServiceSpecHttpRetriesOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRetriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRetries)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRetriesOutput) ToVirtualServiceSpecHttpRetriesOutput() VirtualServiceSpecHttpRetriesOutput {
	return o
}

func (o VirtualServiceSpecHttpRetriesOutput) ToVirtualServiceSpecHttpRetriesOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesOutput {
	return o
}

func (o VirtualServiceSpecHttpRetriesOutput) ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput {
	return o.ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRetriesOutput) ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRetries) *VirtualServiceSpecHttpRetries {
		return &v
	}).(VirtualServiceSpecHttpRetriesPtrOutput)
}

// Number of retries to be allowed for a given request.
func (o VirtualServiceSpecHttpRetriesOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRetries) *int { return v.Attempts }).(pulumi.IntPtrOutput)
}

// Timeout per attempt for a given request, including the initial call and any retries.
func (o VirtualServiceSpecHttpRetriesOutput) PerTryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRetries) *string { return v.PerTryTimeout }).(pulumi.StringPtrOutput)
}

// Specifies the conditions under which retry takes place.
func (o VirtualServiceSpecHttpRetriesOutput) RetryOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRetries) *string { return v.RetryOn }).(pulumi.StringPtrOutput)
}

// Flag to specify whether the retries should retry to other localities.
func (o VirtualServiceSpecHttpRetriesOutput) RetryRemoteLocalities() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRetries) *bool { return v.RetryRemoteLocalities }).(pulumi.BoolPtrOutput)
}

type VirtualServiceSpecHttpRetriesPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRetriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRetries)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRetriesPtrOutput) ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRetriesPtrOutput) ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRetriesPtrOutput) Elem() VirtualServiceSpecHttpRetriesOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) VirtualServiceSpecHttpRetries {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRetries
		return ret
	}).(VirtualServiceSpecHttpRetriesOutput)
}

// Number of retries to be allowed for a given request.
func (o VirtualServiceSpecHttpRetriesPtrOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) *int {
		if v == nil {
			return nil
		}
		return v.Attempts
	}).(pulumi.IntPtrOutput)
}

// Timeout per attempt for a given request, including the initial call and any retries.
func (o VirtualServiceSpecHttpRetriesPtrOutput) PerTryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) *string {
		if v == nil {
			return nil
		}
		return v.PerTryTimeout
	}).(pulumi.StringPtrOutput)
}

// Specifies the conditions under which retry takes place.
func (o VirtualServiceSpecHttpRetriesPtrOutput) RetryOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) *string {
		if v == nil {
			return nil
		}
		return v.RetryOn
	}).(pulumi.StringPtrOutput)
}

// Flag to specify whether the retries should retry to other localities.
func (o VirtualServiceSpecHttpRetriesPtrOutput) RetryRemoteLocalities() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) *bool {
		if v == nil {
			return nil
		}
		return v.RetryRemoteLocalities
	}).(pulumi.BoolPtrOutput)
}

// Rewrite HTTP URIs and Authority headers.
type VirtualServiceSpecHttpRewrite struct {
	// rewrite the Authority/Host header with this value.
	Authority *string `pulumi:"authority"`
	Uri       *string `pulumi:"uri"`
}

// VirtualServiceSpecHttpRewriteInput is an input type that accepts VirtualServiceSpecHttpRewriteArgs and VirtualServiceSpecHttpRewriteOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRewriteInput` via:
//
//	VirtualServiceSpecHttpRewriteArgs{...}
type VirtualServiceSpecHttpRewriteInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRewriteOutput() VirtualServiceSpecHttpRewriteOutput
	ToVirtualServiceSpecHttpRewriteOutputWithContext(context.Context) VirtualServiceSpecHttpRewriteOutput
}

// Rewrite HTTP URIs and Authority headers.
type VirtualServiceSpecHttpRewriteArgs struct {
	// rewrite the Authority/Host header with this value.
	Authority pulumi.StringPtrInput `pulumi:"authority"`
	Uri       pulumi.StringPtrInput `pulumi:"uri"`
}

func (VirtualServiceSpecHttpRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRewrite)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRewriteArgs) ToVirtualServiceSpecHttpRewriteOutput() VirtualServiceSpecHttpRewriteOutput {
	return i.ToVirtualServiceSpecHttpRewriteOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRewriteArgs) ToVirtualServiceSpecHttpRewriteOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRewriteOutput)
}

func (i VirtualServiceSpecHttpRewriteArgs) ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput {
	return i.ToVirtualServiceSpecHttpRewritePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRewriteArgs) ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRewriteOutput).ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRewritePtrInput is an input type that accepts VirtualServiceSpecHttpRewriteArgs, VirtualServiceSpecHttpRewritePtr and VirtualServiceSpecHttpRewritePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRewritePtrInput` via:
//
//	        VirtualServiceSpecHttpRewriteArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpRewritePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput
	ToVirtualServiceSpecHttpRewritePtrOutputWithContext(context.Context) VirtualServiceSpecHttpRewritePtrOutput
}

type virtualServiceSpecHttpRewritePtrType VirtualServiceSpecHttpRewriteArgs

func VirtualServiceSpecHttpRewritePtr(v *VirtualServiceSpecHttpRewriteArgs) VirtualServiceSpecHttpRewritePtrInput {
	return (*virtualServiceSpecHttpRewritePtrType)(v)
}

func (*virtualServiceSpecHttpRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRewrite)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRewritePtrType) ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput {
	return i.ToVirtualServiceSpecHttpRewritePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRewritePtrType) ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRewritePtrOutput)
}

// Rewrite HTTP URIs and Authority headers.
type VirtualServiceSpecHttpRewriteOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRewrite)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRewriteOutput) ToVirtualServiceSpecHttpRewriteOutput() VirtualServiceSpecHttpRewriteOutput {
	return o
}

func (o VirtualServiceSpecHttpRewriteOutput) ToVirtualServiceSpecHttpRewriteOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewriteOutput {
	return o
}

func (o VirtualServiceSpecHttpRewriteOutput) ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput {
	return o.ToVirtualServiceSpecHttpRewritePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRewriteOutput) ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewritePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRewrite) *VirtualServiceSpecHttpRewrite {
		return &v
	}).(VirtualServiceSpecHttpRewritePtrOutput)
}

// rewrite the Authority/Host header with this value.
func (o VirtualServiceSpecHttpRewriteOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRewrite) *string { return v.Authority }).(pulumi.StringPtrOutput)
}

func (o VirtualServiceSpecHttpRewriteOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRewrite) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpRewritePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRewrite)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRewritePtrOutput) ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRewritePtrOutput) ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewritePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRewritePtrOutput) Elem() VirtualServiceSpecHttpRewriteOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRewrite) VirtualServiceSpecHttpRewrite {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRewrite
		return ret
	}).(VirtualServiceSpecHttpRewriteOutput)
}

// rewrite the Authority/Host header with this value.
func (o VirtualServiceSpecHttpRewritePtrOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRewrite) *string {
		if v == nil {
			return nil
		}
		return v.Authority
	}).(pulumi.StringPtrOutput)
}

func (o VirtualServiceSpecHttpRewritePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRewrite) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpRoute struct {
	Destination *VirtualServiceSpecHttpRouteDestination `pulumi:"destination"`
	Headers     *VirtualServiceSpecHttpRouteHeaders     `pulumi:"headers"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight *int `pulumi:"weight"`
}

// VirtualServiceSpecHttpRouteInput is an input type that accepts VirtualServiceSpecHttpRouteArgs and VirtualServiceSpecHttpRouteOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteInput` via:
//
//	VirtualServiceSpecHttpRouteArgs{...}
type VirtualServiceSpecHttpRouteInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteOutput() VirtualServiceSpecHttpRouteOutput
	ToVirtualServiceSpecHttpRouteOutputWithContext(context.Context) VirtualServiceSpecHttpRouteOutput
}

type VirtualServiceSpecHttpRouteArgs struct {
	Destination VirtualServiceSpecHttpRouteDestinationPtrInput `pulumi:"destination"`
	Headers     VirtualServiceSpecHttpRouteHeadersPtrInput     `pulumi:"headers"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (VirtualServiceSpecHttpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRoute)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteArgs) ToVirtualServiceSpecHttpRouteOutput() VirtualServiceSpecHttpRouteOutput {
	return i.ToVirtualServiceSpecHttpRouteOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteArgs) ToVirtualServiceSpecHttpRouteOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteOutput)
}

// VirtualServiceSpecHttpRouteArrayInput is an input type that accepts VirtualServiceSpecHttpRouteArray and VirtualServiceSpecHttpRouteArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteArrayInput` via:
//
//	VirtualServiceSpecHttpRouteArray{ VirtualServiceSpecHttpRouteArgs{...} }
type VirtualServiceSpecHttpRouteArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteArrayOutput() VirtualServiceSpecHttpRouteArrayOutput
	ToVirtualServiceSpecHttpRouteArrayOutputWithContext(context.Context) VirtualServiceSpecHttpRouteArrayOutput
}

type VirtualServiceSpecHttpRouteArray []VirtualServiceSpecHttpRouteInput

func (VirtualServiceSpecHttpRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttpRoute)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteArray) ToVirtualServiceSpecHttpRouteArrayOutput() VirtualServiceSpecHttpRouteArrayOutput {
	return i.ToVirtualServiceSpecHttpRouteArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteArray) ToVirtualServiceSpecHttpRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteArrayOutput)
}

type VirtualServiceSpecHttpRouteOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRoute)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteOutput) ToVirtualServiceSpecHttpRouteOutput() VirtualServiceSpecHttpRouteOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteOutput) ToVirtualServiceSpecHttpRouteOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteOutput) Destination() VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRoute) *VirtualServiceSpecHttpRouteDestination { return v.Destination }).(VirtualServiceSpecHttpRouteDestinationPtrOutput)
}

func (o VirtualServiceSpecHttpRouteOutput) Headers() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRoute) *VirtualServiceSpecHttpRouteHeaders { return v.Headers }).(VirtualServiceSpecHttpRouteHeadersPtrOutput)
}

// Weight specifies the relative proportion of traffic to be forwarded to the destination.
func (o VirtualServiceSpecHttpRouteOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRoute) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpRouteArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttpRoute)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteArrayOutput) ToVirtualServiceSpecHttpRouteArrayOutput() VirtualServiceSpecHttpRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteArrayOutput) ToVirtualServiceSpecHttpRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecHttpRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecHttpRoute {
		return vs[0].([]VirtualServiceSpecHttpRoute)[vs[1].(int)]
	}).(VirtualServiceSpecHttpRouteOutput)
}

type VirtualServiceSpecHttpRouteDestination struct {
	// The name of a service from the service registry.
	Host *string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *VirtualServiceSpecHttpRouteDestinationPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// VirtualServiceSpecHttpRouteDestinationInput is an input type that accepts VirtualServiceSpecHttpRouteDestinationArgs and VirtualServiceSpecHttpRouteDestinationOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteDestinationInput` via:
//
//	VirtualServiceSpecHttpRouteDestinationArgs{...}
type VirtualServiceSpecHttpRouteDestinationInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteDestinationOutput() VirtualServiceSpecHttpRouteDestinationOutput
	ToVirtualServiceSpecHttpRouteDestinationOutputWithContext(context.Context) VirtualServiceSpecHttpRouteDestinationOutput
}

type VirtualServiceSpecHttpRouteDestinationArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port VirtualServiceSpecHttpRouteDestinationPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (VirtualServiceSpecHttpRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteDestination)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteDestinationArgs) ToVirtualServiceSpecHttpRouteDestinationOutput() VirtualServiceSpecHttpRouteDestinationOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteDestinationArgs) ToVirtualServiceSpecHttpRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationOutput)
}

func (i VirtualServiceSpecHttpRouteDestinationArgs) ToVirtualServiceSpecHttpRouteDestinationPtrOutput() VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteDestinationArgs) ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationOutput).ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRouteDestinationPtrInput is an input type that accepts VirtualServiceSpecHttpRouteDestinationArgs, VirtualServiceSpecHttpRouteDestinationPtr and VirtualServiceSpecHttpRouteDestinationPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteDestinationPtrInput` via:
//
//	        VirtualServiceSpecHttpRouteDestinationArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpRouteDestinationPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteDestinationPtrOutput() VirtualServiceSpecHttpRouteDestinationPtrOutput
	ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(context.Context) VirtualServiceSpecHttpRouteDestinationPtrOutput
}

type virtualServiceSpecHttpRouteDestinationPtrType VirtualServiceSpecHttpRouteDestinationArgs

func VirtualServiceSpecHttpRouteDestinationPtr(v *VirtualServiceSpecHttpRouteDestinationArgs) VirtualServiceSpecHttpRouteDestinationPtrInput {
	return (*virtualServiceSpecHttpRouteDestinationPtrType)(v)
}

func (*virtualServiceSpecHttpRouteDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteDestination)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRouteDestinationPtrType) ToVirtualServiceSpecHttpRouteDestinationPtrOutput() VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRouteDestinationPtrType) ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationPtrOutput)
}

type VirtualServiceSpecHttpRouteDestinationOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteDestinationOutput) ToVirtualServiceSpecHttpRouteDestinationOutput() VirtualServiceSpecHttpRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationOutput) ToVirtualServiceSpecHttpRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationOutput) ToVirtualServiceSpecHttpRouteDestinationPtrOutput() VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return o.ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRouteDestinationOutput) ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRouteDestination) *VirtualServiceSpecHttpRouteDestination {
		return &v
	}).(VirtualServiceSpecHttpRouteDestinationPtrOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecHttpRouteDestinationOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteDestination) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecHttpRouteDestinationOutput) Port() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteDestination) *VirtualServiceSpecHttpRouteDestinationPort {
		return v.Port
	}).(VirtualServiceSpecHttpRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecHttpRouteDestinationOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteDestination) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpRouteDestinationPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteDestinationPtrOutput) ToVirtualServiceSpecHttpRouteDestinationPtrOutput() VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPtrOutput) ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPtrOutput) Elem() VirtualServiceSpecHttpRouteDestinationOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteDestination) VirtualServiceSpecHttpRouteDestination {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRouteDestination
		return ret
	}).(VirtualServiceSpecHttpRouteDestinationOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecHttpRouteDestinationPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteDestination) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecHttpRouteDestinationPtrOutput) Port() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteDestination) *VirtualServiceSpecHttpRouteDestinationPort {
		if v == nil {
			return nil
		}
		return v.Port
	}).(VirtualServiceSpecHttpRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecHttpRouteDestinationPtrOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteDestination) *string {
		if v == nil {
			return nil
		}
		return v.Subset
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpRouteDestinationPort struct {
	Number *int `pulumi:"number"`
}

// VirtualServiceSpecHttpRouteDestinationPortInput is an input type that accepts VirtualServiceSpecHttpRouteDestinationPortArgs and VirtualServiceSpecHttpRouteDestinationPortOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteDestinationPortInput` via:
//
//	VirtualServiceSpecHttpRouteDestinationPortArgs{...}
type VirtualServiceSpecHttpRouteDestinationPortInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteDestinationPortOutput() VirtualServiceSpecHttpRouteDestinationPortOutput
	ToVirtualServiceSpecHttpRouteDestinationPortOutputWithContext(context.Context) VirtualServiceSpecHttpRouteDestinationPortOutput
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpRouteDestinationPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (VirtualServiceSpecHttpRouteDestinationPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationPort)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteDestinationPortArgs) ToVirtualServiceSpecHttpRouteDestinationPortOutput() VirtualServiceSpecHttpRouteDestinationPortOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationPortOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteDestinationPortArgs) ToVirtualServiceSpecHttpRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationPortOutput)
}

func (i VirtualServiceSpecHttpRouteDestinationPortArgs) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteDestinationPortArgs) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationPortOutput).ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRouteDestinationPortPtrInput is an input type that accepts VirtualServiceSpecHttpRouteDestinationPortArgs, VirtualServiceSpecHttpRouteDestinationPortPtr and VirtualServiceSpecHttpRouteDestinationPortPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteDestinationPortPtrInput` via:
//
//	        VirtualServiceSpecHttpRouteDestinationPortArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpRouteDestinationPortPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput
	ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput
}

type virtualServiceSpecHttpRouteDestinationPortPtrType VirtualServiceSpecHttpRouteDestinationPortArgs

func VirtualServiceSpecHttpRouteDestinationPortPtr(v *VirtualServiceSpecHttpRouteDestinationPortArgs) VirtualServiceSpecHttpRouteDestinationPortPtrInput {
	return (*virtualServiceSpecHttpRouteDestinationPortPtrType)(v)
}

func (*virtualServiceSpecHttpRouteDestinationPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteDestinationPort)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRouteDestinationPortPtrType) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRouteDestinationPortPtrType) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpRouteDestinationPortOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteDestinationPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) ToVirtualServiceSpecHttpRouteDestinationPortOutput() VirtualServiceSpecHttpRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) ToVirtualServiceSpecHttpRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o.ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRouteDestinationPort) *VirtualServiceSpecHttpRouteDestinationPort {
		return &v
	}).(VirtualServiceSpecHttpRouteDestinationPortPtrOutput)
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteDestinationPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpRouteDestinationPortPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteDestinationPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteDestinationPortPtrOutput) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPortPtrOutput) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPortPtrOutput) Elem() VirtualServiceSpecHttpRouteDestinationPortOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteDestinationPort) VirtualServiceSpecHttpRouteDestinationPort {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRouteDestinationPort
		return ret
	}).(VirtualServiceSpecHttpRouteDestinationPortOutput)
}

func (o VirtualServiceSpecHttpRouteDestinationPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteDestinationPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpRouteHeaders struct {
	Request  *VirtualServiceSpecHttpRouteHeadersRequest  `pulumi:"request"`
	Response *VirtualServiceSpecHttpRouteHeadersResponse `pulumi:"response"`
}

// VirtualServiceSpecHttpRouteHeadersInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersArgs and VirtualServiceSpecHttpRouteHeadersOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersInput` via:
//
//	VirtualServiceSpecHttpRouteHeadersArgs{...}
type VirtualServiceSpecHttpRouteHeadersInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersOutput() VirtualServiceSpecHttpRouteHeadersOutput
	ToVirtualServiceSpecHttpRouteHeadersOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersOutput
}

type VirtualServiceSpecHttpRouteHeadersArgs struct {
	Request  VirtualServiceSpecHttpRouteHeadersRequestPtrInput  `pulumi:"request"`
	Response VirtualServiceSpecHttpRouteHeadersResponsePtrInput `pulumi:"response"`
}

func (VirtualServiceSpecHttpRouteHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeaders)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteHeadersArgs) ToVirtualServiceSpecHttpRouteHeadersOutput() VirtualServiceSpecHttpRouteHeadersOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersArgs) ToVirtualServiceSpecHttpRouteHeadersOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersOutput)
}

func (i VirtualServiceSpecHttpRouteHeadersArgs) ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersArgs) ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersOutput).ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRouteHeadersPtrInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersArgs, VirtualServiceSpecHttpRouteHeadersPtr and VirtualServiceSpecHttpRouteHeadersPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersPtrInput` via:
//
//	        VirtualServiceSpecHttpRouteHeadersArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpRouteHeadersPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput
	ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput
}

type virtualServiceSpecHttpRouteHeadersPtrType VirtualServiceSpecHttpRouteHeadersArgs

func VirtualServiceSpecHttpRouteHeadersPtr(v *VirtualServiceSpecHttpRouteHeadersArgs) VirtualServiceSpecHttpRouteHeadersPtrInput {
	return (*virtualServiceSpecHttpRouteHeadersPtrType)(v)
}

func (*virtualServiceSpecHttpRouteHeadersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeaders)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRouteHeadersPtrType) ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRouteHeadersPtrType) ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersPtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeaders)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) ToVirtualServiceSpecHttpRouteHeadersOutput() VirtualServiceSpecHttpRouteHeadersOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) ToVirtualServiceSpecHttpRouteHeadersOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o.ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeaders {
		return &v
	}).(VirtualServiceSpecHttpRouteHeadersPtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) Request() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeadersRequest {
		return v.Request
	}).(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) Response() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeadersResponse {
		return v.Response
	}).(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeaders)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) Elem() VirtualServiceSpecHttpRouteHeadersOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeaders) VirtualServiceSpecHttpRouteHeaders {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRouteHeaders
		return ret
	}).(VirtualServiceSpecHttpRouteHeadersOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) Request() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeadersRequest {
		if v == nil {
			return nil
		}
		return v.Request
	}).(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) Response() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeadersResponse {
		if v == nil {
			return nil
		}
		return v.Response
	}).(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersRequest struct {
	Add    map[string]string `pulumi:"add"`
	Remove []string          `pulumi:"remove"`
	Set    map[string]string `pulumi:"set"`
}

// VirtualServiceSpecHttpRouteHeadersRequestInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersRequestArgs and VirtualServiceSpecHttpRouteHeadersRequestOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersRequestInput` via:
//
//	VirtualServiceSpecHttpRouteHeadersRequestArgs{...}
type VirtualServiceSpecHttpRouteHeadersRequestInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersRequestOutput() VirtualServiceSpecHttpRouteHeadersRequestOutput
	ToVirtualServiceSpecHttpRouteHeadersRequestOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersRequestOutput
}

type VirtualServiceSpecHttpRouteHeadersRequestArgs struct {
	Add    pulumi.StringMapInput   `pulumi:"add"`
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	Set    pulumi.StringMapInput   `pulumi:"set"`
}

func (VirtualServiceSpecHttpRouteHeadersRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersRequest)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteHeadersRequestArgs) ToVirtualServiceSpecHttpRouteHeadersRequestOutput() VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersRequestOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersRequestArgs) ToVirtualServiceSpecHttpRouteHeadersRequestOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersRequestOutput)
}

func (i VirtualServiceSpecHttpRouteHeadersRequestArgs) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersRequestArgs) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersRequestOutput).ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRouteHeadersRequestPtrInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersRequestArgs, VirtualServiceSpecHttpRouteHeadersRequestPtr and VirtualServiceSpecHttpRouteHeadersRequestPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersRequestPtrInput` via:
//
//	        VirtualServiceSpecHttpRouteHeadersRequestArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpRouteHeadersRequestPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput
	ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput
}

type virtualServiceSpecHttpRouteHeadersRequestPtrType VirtualServiceSpecHttpRouteHeadersRequestArgs

func VirtualServiceSpecHttpRouteHeadersRequestPtr(v *VirtualServiceSpecHttpRouteHeadersRequestArgs) VirtualServiceSpecHttpRouteHeadersRequestPtrInput {
	return (*virtualServiceSpecHttpRouteHeadersRequestPtrType)(v)
}

func (*virtualServiceSpecHttpRouteHeadersRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeadersRequest)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRouteHeadersRequestPtrType) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRouteHeadersRequestPtrType) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersRequestOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersRequest)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) ToVirtualServiceSpecHttpRouteHeadersRequestOutput() VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) ToVirtualServiceSpecHttpRouteHeadersRequestOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o.ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRouteHeadersRequest) *VirtualServiceSpecHttpRouteHeadersRequest {
		return &v
	}).(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersRequest) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersRequest) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersRequest) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpRouteHeadersRequestPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeadersRequest)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) Elem() VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersRequest) VirtualServiceSpecHttpRouteHeadersRequest {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRouteHeadersRequest
		return ret
	}).(VirtualServiceSpecHttpRouteHeadersRequestOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersRequest) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpRouteHeadersRequestAdd struct {
}

type VirtualServiceSpecHttpRouteHeadersRequestSet struct {
}

type VirtualServiceSpecHttpRouteHeadersResponse struct {
	Add    map[string]string `pulumi:"add"`
	Remove []string          `pulumi:"remove"`
	Set    map[string]string `pulumi:"set"`
}

// VirtualServiceSpecHttpRouteHeadersResponseInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersResponseArgs and VirtualServiceSpecHttpRouteHeadersResponseOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersResponseInput` via:
//
//	VirtualServiceSpecHttpRouteHeadersResponseArgs{...}
type VirtualServiceSpecHttpRouteHeadersResponseInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersResponseOutput() VirtualServiceSpecHttpRouteHeadersResponseOutput
	ToVirtualServiceSpecHttpRouteHeadersResponseOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersResponseOutput
}

type VirtualServiceSpecHttpRouteHeadersResponseArgs struct {
	Add    pulumi.StringMapInput   `pulumi:"add"`
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	Set    pulumi.StringMapInput   `pulumi:"set"`
}

func (VirtualServiceSpecHttpRouteHeadersResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersResponse)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteHeadersResponseArgs) ToVirtualServiceSpecHttpRouteHeadersResponseOutput() VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersResponseOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersResponseArgs) ToVirtualServiceSpecHttpRouteHeadersResponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersResponseOutput)
}

func (i VirtualServiceSpecHttpRouteHeadersResponseArgs) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersResponseArgs) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersResponseOutput).ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRouteHeadersResponsePtrInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersResponseArgs, VirtualServiceSpecHttpRouteHeadersResponsePtr and VirtualServiceSpecHttpRouteHeadersResponsePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersResponsePtrInput` via:
//
//	        VirtualServiceSpecHttpRouteHeadersResponseArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpRouteHeadersResponsePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput
	ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput
}

type virtualServiceSpecHttpRouteHeadersResponsePtrType VirtualServiceSpecHttpRouteHeadersResponseArgs

func VirtualServiceSpecHttpRouteHeadersResponsePtr(v *VirtualServiceSpecHttpRouteHeadersResponseArgs) VirtualServiceSpecHttpRouteHeadersResponsePtrInput {
	return (*virtualServiceSpecHttpRouteHeadersResponsePtrType)(v)
}

func (*virtualServiceSpecHttpRouteHeadersResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeadersResponse)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRouteHeadersResponsePtrType) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRouteHeadersResponsePtrType) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersResponseOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersResponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) ToVirtualServiceSpecHttpRouteHeadersResponseOutput() VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) ToVirtualServiceSpecHttpRouteHeadersResponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o.ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRouteHeadersResponse) *VirtualServiceSpecHttpRouteHeadersResponse {
		return &v
	}).(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersResponse) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersResponse) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersResponse) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpRouteHeadersResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeadersResponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) Elem() VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersResponse) VirtualServiceSpecHttpRouteHeadersResponse {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRouteHeadersResponse
		return ret
	}).(VirtualServiceSpecHttpRouteHeadersResponseOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersResponse) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpRouteHeadersResponseAdd struct {
}

type VirtualServiceSpecHttpRouteHeadersResponseSet struct {
}

type VirtualServiceSpecTcp struct {
	Match []VirtualServiceSpecTcpMatch `pulumi:"match"`
	// The destination to which the connection should be forwarded to.
	Route []VirtualServiceSpecTcpRoute `pulumi:"route"`
}

// VirtualServiceSpecTcpInput is an input type that accepts VirtualServiceSpecTcpArgs and VirtualServiceSpecTcpOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpInput` via:
//
//	VirtualServiceSpecTcpArgs{...}
type VirtualServiceSpecTcpInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpOutput() VirtualServiceSpecTcpOutput
	ToVirtualServiceSpecTcpOutputWithContext(context.Context) VirtualServiceSpecTcpOutput
}

type VirtualServiceSpecTcpArgs struct {
	Match VirtualServiceSpecTcpMatchArrayInput `pulumi:"match"`
	// The destination to which the connection should be forwarded to.
	Route VirtualServiceSpecTcpRouteArrayInput `pulumi:"route"`
}

func (VirtualServiceSpecTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcp)(nil)).Elem()
}

func (i VirtualServiceSpecTcpArgs) ToVirtualServiceSpecTcpOutput() VirtualServiceSpecTcpOutput {
	return i.ToVirtualServiceSpecTcpOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpArgs) ToVirtualServiceSpecTcpOutputWithContext(ctx context.Context) VirtualServiceSpecTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpOutput)
}

// VirtualServiceSpecTcpArrayInput is an input type that accepts VirtualServiceSpecTcpArray and VirtualServiceSpecTcpArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpArrayInput` via:
//
//	VirtualServiceSpecTcpArray{ VirtualServiceSpecTcpArgs{...} }
type VirtualServiceSpecTcpArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpArrayOutput() VirtualServiceSpecTcpArrayOutput
	ToVirtualServiceSpecTcpArrayOutputWithContext(context.Context) VirtualServiceSpecTcpArrayOutput
}

type VirtualServiceSpecTcpArray []VirtualServiceSpecTcpInput

func (VirtualServiceSpecTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcp)(nil)).Elem()
}

func (i VirtualServiceSpecTcpArray) ToVirtualServiceSpecTcpArrayOutput() VirtualServiceSpecTcpArrayOutput {
	return i.ToVirtualServiceSpecTcpArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpArray) ToVirtualServiceSpecTcpArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpArrayOutput)
}

type VirtualServiceSpecTcpOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcp)(nil)).Elem()
}

func (o VirtualServiceSpecTcpOutput) ToVirtualServiceSpecTcpOutput() VirtualServiceSpecTcpOutput {
	return o
}

func (o VirtualServiceSpecTcpOutput) ToVirtualServiceSpecTcpOutputWithContext(ctx context.Context) VirtualServiceSpecTcpOutput {
	return o
}

func (o VirtualServiceSpecTcpOutput) Match() VirtualServiceSpecTcpMatchArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcp) []VirtualServiceSpecTcpMatch { return v.Match }).(VirtualServiceSpecTcpMatchArrayOutput)
}

// The destination to which the connection should be forwarded to.
func (o VirtualServiceSpecTcpOutput) Route() VirtualServiceSpecTcpRouteArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcp) []VirtualServiceSpecTcpRoute { return v.Route }).(VirtualServiceSpecTcpRouteArrayOutput)
}

type VirtualServiceSpecTcpArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcp)(nil)).Elem()
}

func (o VirtualServiceSpecTcpArrayOutput) ToVirtualServiceSpecTcpArrayOutput() VirtualServiceSpecTcpArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpArrayOutput) ToVirtualServiceSpecTcpArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTcp {
		return vs[0].([]VirtualServiceSpecTcp)[vs[1].(int)]
	}).(VirtualServiceSpecTcpOutput)
}

type VirtualServiceSpecTcpMatch struct {
	// IPv4 or IPv6 ip addresses of destination with optional subnet.
	DestinationSubnets []string `pulumi:"destinationSubnets"`
	// Names of gateways where the rule should be applied.
	Gateways []string `pulumi:"gateways"`
	// Specifies the port on the host that is being addressed.
	Port         *int              `pulumi:"port"`
	SourceLabels map[string]string `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace *string `pulumi:"sourceNamespace"`
	// IPv4 or IPv6 ip address of source with optional subnet.
	SourceSubnet *string `pulumi:"sourceSubnet"`
}

// VirtualServiceSpecTcpMatchInput is an input type that accepts VirtualServiceSpecTcpMatchArgs and VirtualServiceSpecTcpMatchOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpMatchInput` via:
//
//	VirtualServiceSpecTcpMatchArgs{...}
type VirtualServiceSpecTcpMatchInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpMatchOutput() VirtualServiceSpecTcpMatchOutput
	ToVirtualServiceSpecTcpMatchOutputWithContext(context.Context) VirtualServiceSpecTcpMatchOutput
}

type VirtualServiceSpecTcpMatchArgs struct {
	// IPv4 or IPv6 ip addresses of destination with optional subnet.
	DestinationSubnets pulumi.StringArrayInput `pulumi:"destinationSubnets"`
	// Names of gateways where the rule should be applied.
	Gateways pulumi.StringArrayInput `pulumi:"gateways"`
	// Specifies the port on the host that is being addressed.
	Port         pulumi.IntPtrInput    `pulumi:"port"`
	SourceLabels pulumi.StringMapInput `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace pulumi.StringPtrInput `pulumi:"sourceNamespace"`
	// IPv4 or IPv6 ip address of source with optional subnet.
	SourceSubnet pulumi.StringPtrInput `pulumi:"sourceSubnet"`
}

func (VirtualServiceSpecTcpMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpMatch)(nil)).Elem()
}

func (i VirtualServiceSpecTcpMatchArgs) ToVirtualServiceSpecTcpMatchOutput() VirtualServiceSpecTcpMatchOutput {
	return i.ToVirtualServiceSpecTcpMatchOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpMatchArgs) ToVirtualServiceSpecTcpMatchOutputWithContext(ctx context.Context) VirtualServiceSpecTcpMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpMatchOutput)
}

// VirtualServiceSpecTcpMatchArrayInput is an input type that accepts VirtualServiceSpecTcpMatchArray and VirtualServiceSpecTcpMatchArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpMatchArrayInput` via:
//
//	VirtualServiceSpecTcpMatchArray{ VirtualServiceSpecTcpMatchArgs{...} }
type VirtualServiceSpecTcpMatchArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpMatchArrayOutput() VirtualServiceSpecTcpMatchArrayOutput
	ToVirtualServiceSpecTcpMatchArrayOutputWithContext(context.Context) VirtualServiceSpecTcpMatchArrayOutput
}

type VirtualServiceSpecTcpMatchArray []VirtualServiceSpecTcpMatchInput

func (VirtualServiceSpecTcpMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcpMatch)(nil)).Elem()
}

func (i VirtualServiceSpecTcpMatchArray) ToVirtualServiceSpecTcpMatchArrayOutput() VirtualServiceSpecTcpMatchArrayOutput {
	return i.ToVirtualServiceSpecTcpMatchArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpMatchArray) ToVirtualServiceSpecTcpMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpMatchArrayOutput)
}

type VirtualServiceSpecTcpMatchOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpMatch)(nil)).Elem()
}

func (o VirtualServiceSpecTcpMatchOutput) ToVirtualServiceSpecTcpMatchOutput() VirtualServiceSpecTcpMatchOutput {
	return o
}

func (o VirtualServiceSpecTcpMatchOutput) ToVirtualServiceSpecTcpMatchOutputWithContext(ctx context.Context) VirtualServiceSpecTcpMatchOutput {
	return o
}

// IPv4 or IPv6 ip addresses of destination with optional subnet.
func (o VirtualServiceSpecTcpMatchOutput) DestinationSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) []string { return v.DestinationSubnets }).(pulumi.StringArrayOutput)
}

// Names of gateways where the rule should be applied.
func (o VirtualServiceSpecTcpMatchOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) []string { return v.Gateways }).(pulumi.StringArrayOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTcpMatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o VirtualServiceSpecTcpMatchOutput) SourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) map[string]string { return v.SourceLabels }).(pulumi.StringMapOutput)
}

// Source namespace constraining the applicability of a rule to workloads in that namespace.
func (o VirtualServiceSpecTcpMatchOutput) SourceNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) *string { return v.SourceNamespace }).(pulumi.StringPtrOutput)
}

// IPv4 or IPv6 ip address of source with optional subnet.
func (o VirtualServiceSpecTcpMatchOutput) SourceSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) *string { return v.SourceSubnet }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecTcpMatchArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcpMatch)(nil)).Elem()
}

func (o VirtualServiceSpecTcpMatchArrayOutput) ToVirtualServiceSpecTcpMatchArrayOutput() VirtualServiceSpecTcpMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpMatchArrayOutput) ToVirtualServiceSpecTcpMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpMatchArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTcpMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTcpMatch {
		return vs[0].([]VirtualServiceSpecTcpMatch)[vs[1].(int)]
	}).(VirtualServiceSpecTcpMatchOutput)
}

type VirtualServiceSpecTcpMatchSourcelabels struct {
}

type VirtualServiceSpecTcpRoute struct {
	Destination *VirtualServiceSpecTcpRouteDestination `pulumi:"destination"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight *int `pulumi:"weight"`
}

// VirtualServiceSpecTcpRouteInput is an input type that accepts VirtualServiceSpecTcpRouteArgs and VirtualServiceSpecTcpRouteOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteInput` via:
//
//	VirtualServiceSpecTcpRouteArgs{...}
type VirtualServiceSpecTcpRouteInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteOutput() VirtualServiceSpecTcpRouteOutput
	ToVirtualServiceSpecTcpRouteOutputWithContext(context.Context) VirtualServiceSpecTcpRouteOutput
}

type VirtualServiceSpecTcpRouteArgs struct {
	Destination VirtualServiceSpecTcpRouteDestinationPtrInput `pulumi:"destination"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (VirtualServiceSpecTcpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRoute)(nil)).Elem()
}

func (i VirtualServiceSpecTcpRouteArgs) ToVirtualServiceSpecTcpRouteOutput() VirtualServiceSpecTcpRouteOutput {
	return i.ToVirtualServiceSpecTcpRouteOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteArgs) ToVirtualServiceSpecTcpRouteOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteOutput)
}

// VirtualServiceSpecTcpRouteArrayInput is an input type that accepts VirtualServiceSpecTcpRouteArray and VirtualServiceSpecTcpRouteArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteArrayInput` via:
//
//	VirtualServiceSpecTcpRouteArray{ VirtualServiceSpecTcpRouteArgs{...} }
type VirtualServiceSpecTcpRouteArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteArrayOutput() VirtualServiceSpecTcpRouteArrayOutput
	ToVirtualServiceSpecTcpRouteArrayOutputWithContext(context.Context) VirtualServiceSpecTcpRouteArrayOutput
}

type VirtualServiceSpecTcpRouteArray []VirtualServiceSpecTcpRouteInput

func (VirtualServiceSpecTcpRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcpRoute)(nil)).Elem()
}

func (i VirtualServiceSpecTcpRouteArray) ToVirtualServiceSpecTcpRouteArrayOutput() VirtualServiceSpecTcpRouteArrayOutput {
	return i.ToVirtualServiceSpecTcpRouteArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteArray) ToVirtualServiceSpecTcpRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteArrayOutput)
}

type VirtualServiceSpecTcpRouteOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRoute)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteOutput) ToVirtualServiceSpecTcpRouteOutput() VirtualServiceSpecTcpRouteOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteOutput) ToVirtualServiceSpecTcpRouteOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteOutput) Destination() VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRoute) *VirtualServiceSpecTcpRouteDestination { return v.Destination }).(VirtualServiceSpecTcpRouteDestinationPtrOutput)
}

// Weight specifies the relative proportion of traffic to be forwarded to the destination.
func (o VirtualServiceSpecTcpRouteOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRoute) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTcpRouteArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcpRoute)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteArrayOutput) ToVirtualServiceSpecTcpRouteArrayOutput() VirtualServiceSpecTcpRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteArrayOutput) ToVirtualServiceSpecTcpRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTcpRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTcpRoute {
		return vs[0].([]VirtualServiceSpecTcpRoute)[vs[1].(int)]
	}).(VirtualServiceSpecTcpRouteOutput)
}

type VirtualServiceSpecTcpRouteDestination struct {
	// The name of a service from the service registry.
	Host *string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *VirtualServiceSpecTcpRouteDestinationPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// VirtualServiceSpecTcpRouteDestinationInput is an input type that accepts VirtualServiceSpecTcpRouteDestinationArgs and VirtualServiceSpecTcpRouteDestinationOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteDestinationInput` via:
//
//	VirtualServiceSpecTcpRouteDestinationArgs{...}
type VirtualServiceSpecTcpRouteDestinationInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteDestinationOutput() VirtualServiceSpecTcpRouteDestinationOutput
	ToVirtualServiceSpecTcpRouteDestinationOutputWithContext(context.Context) VirtualServiceSpecTcpRouteDestinationOutput
}

type VirtualServiceSpecTcpRouteDestinationArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port VirtualServiceSpecTcpRouteDestinationPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (VirtualServiceSpecTcpRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRouteDestination)(nil)).Elem()
}

func (i VirtualServiceSpecTcpRouteDestinationArgs) ToVirtualServiceSpecTcpRouteDestinationOutput() VirtualServiceSpecTcpRouteDestinationOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteDestinationArgs) ToVirtualServiceSpecTcpRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationOutput)
}

func (i VirtualServiceSpecTcpRouteDestinationArgs) ToVirtualServiceSpecTcpRouteDestinationPtrOutput() VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteDestinationArgs) ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationOutput).ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(ctx)
}

// VirtualServiceSpecTcpRouteDestinationPtrInput is an input type that accepts VirtualServiceSpecTcpRouteDestinationArgs, VirtualServiceSpecTcpRouteDestinationPtr and VirtualServiceSpecTcpRouteDestinationPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteDestinationPtrInput` via:
//
//	        VirtualServiceSpecTcpRouteDestinationArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecTcpRouteDestinationPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteDestinationPtrOutput() VirtualServiceSpecTcpRouteDestinationPtrOutput
	ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(context.Context) VirtualServiceSpecTcpRouteDestinationPtrOutput
}

type virtualServiceSpecTcpRouteDestinationPtrType VirtualServiceSpecTcpRouteDestinationArgs

func VirtualServiceSpecTcpRouteDestinationPtr(v *VirtualServiceSpecTcpRouteDestinationArgs) VirtualServiceSpecTcpRouteDestinationPtrInput {
	return (*virtualServiceSpecTcpRouteDestinationPtrType)(v)
}

func (*virtualServiceSpecTcpRouteDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTcpRouteDestination)(nil)).Elem()
}

func (i *virtualServiceSpecTcpRouteDestinationPtrType) ToVirtualServiceSpecTcpRouteDestinationPtrOutput() VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecTcpRouteDestinationPtrType) ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationPtrOutput)
}

type VirtualServiceSpecTcpRouteDestinationOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteDestinationOutput) ToVirtualServiceSpecTcpRouteDestinationOutput() VirtualServiceSpecTcpRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationOutput) ToVirtualServiceSpecTcpRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationOutput) ToVirtualServiceSpecTcpRouteDestinationPtrOutput() VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return o.ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecTcpRouteDestinationOutput) ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecTcpRouteDestination) *VirtualServiceSpecTcpRouteDestination {
		return &v
	}).(VirtualServiceSpecTcpRouteDestinationPtrOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecTcpRouteDestinationOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRouteDestination) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTcpRouteDestinationOutput) Port() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRouteDestination) *VirtualServiceSpecTcpRouteDestinationPort {
		return v.Port
	}).(VirtualServiceSpecTcpRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecTcpRouteDestinationOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRouteDestination) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecTcpRouteDestinationPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTcpRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteDestinationPtrOutput) ToVirtualServiceSpecTcpRouteDestinationPtrOutput() VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPtrOutput) ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPtrOutput) Elem() VirtualServiceSpecTcpRouteDestinationOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTcpRouteDestination) VirtualServiceSpecTcpRouteDestination {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecTcpRouteDestination
		return ret
	}).(VirtualServiceSpecTcpRouteDestinationOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecTcpRouteDestinationPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTcpRouteDestination) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTcpRouteDestinationPtrOutput) Port() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTcpRouteDestination) *VirtualServiceSpecTcpRouteDestinationPort {
		if v == nil {
			return nil
		}
		return v.Port
	}).(VirtualServiceSpecTcpRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecTcpRouteDestinationPtrOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTcpRouteDestination) *string {
		if v == nil {
			return nil
		}
		return v.Subset
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTcpRouteDestinationPort struct {
	Number *int `pulumi:"number"`
}

// VirtualServiceSpecTcpRouteDestinationPortInput is an input type that accepts VirtualServiceSpecTcpRouteDestinationPortArgs and VirtualServiceSpecTcpRouteDestinationPortOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteDestinationPortInput` via:
//
//	VirtualServiceSpecTcpRouteDestinationPortArgs{...}
type VirtualServiceSpecTcpRouteDestinationPortInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteDestinationPortOutput() VirtualServiceSpecTcpRouteDestinationPortOutput
	ToVirtualServiceSpecTcpRouteDestinationPortOutputWithContext(context.Context) VirtualServiceSpecTcpRouteDestinationPortOutput
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTcpRouteDestinationPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (VirtualServiceSpecTcpRouteDestinationPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationPort)(nil)).Elem()
}

func (i VirtualServiceSpecTcpRouteDestinationPortArgs) ToVirtualServiceSpecTcpRouteDestinationPortOutput() VirtualServiceSpecTcpRouteDestinationPortOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationPortOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteDestinationPortArgs) ToVirtualServiceSpecTcpRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationPortOutput)
}

func (i VirtualServiceSpecTcpRouteDestinationPortArgs) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteDestinationPortArgs) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationPortOutput).ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx)
}

// VirtualServiceSpecTcpRouteDestinationPortPtrInput is an input type that accepts VirtualServiceSpecTcpRouteDestinationPortArgs, VirtualServiceSpecTcpRouteDestinationPortPtr and VirtualServiceSpecTcpRouteDestinationPortPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteDestinationPortPtrInput` via:
//
//	        VirtualServiceSpecTcpRouteDestinationPortArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecTcpRouteDestinationPortPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput
	ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput
}

type virtualServiceSpecTcpRouteDestinationPortPtrType VirtualServiceSpecTcpRouteDestinationPortArgs

func VirtualServiceSpecTcpRouteDestinationPortPtr(v *VirtualServiceSpecTcpRouteDestinationPortArgs) VirtualServiceSpecTcpRouteDestinationPortPtrInput {
	return (*virtualServiceSpecTcpRouteDestinationPortPtrType)(v)
}

func (*virtualServiceSpecTcpRouteDestinationPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTcpRouteDestinationPort)(nil)).Elem()
}

func (i *virtualServiceSpecTcpRouteDestinationPortPtrType) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecTcpRouteDestinationPortPtrType) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTcpRouteDestinationPortOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteDestinationPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) ToVirtualServiceSpecTcpRouteDestinationPortOutput() VirtualServiceSpecTcpRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) ToVirtualServiceSpecTcpRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o.ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecTcpRouteDestinationPort) *VirtualServiceSpecTcpRouteDestinationPort {
		return &v
	}).(VirtualServiceSpecTcpRouteDestinationPortPtrOutput)
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRouteDestinationPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTcpRouteDestinationPortPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteDestinationPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTcpRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteDestinationPortPtrOutput) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPortPtrOutput) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPortPtrOutput) Elem() VirtualServiceSpecTcpRouteDestinationPortOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTcpRouteDestinationPort) VirtualServiceSpecTcpRouteDestinationPort {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecTcpRouteDestinationPort
		return ret
	}).(VirtualServiceSpecTcpRouteDestinationPortOutput)
}

func (o VirtualServiceSpecTcpRouteDestinationPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTcpRouteDestinationPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTls struct {
	Match []VirtualServiceSpecTlsMatch `pulumi:"match"`
	// The destination to which the connection should be forwarded to.
	Route []VirtualServiceSpecTlsRoute `pulumi:"route"`
}

// VirtualServiceSpecTlsInput is an input type that accepts VirtualServiceSpecTlsArgs and VirtualServiceSpecTlsOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsInput` via:
//
//	VirtualServiceSpecTlsArgs{...}
type VirtualServiceSpecTlsInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsOutput() VirtualServiceSpecTlsOutput
	ToVirtualServiceSpecTlsOutputWithContext(context.Context) VirtualServiceSpecTlsOutput
}

type VirtualServiceSpecTlsArgs struct {
	Match VirtualServiceSpecTlsMatchArrayInput `pulumi:"match"`
	// The destination to which the connection should be forwarded to.
	Route VirtualServiceSpecTlsRouteArrayInput `pulumi:"route"`
}

func (VirtualServiceSpecTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTls)(nil)).Elem()
}

func (i VirtualServiceSpecTlsArgs) ToVirtualServiceSpecTlsOutput() VirtualServiceSpecTlsOutput {
	return i.ToVirtualServiceSpecTlsOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsArgs) ToVirtualServiceSpecTlsOutputWithContext(ctx context.Context) VirtualServiceSpecTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsOutput)
}

// VirtualServiceSpecTlsArrayInput is an input type that accepts VirtualServiceSpecTlsArray and VirtualServiceSpecTlsArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsArrayInput` via:
//
//	VirtualServiceSpecTlsArray{ VirtualServiceSpecTlsArgs{...} }
type VirtualServiceSpecTlsArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsArrayOutput() VirtualServiceSpecTlsArrayOutput
	ToVirtualServiceSpecTlsArrayOutputWithContext(context.Context) VirtualServiceSpecTlsArrayOutput
}

type VirtualServiceSpecTlsArray []VirtualServiceSpecTlsInput

func (VirtualServiceSpecTlsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTls)(nil)).Elem()
}

func (i VirtualServiceSpecTlsArray) ToVirtualServiceSpecTlsArrayOutput() VirtualServiceSpecTlsArrayOutput {
	return i.ToVirtualServiceSpecTlsArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsArray) ToVirtualServiceSpecTlsArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsArrayOutput)
}

type VirtualServiceSpecTlsOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTls)(nil)).Elem()
}

func (o VirtualServiceSpecTlsOutput) ToVirtualServiceSpecTlsOutput() VirtualServiceSpecTlsOutput {
	return o
}

func (o VirtualServiceSpecTlsOutput) ToVirtualServiceSpecTlsOutputWithContext(ctx context.Context) VirtualServiceSpecTlsOutput {
	return o
}

func (o VirtualServiceSpecTlsOutput) Match() VirtualServiceSpecTlsMatchArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTls) []VirtualServiceSpecTlsMatch { return v.Match }).(VirtualServiceSpecTlsMatchArrayOutput)
}

// The destination to which the connection should be forwarded to.
func (o VirtualServiceSpecTlsOutput) Route() VirtualServiceSpecTlsRouteArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTls) []VirtualServiceSpecTlsRoute { return v.Route }).(VirtualServiceSpecTlsRouteArrayOutput)
}

type VirtualServiceSpecTlsArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTls)(nil)).Elem()
}

func (o VirtualServiceSpecTlsArrayOutput) ToVirtualServiceSpecTlsArrayOutput() VirtualServiceSpecTlsArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsArrayOutput) ToVirtualServiceSpecTlsArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTlsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTls {
		return vs[0].([]VirtualServiceSpecTls)[vs[1].(int)]
	}).(VirtualServiceSpecTlsOutput)
}

type VirtualServiceSpecTlsMatch struct {
	// IPv4 or IPv6 ip addresses of destination with optional subnet.
	DestinationSubnets []string `pulumi:"destinationSubnets"`
	// Names of gateways where the rule should be applied.
	Gateways []string `pulumi:"gateways"`
	// Specifies the port on the host that is being addressed.
	Port *int `pulumi:"port"`
	// SNI (server name indicator) to match on.
	SniHosts     []string          `pulumi:"sniHosts"`
	SourceLabels map[string]string `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace *string `pulumi:"sourceNamespace"`
}

// VirtualServiceSpecTlsMatchInput is an input type that accepts VirtualServiceSpecTlsMatchArgs and VirtualServiceSpecTlsMatchOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsMatchInput` via:
//
//	VirtualServiceSpecTlsMatchArgs{...}
type VirtualServiceSpecTlsMatchInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsMatchOutput() VirtualServiceSpecTlsMatchOutput
	ToVirtualServiceSpecTlsMatchOutputWithContext(context.Context) VirtualServiceSpecTlsMatchOutput
}

type VirtualServiceSpecTlsMatchArgs struct {
	// IPv4 or IPv6 ip addresses of destination with optional subnet.
	DestinationSubnets pulumi.StringArrayInput `pulumi:"destinationSubnets"`
	// Names of gateways where the rule should be applied.
	Gateways pulumi.StringArrayInput `pulumi:"gateways"`
	// Specifies the port on the host that is being addressed.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SNI (server name indicator) to match on.
	SniHosts     pulumi.StringArrayInput `pulumi:"sniHosts"`
	SourceLabels pulumi.StringMapInput   `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace pulumi.StringPtrInput `pulumi:"sourceNamespace"`
}

func (VirtualServiceSpecTlsMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsMatch)(nil)).Elem()
}

func (i VirtualServiceSpecTlsMatchArgs) ToVirtualServiceSpecTlsMatchOutput() VirtualServiceSpecTlsMatchOutput {
	return i.ToVirtualServiceSpecTlsMatchOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsMatchArgs) ToVirtualServiceSpecTlsMatchOutputWithContext(ctx context.Context) VirtualServiceSpecTlsMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsMatchOutput)
}

// VirtualServiceSpecTlsMatchArrayInput is an input type that accepts VirtualServiceSpecTlsMatchArray and VirtualServiceSpecTlsMatchArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsMatchArrayInput` via:
//
//	VirtualServiceSpecTlsMatchArray{ VirtualServiceSpecTlsMatchArgs{...} }
type VirtualServiceSpecTlsMatchArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsMatchArrayOutput() VirtualServiceSpecTlsMatchArrayOutput
	ToVirtualServiceSpecTlsMatchArrayOutputWithContext(context.Context) VirtualServiceSpecTlsMatchArrayOutput
}

type VirtualServiceSpecTlsMatchArray []VirtualServiceSpecTlsMatchInput

func (VirtualServiceSpecTlsMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTlsMatch)(nil)).Elem()
}

func (i VirtualServiceSpecTlsMatchArray) ToVirtualServiceSpecTlsMatchArrayOutput() VirtualServiceSpecTlsMatchArrayOutput {
	return i.ToVirtualServiceSpecTlsMatchArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsMatchArray) ToVirtualServiceSpecTlsMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsMatchArrayOutput)
}

type VirtualServiceSpecTlsMatchOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsMatch)(nil)).Elem()
}

func (o VirtualServiceSpecTlsMatchOutput) ToVirtualServiceSpecTlsMatchOutput() VirtualServiceSpecTlsMatchOutput {
	return o
}

func (o VirtualServiceSpecTlsMatchOutput) ToVirtualServiceSpecTlsMatchOutputWithContext(ctx context.Context) VirtualServiceSpecTlsMatchOutput {
	return o
}

// IPv4 or IPv6 ip addresses of destination with optional subnet.
func (o VirtualServiceSpecTlsMatchOutput) DestinationSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) []string { return v.DestinationSubnets }).(pulumi.StringArrayOutput)
}

// Names of gateways where the rule should be applied.
func (o VirtualServiceSpecTlsMatchOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) []string { return v.Gateways }).(pulumi.StringArrayOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTlsMatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SNI (server name indicator) to match on.
func (o VirtualServiceSpecTlsMatchOutput) SniHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) []string { return v.SniHosts }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecTlsMatchOutput) SourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) map[string]string { return v.SourceLabels }).(pulumi.StringMapOutput)
}

// Source namespace constraining the applicability of a rule to workloads in that namespace.
func (o VirtualServiceSpecTlsMatchOutput) SourceNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) *string { return v.SourceNamespace }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecTlsMatchArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTlsMatch)(nil)).Elem()
}

func (o VirtualServiceSpecTlsMatchArrayOutput) ToVirtualServiceSpecTlsMatchArrayOutput() VirtualServiceSpecTlsMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsMatchArrayOutput) ToVirtualServiceSpecTlsMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsMatchArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTlsMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTlsMatch {
		return vs[0].([]VirtualServiceSpecTlsMatch)[vs[1].(int)]
	}).(VirtualServiceSpecTlsMatchOutput)
}

type VirtualServiceSpecTlsMatchSourcelabels struct {
}

type VirtualServiceSpecTlsRoute struct {
	Destination *VirtualServiceSpecTlsRouteDestination `pulumi:"destination"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight *int `pulumi:"weight"`
}

// VirtualServiceSpecTlsRouteInput is an input type that accepts VirtualServiceSpecTlsRouteArgs and VirtualServiceSpecTlsRouteOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteInput` via:
//
//	VirtualServiceSpecTlsRouteArgs{...}
type VirtualServiceSpecTlsRouteInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteOutput() VirtualServiceSpecTlsRouteOutput
	ToVirtualServiceSpecTlsRouteOutputWithContext(context.Context) VirtualServiceSpecTlsRouteOutput
}

type VirtualServiceSpecTlsRouteArgs struct {
	Destination VirtualServiceSpecTlsRouteDestinationPtrInput `pulumi:"destination"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (VirtualServiceSpecTlsRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRoute)(nil)).Elem()
}

func (i VirtualServiceSpecTlsRouteArgs) ToVirtualServiceSpecTlsRouteOutput() VirtualServiceSpecTlsRouteOutput {
	return i.ToVirtualServiceSpecTlsRouteOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteArgs) ToVirtualServiceSpecTlsRouteOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteOutput)
}

// VirtualServiceSpecTlsRouteArrayInput is an input type that accepts VirtualServiceSpecTlsRouteArray and VirtualServiceSpecTlsRouteArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteArrayInput` via:
//
//	VirtualServiceSpecTlsRouteArray{ VirtualServiceSpecTlsRouteArgs{...} }
type VirtualServiceSpecTlsRouteArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteArrayOutput() VirtualServiceSpecTlsRouteArrayOutput
	ToVirtualServiceSpecTlsRouteArrayOutputWithContext(context.Context) VirtualServiceSpecTlsRouteArrayOutput
}

type VirtualServiceSpecTlsRouteArray []VirtualServiceSpecTlsRouteInput

func (VirtualServiceSpecTlsRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTlsRoute)(nil)).Elem()
}

func (i VirtualServiceSpecTlsRouteArray) ToVirtualServiceSpecTlsRouteArrayOutput() VirtualServiceSpecTlsRouteArrayOutput {
	return i.ToVirtualServiceSpecTlsRouteArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteArray) ToVirtualServiceSpecTlsRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteArrayOutput)
}

type VirtualServiceSpecTlsRouteOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRoute)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteOutput) ToVirtualServiceSpecTlsRouteOutput() VirtualServiceSpecTlsRouteOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteOutput) ToVirtualServiceSpecTlsRouteOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteOutput) Destination() VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRoute) *VirtualServiceSpecTlsRouteDestination { return v.Destination }).(VirtualServiceSpecTlsRouteDestinationPtrOutput)
}

// Weight specifies the relative proportion of traffic to be forwarded to the destination.
func (o VirtualServiceSpecTlsRouteOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRoute) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTlsRouteArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTlsRoute)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteArrayOutput) ToVirtualServiceSpecTlsRouteArrayOutput() VirtualServiceSpecTlsRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteArrayOutput) ToVirtualServiceSpecTlsRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTlsRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTlsRoute {
		return vs[0].([]VirtualServiceSpecTlsRoute)[vs[1].(int)]
	}).(VirtualServiceSpecTlsRouteOutput)
}

type VirtualServiceSpecTlsRouteDestination struct {
	// The name of a service from the service registry.
	Host *string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *VirtualServiceSpecTlsRouteDestinationPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// VirtualServiceSpecTlsRouteDestinationInput is an input type that accepts VirtualServiceSpecTlsRouteDestinationArgs and VirtualServiceSpecTlsRouteDestinationOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteDestinationInput` via:
//
//	VirtualServiceSpecTlsRouteDestinationArgs{...}
type VirtualServiceSpecTlsRouteDestinationInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteDestinationOutput() VirtualServiceSpecTlsRouteDestinationOutput
	ToVirtualServiceSpecTlsRouteDestinationOutputWithContext(context.Context) VirtualServiceSpecTlsRouteDestinationOutput
}

type VirtualServiceSpecTlsRouteDestinationArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port VirtualServiceSpecTlsRouteDestinationPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (VirtualServiceSpecTlsRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRouteDestination)(nil)).Elem()
}

func (i VirtualServiceSpecTlsRouteDestinationArgs) ToVirtualServiceSpecTlsRouteDestinationOutput() VirtualServiceSpecTlsRouteDestinationOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteDestinationArgs) ToVirtualServiceSpecTlsRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationOutput)
}

func (i VirtualServiceSpecTlsRouteDestinationArgs) ToVirtualServiceSpecTlsRouteDestinationPtrOutput() VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteDestinationArgs) ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationOutput).ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(ctx)
}

// VirtualServiceSpecTlsRouteDestinationPtrInput is an input type that accepts VirtualServiceSpecTlsRouteDestinationArgs, VirtualServiceSpecTlsRouteDestinationPtr and VirtualServiceSpecTlsRouteDestinationPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteDestinationPtrInput` via:
//
//	        VirtualServiceSpecTlsRouteDestinationArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecTlsRouteDestinationPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteDestinationPtrOutput() VirtualServiceSpecTlsRouteDestinationPtrOutput
	ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(context.Context) VirtualServiceSpecTlsRouteDestinationPtrOutput
}

type virtualServiceSpecTlsRouteDestinationPtrType VirtualServiceSpecTlsRouteDestinationArgs

func VirtualServiceSpecTlsRouteDestinationPtr(v *VirtualServiceSpecTlsRouteDestinationArgs) VirtualServiceSpecTlsRouteDestinationPtrInput {
	return (*virtualServiceSpecTlsRouteDestinationPtrType)(v)
}

func (*virtualServiceSpecTlsRouteDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTlsRouteDestination)(nil)).Elem()
}

func (i *virtualServiceSpecTlsRouteDestinationPtrType) ToVirtualServiceSpecTlsRouteDestinationPtrOutput() VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecTlsRouteDestinationPtrType) ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationPtrOutput)
}

type VirtualServiceSpecTlsRouteDestinationOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteDestinationOutput) ToVirtualServiceSpecTlsRouteDestinationOutput() VirtualServiceSpecTlsRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationOutput) ToVirtualServiceSpecTlsRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationOutput) ToVirtualServiceSpecTlsRouteDestinationPtrOutput() VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return o.ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecTlsRouteDestinationOutput) ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecTlsRouteDestination) *VirtualServiceSpecTlsRouteDestination {
		return &v
	}).(VirtualServiceSpecTlsRouteDestinationPtrOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecTlsRouteDestinationOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRouteDestination) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTlsRouteDestinationOutput) Port() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRouteDestination) *VirtualServiceSpecTlsRouteDestinationPort {
		return v.Port
	}).(VirtualServiceSpecTlsRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecTlsRouteDestinationOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRouteDestination) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecTlsRouteDestinationPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTlsRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteDestinationPtrOutput) ToVirtualServiceSpecTlsRouteDestinationPtrOutput() VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPtrOutput) ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPtrOutput) Elem() VirtualServiceSpecTlsRouteDestinationOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTlsRouteDestination) VirtualServiceSpecTlsRouteDestination {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecTlsRouteDestination
		return ret
	}).(VirtualServiceSpecTlsRouteDestinationOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecTlsRouteDestinationPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTlsRouteDestination) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTlsRouteDestinationPtrOutput) Port() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTlsRouteDestination) *VirtualServiceSpecTlsRouteDestinationPort {
		if v == nil {
			return nil
		}
		return v.Port
	}).(VirtualServiceSpecTlsRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecTlsRouteDestinationPtrOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTlsRouteDestination) *string {
		if v == nil {
			return nil
		}
		return v.Subset
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTlsRouteDestinationPort struct {
	Number *int `pulumi:"number"`
}

// VirtualServiceSpecTlsRouteDestinationPortInput is an input type that accepts VirtualServiceSpecTlsRouteDestinationPortArgs and VirtualServiceSpecTlsRouteDestinationPortOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteDestinationPortInput` via:
//
//	VirtualServiceSpecTlsRouteDestinationPortArgs{...}
type VirtualServiceSpecTlsRouteDestinationPortInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteDestinationPortOutput() VirtualServiceSpecTlsRouteDestinationPortOutput
	ToVirtualServiceSpecTlsRouteDestinationPortOutputWithContext(context.Context) VirtualServiceSpecTlsRouteDestinationPortOutput
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTlsRouteDestinationPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (VirtualServiceSpecTlsRouteDestinationPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationPort)(nil)).Elem()
}

func (i VirtualServiceSpecTlsRouteDestinationPortArgs) ToVirtualServiceSpecTlsRouteDestinationPortOutput() VirtualServiceSpecTlsRouteDestinationPortOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationPortOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteDestinationPortArgs) ToVirtualServiceSpecTlsRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationPortOutput)
}

func (i VirtualServiceSpecTlsRouteDestinationPortArgs) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteDestinationPortArgs) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationPortOutput).ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx)
}

// VirtualServiceSpecTlsRouteDestinationPortPtrInput is an input type that accepts VirtualServiceSpecTlsRouteDestinationPortArgs, VirtualServiceSpecTlsRouteDestinationPortPtr and VirtualServiceSpecTlsRouteDestinationPortPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteDestinationPortPtrInput` via:
//
//	        VirtualServiceSpecTlsRouteDestinationPortArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecTlsRouteDestinationPortPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput
	ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput
}

type virtualServiceSpecTlsRouteDestinationPortPtrType VirtualServiceSpecTlsRouteDestinationPortArgs

func VirtualServiceSpecTlsRouteDestinationPortPtr(v *VirtualServiceSpecTlsRouteDestinationPortArgs) VirtualServiceSpecTlsRouteDestinationPortPtrInput {
	return (*virtualServiceSpecTlsRouteDestinationPortPtrType)(v)
}

func (*virtualServiceSpecTlsRouteDestinationPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTlsRouteDestinationPort)(nil)).Elem()
}

func (i *virtualServiceSpecTlsRouteDestinationPortPtrType) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecTlsRouteDestinationPortPtrType) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTlsRouteDestinationPortOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteDestinationPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) ToVirtualServiceSpecTlsRouteDestinationPortOutput() VirtualServiceSpecTlsRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) ToVirtualServiceSpecTlsRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o.ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecTlsRouteDestinationPort) *VirtualServiceSpecTlsRouteDestinationPort {
		return &v
	}).(VirtualServiceSpecTlsRouteDestinationPortPtrOutput)
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRouteDestinationPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTlsRouteDestinationPortPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteDestinationPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTlsRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteDestinationPortPtrOutput) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPortPtrOutput) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPortPtrOutput) Elem() VirtualServiceSpecTlsRouteDestinationPortOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTlsRouteDestinationPort) VirtualServiceSpecTlsRouteDestinationPort {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecTlsRouteDestinationPort
		return ret
	}).(VirtualServiceSpecTlsRouteDestinationPortOutput)
}

func (o VirtualServiceSpecTlsRouteDestinationPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTlsRouteDestinationPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

type WorkloadEntryType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Configuration affecting VMs onboarded into the mesh. See more details at: https://istio.io/docs/reference/config/networking/workload-entry.html
	Spec   *WorkloadEntrySpec     `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Configuration affecting VMs onboarded into the mesh. See more details at: https://istio.io/docs/reference/config/networking/workload-entry.html
type WorkloadEntrySpec struct {
	Address *string `pulumi:"address"`
	// One or more labels associated with the endpoint.
	Labels map[string]string `pulumi:"labels"`
	// The locality associated with the endpoint.
	Locality *string `pulumi:"locality"`
	Network  *string `pulumi:"network"`
	// Set of ports associated with the endpoint.
	Ports          map[string]int `pulumi:"ports"`
	ServiceAccount *string        `pulumi:"serviceAccount"`
	// The load balancing weight associated with the endpoint.
	Weight *int `pulumi:"weight"`
}

// WorkloadEntrySpecInput is an input type that accepts WorkloadEntrySpecArgs and WorkloadEntrySpecOutput values.
// You can construct a concrete instance of `WorkloadEntrySpecInput` via:
//
//	WorkloadEntrySpecArgs{...}
type WorkloadEntrySpecInput interface {
	pulumi.Input

	ToWorkloadEntrySpecOutput() WorkloadEntrySpecOutput
	ToWorkloadEntrySpecOutputWithContext(context.Context) WorkloadEntrySpecOutput
}

// Configuration affecting VMs onboarded into the mesh. See more details at: https://istio.io/docs/reference/config/networking/workload-entry.html
type WorkloadEntrySpecArgs struct {
	Address pulumi.StringPtrInput `pulumi:"address"`
	// One or more labels associated with the endpoint.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The locality associated with the endpoint.
	Locality pulumi.StringPtrInput `pulumi:"locality"`
	Network  pulumi.StringPtrInput `pulumi:"network"`
	// Set of ports associated with the endpoint.
	Ports          pulumi.IntMapInput    `pulumi:"ports"`
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// The load balancing weight associated with the endpoint.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (WorkloadEntrySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadEntrySpec)(nil)).Elem()
}

func (i WorkloadEntrySpecArgs) ToWorkloadEntrySpecOutput() WorkloadEntrySpecOutput {
	return i.ToWorkloadEntrySpecOutputWithContext(context.Background())
}

func (i WorkloadEntrySpecArgs) ToWorkloadEntrySpecOutputWithContext(ctx context.Context) WorkloadEntrySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadEntrySpecOutput)
}

func (i WorkloadEntrySpecArgs) ToWorkloadEntrySpecPtrOutput() WorkloadEntrySpecPtrOutput {
	return i.ToWorkloadEntrySpecPtrOutputWithContext(context.Background())
}

func (i WorkloadEntrySpecArgs) ToWorkloadEntrySpecPtrOutputWithContext(ctx context.Context) WorkloadEntrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadEntrySpecOutput).ToWorkloadEntrySpecPtrOutputWithContext(ctx)
}

// WorkloadEntrySpecPtrInput is an input type that accepts WorkloadEntrySpecArgs, WorkloadEntrySpecPtr and WorkloadEntrySpecPtrOutput values.
// You can construct a concrete instance of `WorkloadEntrySpecPtrInput` via:
//
//	        WorkloadEntrySpecArgs{...}
//
//	or:
//
//	        nil
type WorkloadEntrySpecPtrInput interface {
	pulumi.Input

	ToWorkloadEntrySpecPtrOutput() WorkloadEntrySpecPtrOutput
	ToWorkloadEntrySpecPtrOutputWithContext(context.Context) WorkloadEntrySpecPtrOutput
}

type workloadEntrySpecPtrType WorkloadEntrySpecArgs

func WorkloadEntrySpecPtr(v *WorkloadEntrySpecArgs) WorkloadEntrySpecPtrInput {
	return (*workloadEntrySpecPtrType)(v)
}

func (*workloadEntrySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadEntrySpec)(nil)).Elem()
}

func (i *workloadEntrySpecPtrType) ToWorkloadEntrySpecPtrOutput() WorkloadEntrySpecPtrOutput {
	return i.ToWorkloadEntrySpecPtrOutputWithContext(context.Background())
}

func (i *workloadEntrySpecPtrType) ToWorkloadEntrySpecPtrOutputWithContext(ctx context.Context) WorkloadEntrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadEntrySpecPtrOutput)
}

// Configuration affecting VMs onboarded into the mesh. See more details at: https://istio.io/docs/reference/config/networking/workload-entry.html
type WorkloadEntrySpecOutput struct{ *pulumi.OutputState }

func (WorkloadEntrySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadEntrySpec)(nil)).Elem()
}

func (o WorkloadEntrySpecOutput) ToWorkloadEntrySpecOutput() WorkloadEntrySpecOutput {
	return o
}

func (o WorkloadEntrySpecOutput) ToWorkloadEntrySpecOutputWithContext(ctx context.Context) WorkloadEntrySpecOutput {
	return o
}

func (o WorkloadEntrySpecOutput) ToWorkloadEntrySpecPtrOutput() WorkloadEntrySpecPtrOutput {
	return o.ToWorkloadEntrySpecPtrOutputWithContext(context.Background())
}

func (o WorkloadEntrySpecOutput) ToWorkloadEntrySpecPtrOutputWithContext(ctx context.Context) WorkloadEntrySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkloadEntrySpec) *WorkloadEntrySpec {
		return &v
	}).(WorkloadEntrySpecPtrOutput)
}

func (o WorkloadEntrySpecOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadEntrySpec) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// One or more labels associated with the endpoint.
func (o WorkloadEntrySpecOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v WorkloadEntrySpec) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The locality associated with the endpoint.
func (o WorkloadEntrySpecOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadEntrySpec) *string { return v.Locality }).(pulumi.StringPtrOutput)
}

func (o WorkloadEntrySpecOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadEntrySpec) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Set of ports associated with the endpoint.
func (o WorkloadEntrySpecOutput) Ports() pulumi.IntMapOutput {
	return o.ApplyT(func(v WorkloadEntrySpec) map[string]int { return v.Ports }).(pulumi.IntMapOutput)
}

func (o WorkloadEntrySpecOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadEntrySpec) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The load balancing weight associated with the endpoint.
func (o WorkloadEntrySpecOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkloadEntrySpec) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type WorkloadEntrySpecPtrOutput struct{ *pulumi.OutputState }

func (WorkloadEntrySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadEntrySpec)(nil)).Elem()
}

func (o WorkloadEntrySpecPtrOutput) ToWorkloadEntrySpecPtrOutput() WorkloadEntrySpecPtrOutput {
	return o
}

func (o WorkloadEntrySpecPtrOutput) ToWorkloadEntrySpecPtrOutputWithContext(ctx context.Context) WorkloadEntrySpecPtrOutput {
	return o
}

func (o WorkloadEntrySpecPtrOutput) Elem() WorkloadEntrySpecOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) WorkloadEntrySpec {
		if v != nil {
			return *v
		}
		var ret WorkloadEntrySpec
		return ret
	}).(WorkloadEntrySpecOutput)
}

func (o WorkloadEntrySpecPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// One or more labels associated with the endpoint.
func (o WorkloadEntrySpecPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The locality associated with the endpoint.
func (o WorkloadEntrySpecPtrOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) *string {
		if v == nil {
			return nil
		}
		return v.Locality
	}).(pulumi.StringPtrOutput)
}

func (o WorkloadEntrySpecPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// Set of ports associated with the endpoint.
func (o WorkloadEntrySpecPtrOutput) Ports() pulumi.IntMapOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) map[string]int {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(pulumi.IntMapOutput)
}

func (o WorkloadEntrySpecPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// The load balancing weight associated with the endpoint.
func (o WorkloadEntrySpecPtrOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) *int {
		if v == nil {
			return nil
		}
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

// One or more labels associated with the endpoint.
type WorkloadEntrySpecLabels struct {
}

// Set of ports associated with the endpoint.
type WorkloadEntrySpecPorts struct {
}

type WorkloadGroupType struct {
	ApiVersion *string                `pulumi:"apiVersion"`
	Kind       *string                `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec       *WorkloadGroupSpec     `pulumi:"spec"`
	Status     map[string]interface{} `pulumi:"status"`
}

type WorkloadGroupSpec struct {
	// Metadata that will be used for all corresponding `WorkloadEntries`.
	Metadata *WorkloadGroupSpecMetadata `pulumi:"metadata"`
	// `ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.
	Probe interface{} `pulumi:"probe"`
	// Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
	Template *WorkloadGroupSpecTemplate `pulumi:"template"`
}

// WorkloadGroupSpecInput is an input type that accepts WorkloadGroupSpecArgs and WorkloadGroupSpecOutput values.
// You can construct a concrete instance of `WorkloadGroupSpecInput` via:
//
//	WorkloadGroupSpecArgs{...}
type WorkloadGroupSpecInput interface {
	pulumi.Input

	ToWorkloadGroupSpecOutput() WorkloadGroupSpecOutput
	ToWorkloadGroupSpecOutputWithContext(context.Context) WorkloadGroupSpecOutput
}

type WorkloadGroupSpecArgs struct {
	// Metadata that will be used for all corresponding `WorkloadEntries`.
	Metadata WorkloadGroupSpecMetadataPtrInput `pulumi:"metadata"`
	// `ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.
	Probe pulumi.Input `pulumi:"probe"`
	// Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
	Template WorkloadGroupSpecTemplatePtrInput `pulumi:"template"`
}

func (WorkloadGroupSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadGroupSpec)(nil)).Elem()
}

func (i WorkloadGroupSpecArgs) ToWorkloadGroupSpecOutput() WorkloadGroupSpecOutput {
	return i.ToWorkloadGroupSpecOutputWithContext(context.Background())
}

func (i WorkloadGroupSpecArgs) ToWorkloadGroupSpecOutputWithContext(ctx context.Context) WorkloadGroupSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecOutput)
}

func (i WorkloadGroupSpecArgs) ToWorkloadGroupSpecPtrOutput() WorkloadGroupSpecPtrOutput {
	return i.ToWorkloadGroupSpecPtrOutputWithContext(context.Background())
}

func (i WorkloadGroupSpecArgs) ToWorkloadGroupSpecPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecOutput).ToWorkloadGroupSpecPtrOutputWithContext(ctx)
}

// WorkloadGroupSpecPtrInput is an input type that accepts WorkloadGroupSpecArgs, WorkloadGroupSpecPtr and WorkloadGroupSpecPtrOutput values.
// You can construct a concrete instance of `WorkloadGroupSpecPtrInput` via:
//
//	        WorkloadGroupSpecArgs{...}
//
//	or:
//
//	        nil
type WorkloadGroupSpecPtrInput interface {
	pulumi.Input

	ToWorkloadGroupSpecPtrOutput() WorkloadGroupSpecPtrOutput
	ToWorkloadGroupSpecPtrOutputWithContext(context.Context) WorkloadGroupSpecPtrOutput
}

type workloadGroupSpecPtrType WorkloadGroupSpecArgs

func WorkloadGroupSpecPtr(v *WorkloadGroupSpecArgs) WorkloadGroupSpecPtrInput {
	return (*workloadGroupSpecPtrType)(v)
}

func (*workloadGroupSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadGroupSpec)(nil)).Elem()
}

func (i *workloadGroupSpecPtrType) ToWorkloadGroupSpecPtrOutput() WorkloadGroupSpecPtrOutput {
	return i.ToWorkloadGroupSpecPtrOutputWithContext(context.Background())
}

func (i *workloadGroupSpecPtrType) ToWorkloadGroupSpecPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecPtrOutput)
}

type WorkloadGroupSpecOutput struct{ *pulumi.OutputState }

func (WorkloadGroupSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadGroupSpec)(nil)).Elem()
}

func (o WorkloadGroupSpecOutput) ToWorkloadGroupSpecOutput() WorkloadGroupSpecOutput {
	return o
}

func (o WorkloadGroupSpecOutput) ToWorkloadGroupSpecOutputWithContext(ctx context.Context) WorkloadGroupSpecOutput {
	return o
}

func (o WorkloadGroupSpecOutput) ToWorkloadGroupSpecPtrOutput() WorkloadGroupSpecPtrOutput {
	return o.ToWorkloadGroupSpecPtrOutputWithContext(context.Background())
}

func (o WorkloadGroupSpecOutput) ToWorkloadGroupSpecPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkloadGroupSpec) *WorkloadGroupSpec {
		return &v
	}).(WorkloadGroupSpecPtrOutput)
}

// Metadata that will be used for all corresponding `WorkloadEntries`.
func (o WorkloadGroupSpecOutput) Metadata() WorkloadGroupSpecMetadataPtrOutput {
	return o.ApplyT(func(v WorkloadGroupSpec) *WorkloadGroupSpecMetadata { return v.Metadata }).(WorkloadGroupSpecMetadataPtrOutput)
}

// `ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.
func (o WorkloadGroupSpecOutput) Probe() pulumi.AnyOutput {
	return o.ApplyT(func(v WorkloadGroupSpec) interface{} { return v.Probe }).(pulumi.AnyOutput)
}

// Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
func (o WorkloadGroupSpecOutput) Template() WorkloadGroupSpecTemplatePtrOutput {
	return o.ApplyT(func(v WorkloadGroupSpec) *WorkloadGroupSpecTemplate { return v.Template }).(WorkloadGroupSpecTemplatePtrOutput)
}

type WorkloadGroupSpecPtrOutput struct{ *pulumi.OutputState }

func (WorkloadGroupSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadGroupSpec)(nil)).Elem()
}

func (o WorkloadGroupSpecPtrOutput) ToWorkloadGroupSpecPtrOutput() WorkloadGroupSpecPtrOutput {
	return o
}

func (o WorkloadGroupSpecPtrOutput) ToWorkloadGroupSpecPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecPtrOutput {
	return o
}

func (o WorkloadGroupSpecPtrOutput) Elem() WorkloadGroupSpecOutput {
	return o.ApplyT(func(v *WorkloadGroupSpec) WorkloadGroupSpec {
		if v != nil {
			return *v
		}
		var ret WorkloadGroupSpec
		return ret
	}).(WorkloadGroupSpecOutput)
}

// Metadata that will be used for all corresponding `WorkloadEntries`.
func (o WorkloadGroupSpecPtrOutput) Metadata() WorkloadGroupSpecMetadataPtrOutput {
	return o.ApplyT(func(v *WorkloadGroupSpec) *WorkloadGroupSpecMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(WorkloadGroupSpecMetadataPtrOutput)
}

// `ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.
func (o WorkloadGroupSpecPtrOutput) Probe() pulumi.AnyOutput {
	return o.ApplyT(func(v *WorkloadGroupSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Probe
	}).(pulumi.AnyOutput)
}

// Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
func (o WorkloadGroupSpecPtrOutput) Template() WorkloadGroupSpecTemplatePtrOutput {
	return o.ApplyT(func(v *WorkloadGroupSpec) *WorkloadGroupSpecTemplate {
		if v == nil {
			return nil
		}
		return v.Template
	}).(WorkloadGroupSpecTemplatePtrOutput)
}

// Metadata that will be used for all corresponding `WorkloadEntries`.
type WorkloadGroupSpecMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Labels      map[string]string `pulumi:"labels"`
}

// WorkloadGroupSpecMetadataInput is an input type that accepts WorkloadGroupSpecMetadataArgs and WorkloadGroupSpecMetadataOutput values.
// You can construct a concrete instance of `WorkloadGroupSpecMetadataInput` via:
//
//	WorkloadGroupSpecMetadataArgs{...}
type WorkloadGroupSpecMetadataInput interface {
	pulumi.Input

	ToWorkloadGroupSpecMetadataOutput() WorkloadGroupSpecMetadataOutput
	ToWorkloadGroupSpecMetadataOutputWithContext(context.Context) WorkloadGroupSpecMetadataOutput
}

// Metadata that will be used for all corresponding `WorkloadEntries`.
type WorkloadGroupSpecMetadataArgs struct {
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	Labels      pulumi.StringMapInput `pulumi:"labels"`
}

func (WorkloadGroupSpecMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadGroupSpecMetadata)(nil)).Elem()
}

func (i WorkloadGroupSpecMetadataArgs) ToWorkloadGroupSpecMetadataOutput() WorkloadGroupSpecMetadataOutput {
	return i.ToWorkloadGroupSpecMetadataOutputWithContext(context.Background())
}

func (i WorkloadGroupSpecMetadataArgs) ToWorkloadGroupSpecMetadataOutputWithContext(ctx context.Context) WorkloadGroupSpecMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecMetadataOutput)
}

func (i WorkloadGroupSpecMetadataArgs) ToWorkloadGroupSpecMetadataPtrOutput() WorkloadGroupSpecMetadataPtrOutput {
	return i.ToWorkloadGroupSpecMetadataPtrOutputWithContext(context.Background())
}

func (i WorkloadGroupSpecMetadataArgs) ToWorkloadGroupSpecMetadataPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecMetadataOutput).ToWorkloadGroupSpecMetadataPtrOutputWithContext(ctx)
}

// WorkloadGroupSpecMetadataPtrInput is an input type that accepts WorkloadGroupSpecMetadataArgs, WorkloadGroupSpecMetadataPtr and WorkloadGroupSpecMetadataPtrOutput values.
// You can construct a concrete instance of `WorkloadGroupSpecMetadataPtrInput` via:
//
//	        WorkloadGroupSpecMetadataArgs{...}
//
//	or:
//
//	        nil
type WorkloadGroupSpecMetadataPtrInput interface {
	pulumi.Input

	ToWorkloadGroupSpecMetadataPtrOutput() WorkloadGroupSpecMetadataPtrOutput
	ToWorkloadGroupSpecMetadataPtrOutputWithContext(context.Context) WorkloadGroupSpecMetadataPtrOutput
}

type workloadGroupSpecMetadataPtrType WorkloadGroupSpecMetadataArgs

func WorkloadGroupSpecMetadataPtr(v *WorkloadGroupSpecMetadataArgs) WorkloadGroupSpecMetadataPtrInput {
	return (*workloadGroupSpecMetadataPtrType)(v)
}

func (*workloadGroupSpecMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadGroupSpecMetadata)(nil)).Elem()
}

func (i *workloadGroupSpecMetadataPtrType) ToWorkloadGroupSpecMetadataPtrOutput() WorkloadGroupSpecMetadataPtrOutput {
	return i.ToWorkloadGroupSpecMetadataPtrOutputWithContext(context.Background())
}

func (i *workloadGroupSpecMetadataPtrType) ToWorkloadGroupSpecMetadataPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecMetadataPtrOutput)
}

// Metadata that will be used for all corresponding `WorkloadEntries`.
type WorkloadGroupSpecMetadataOutput struct{ *pulumi.OutputState }

func (WorkloadGroupSpecMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadGroupSpecMetadata)(nil)).Elem()
}

func (o WorkloadGroupSpecMetadataOutput) ToWorkloadGroupSpecMetadataOutput() WorkloadGroupSpecMetadataOutput {
	return o
}

func (o WorkloadGroupSpecMetadataOutput) ToWorkloadGroupSpecMetadataOutputWithContext(ctx context.Context) WorkloadGroupSpecMetadataOutput {
	return o
}

func (o WorkloadGroupSpecMetadataOutput) ToWorkloadGroupSpecMetadataPtrOutput() WorkloadGroupSpecMetadataPtrOutput {
	return o.ToWorkloadGroupSpecMetadataPtrOutputWithContext(context.Background())
}

func (o WorkloadGroupSpecMetadataOutput) ToWorkloadGroupSpecMetadataPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkloadGroupSpecMetadata) *WorkloadGroupSpecMetadata {
		return &v
	}).(WorkloadGroupSpecMetadataPtrOutput)
}

func (o WorkloadGroupSpecMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v WorkloadGroupSpecMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o WorkloadGroupSpecMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v WorkloadGroupSpecMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type WorkloadGroupSpecMetadataPtrOutput struct{ *pulumi.OutputState }

func (WorkloadGroupSpecMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadGroupSpecMetadata)(nil)).Elem()
}

func (o WorkloadGroupSpecMetadataPtrOutput) ToWorkloadGroupSpecMetadataPtrOutput() WorkloadGroupSpecMetadataPtrOutput {
	return o
}

func (o WorkloadGroupSpecMetadataPtrOutput) ToWorkloadGroupSpecMetadataPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecMetadataPtrOutput {
	return o
}

func (o WorkloadGroupSpecMetadataPtrOutput) Elem() WorkloadGroupSpecMetadataOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecMetadata) WorkloadGroupSpecMetadata {
		if v != nil {
			return *v
		}
		var ret WorkloadGroupSpecMetadata
		return ret
	}).(WorkloadGroupSpecMetadataOutput)
}

func (o WorkloadGroupSpecMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o WorkloadGroupSpecMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

type WorkloadGroupSpecMetadataAnnotations struct {
}

type WorkloadGroupSpecMetadataLabels struct {
}

// Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
type WorkloadGroupSpecTemplate struct {
	Address *string `pulumi:"address"`
	// One or more labels associated with the endpoint.
	Labels map[string]string `pulumi:"labels"`
	// The locality associated with the endpoint.
	Locality *string `pulumi:"locality"`
	Network  *string `pulumi:"network"`
	// Set of ports associated with the endpoint.
	Ports          map[string]int `pulumi:"ports"`
	ServiceAccount *string        `pulumi:"serviceAccount"`
	// The load balancing weight associated with the endpoint.
	Weight *int `pulumi:"weight"`
}

// WorkloadGroupSpecTemplateInput is an input type that accepts WorkloadGroupSpecTemplateArgs and WorkloadGroupSpecTemplateOutput values.
// You can construct a concrete instance of `WorkloadGroupSpecTemplateInput` via:
//
//	WorkloadGroupSpecTemplateArgs{...}
type WorkloadGroupSpecTemplateInput interface {
	pulumi.Input

	ToWorkloadGroupSpecTemplateOutput() WorkloadGroupSpecTemplateOutput
	ToWorkloadGroupSpecTemplateOutputWithContext(context.Context) WorkloadGroupSpecTemplateOutput
}

// Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
type WorkloadGroupSpecTemplateArgs struct {
	Address pulumi.StringPtrInput `pulumi:"address"`
	// One or more labels associated with the endpoint.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The locality associated with the endpoint.
	Locality pulumi.StringPtrInput `pulumi:"locality"`
	Network  pulumi.StringPtrInput `pulumi:"network"`
	// Set of ports associated with the endpoint.
	Ports          pulumi.IntMapInput    `pulumi:"ports"`
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// The load balancing weight associated with the endpoint.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (WorkloadGroupSpecTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadGroupSpecTemplate)(nil)).Elem()
}

func (i WorkloadGroupSpecTemplateArgs) ToWorkloadGroupSpecTemplateOutput() WorkloadGroupSpecTemplateOutput {
	return i.ToWorkloadGroupSpecTemplateOutputWithContext(context.Background())
}

func (i WorkloadGroupSpecTemplateArgs) ToWorkloadGroupSpecTemplateOutputWithContext(ctx context.Context) WorkloadGroupSpecTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecTemplateOutput)
}

func (i WorkloadGroupSpecTemplateArgs) ToWorkloadGroupSpecTemplatePtrOutput() WorkloadGroupSpecTemplatePtrOutput {
	return i.ToWorkloadGroupSpecTemplatePtrOutputWithContext(context.Background())
}

func (i WorkloadGroupSpecTemplateArgs) ToWorkloadGroupSpecTemplatePtrOutputWithContext(ctx context.Context) WorkloadGroupSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecTemplateOutput).ToWorkloadGroupSpecTemplatePtrOutputWithContext(ctx)
}

// WorkloadGroupSpecTemplatePtrInput is an input type that accepts WorkloadGroupSpecTemplateArgs, WorkloadGroupSpecTemplatePtr and WorkloadGroupSpecTemplatePtrOutput values.
// You can construct a concrete instance of `WorkloadGroupSpecTemplatePtrInput` via:
//
//	        WorkloadGroupSpecTemplateArgs{...}
//
//	or:
//
//	        nil
type WorkloadGroupSpecTemplatePtrInput interface {
	pulumi.Input

	ToWorkloadGroupSpecTemplatePtrOutput() WorkloadGroupSpecTemplatePtrOutput
	ToWorkloadGroupSpecTemplatePtrOutputWithContext(context.Context) WorkloadGroupSpecTemplatePtrOutput
}

type workloadGroupSpecTemplatePtrType WorkloadGroupSpecTemplateArgs

func WorkloadGroupSpecTemplatePtr(v *WorkloadGroupSpecTemplateArgs) WorkloadGroupSpecTemplatePtrInput {
	return (*workloadGroupSpecTemplatePtrType)(v)
}

func (*workloadGroupSpecTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadGroupSpecTemplate)(nil)).Elem()
}

func (i *workloadGroupSpecTemplatePtrType) ToWorkloadGroupSpecTemplatePtrOutput() WorkloadGroupSpecTemplatePtrOutput {
	return i.ToWorkloadGroupSpecTemplatePtrOutputWithContext(context.Background())
}

func (i *workloadGroupSpecTemplatePtrType) ToWorkloadGroupSpecTemplatePtrOutputWithContext(ctx context.Context) WorkloadGroupSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecTemplatePtrOutput)
}

// Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
type WorkloadGroupSpecTemplateOutput struct{ *pulumi.OutputState }

func (WorkloadGroupSpecTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadGroupSpecTemplate)(nil)).Elem()
}

func (o WorkloadGroupSpecTemplateOutput) ToWorkloadGroupSpecTemplateOutput() WorkloadGroupSpecTemplateOutput {
	return o
}

func (o WorkloadGroupSpecTemplateOutput) ToWorkloadGroupSpecTemplateOutputWithContext(ctx context.Context) WorkloadGroupSpecTemplateOutput {
	return o
}

func (o WorkloadGroupSpecTemplateOutput) ToWorkloadGroupSpecTemplatePtrOutput() WorkloadGroupSpecTemplatePtrOutput {
	return o.ToWorkloadGroupSpecTemplatePtrOutputWithContext(context.Background())
}

func (o WorkloadGroupSpecTemplateOutput) ToWorkloadGroupSpecTemplatePtrOutputWithContext(ctx context.Context) WorkloadGroupSpecTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkloadGroupSpecTemplate) *WorkloadGroupSpecTemplate {
		return &v
	}).(WorkloadGroupSpecTemplatePtrOutput)
}

func (o WorkloadGroupSpecTemplateOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadGroupSpecTemplate) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// One or more labels associated with the endpoint.
func (o WorkloadGroupSpecTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v WorkloadGroupSpecTemplate) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The locality associated with the endpoint.
func (o WorkloadGroupSpecTemplateOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadGroupSpecTemplate) *string { return v.Locality }).(pulumi.StringPtrOutput)
}

func (o WorkloadGroupSpecTemplateOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadGroupSpecTemplate) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Set of ports associated with the endpoint.
func (o WorkloadGroupSpecTemplateOutput) Ports() pulumi.IntMapOutput {
	return o.ApplyT(func(v WorkloadGroupSpecTemplate) map[string]int { return v.Ports }).(pulumi.IntMapOutput)
}

func (o WorkloadGroupSpecTemplateOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadGroupSpecTemplate) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The load balancing weight associated with the endpoint.
func (o WorkloadGroupSpecTemplateOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkloadGroupSpecTemplate) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type WorkloadGroupSpecTemplatePtrOutput struct{ *pulumi.OutputState }

func (WorkloadGroupSpecTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadGroupSpecTemplate)(nil)).Elem()
}

func (o WorkloadGroupSpecTemplatePtrOutput) ToWorkloadGroupSpecTemplatePtrOutput() WorkloadGroupSpecTemplatePtrOutput {
	return o
}

func (o WorkloadGroupSpecTemplatePtrOutput) ToWorkloadGroupSpecTemplatePtrOutputWithContext(ctx context.Context) WorkloadGroupSpecTemplatePtrOutput {
	return o
}

func (o WorkloadGroupSpecTemplatePtrOutput) Elem() WorkloadGroupSpecTemplateOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) WorkloadGroupSpecTemplate {
		if v != nil {
			return *v
		}
		var ret WorkloadGroupSpecTemplate
		return ret
	}).(WorkloadGroupSpecTemplateOutput)
}

func (o WorkloadGroupSpecTemplatePtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// One or more labels associated with the endpoint.
func (o WorkloadGroupSpecTemplatePtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The locality associated with the endpoint.
func (o WorkloadGroupSpecTemplatePtrOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Locality
	}).(pulumi.StringPtrOutput)
}

func (o WorkloadGroupSpecTemplatePtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// Set of ports associated with the endpoint.
func (o WorkloadGroupSpecTemplatePtrOutput) Ports() pulumi.IntMapOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) map[string]int {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(pulumi.IntMapOutput)
}

func (o WorkloadGroupSpecTemplatePtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// The load balancing weight associated with the endpoint.
func (o WorkloadGroupSpecTemplatePtrOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) *int {
		if v == nil {
			return nil
		}
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

// One or more labels associated with the endpoint.
type WorkloadGroupSpecTemplateLabels struct {
}

// Set of ports associated with the endpoint.
type WorkloadGroupSpecTemplatePorts struct {
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecInput)(nil)).Elem(), DestinationRuleSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecPtrInput)(nil)).Elem(), DestinationRuleSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsInput)(nil)).Elem(), DestinationRuleSpecSubsetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsArrayInput)(nil)).Elem(), DestinationRuleSpecSubsetsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyTlsInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyTlsPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyTunnelInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficpolicyTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpoolInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyConnectionpoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpoolPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyConnectionpoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpoolHttpInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyConnectionpoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyConnectionpoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpoolTcpInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyConnectionpoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyConnectionpoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyOutlierdetectionInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyOutlierdetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyOutlierdetectionPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyOutlierdetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsPortInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyTlsInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyTlsPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyTunnelInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficpolicyTunnelPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficpolicyTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecWorkloadselectorInput)(nil)).Elem(), DestinationRuleSpecWorkloadselectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecWorkloadselectorPtrInput)(nil)).Elem(), DestinationRuleSpecWorkloadselectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecInput)(nil)).Elem(), GatewaySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecPtrInput)(nil)).Elem(), GatewaySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecServersInput)(nil)).Elem(), GatewaySpecServersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecServersArrayInput)(nil)).Elem(), GatewaySpecServersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecServersPortInput)(nil)).Elem(), GatewaySpecServersPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecServersPortPtrInput)(nil)).Elem(), GatewaySpecServersPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecServersTlsInput)(nil)).Elem(), GatewaySpecServersTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecServersTlsPtrInput)(nil)).Elem(), GatewaySpecServersTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyConfigSpecInput)(nil)).Elem(), ProxyConfigSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyConfigSpecPtrInput)(nil)).Elem(), ProxyConfigSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyConfigSpecImageInput)(nil)).Elem(), ProxyConfigSpecImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyConfigSpecImagePtrInput)(nil)).Elem(), ProxyConfigSpecImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyConfigSpecSelectorInput)(nil)).Elem(), ProxyConfigSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyConfigSpecSelectorPtrInput)(nil)).Elem(), ProxyConfigSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecInput)(nil)).Elem(), ServiceEntrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecPtrInput)(nil)).Elem(), ServiceEntrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecEndpointsInput)(nil)).Elem(), ServiceEntrySpecEndpointsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecEndpointsArrayInput)(nil)).Elem(), ServiceEntrySpecEndpointsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecPortsInput)(nil)).Elem(), ServiceEntrySpecPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecPortsArrayInput)(nil)).Elem(), ServiceEntrySpecPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecWorkloadselectorInput)(nil)).Elem(), ServiceEntrySpecWorkloadselectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecWorkloadselectorPtrInput)(nil)).Elem(), ServiceEntrySpecWorkloadselectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecInput)(nil)).Elem(), SidecarSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecPtrInput)(nil)).Elem(), SidecarSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecEgressInput)(nil)).Elem(), SidecarSpecEgressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecEgressArrayInput)(nil)).Elem(), SidecarSpecEgressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecEgressPortInput)(nil)).Elem(), SidecarSpecEgressPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecEgressPortPtrInput)(nil)).Elem(), SidecarSpecEgressPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressInput)(nil)).Elem(), SidecarSpecIngressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressArrayInput)(nil)).Elem(), SidecarSpecIngressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressPortInput)(nil)).Elem(), SidecarSpecIngressPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressPortPtrInput)(nil)).Elem(), SidecarSpecIngressPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressTlsInput)(nil)).Elem(), SidecarSpecIngressTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressTlsPtrInput)(nil)).Elem(), SidecarSpecIngressTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecOutboundtrafficpolicyInput)(nil)).Elem(), SidecarSpecOutboundtrafficpolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecOutboundtrafficpolicyPtrInput)(nil)).Elem(), SidecarSpecOutboundtrafficpolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecOutboundtrafficpolicyEgressproxyInput)(nil)).Elem(), SidecarSpecOutboundtrafficpolicyEgressproxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecOutboundtrafficpolicyEgressproxyPtrInput)(nil)).Elem(), SidecarSpecOutboundtrafficpolicyEgressproxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecOutboundtrafficpolicyEgressproxyPortInput)(nil)).Elem(), SidecarSpecOutboundtrafficpolicyEgressproxyPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrInput)(nil)).Elem(), SidecarSpecOutboundtrafficpolicyEgressproxyPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecWorkloadselectorInput)(nil)).Elem(), SidecarSpecWorkloadselectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecWorkloadselectorPtrInput)(nil)).Elem(), SidecarSpecWorkloadselectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecInput)(nil)).Elem(), VirtualServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecPtrInput)(nil)).Elem(), VirtualServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpInput)(nil)).Elem(), VirtualServiceSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpArrayInput)(nil)).Elem(), VirtualServiceSpecHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpCorspolicyInput)(nil)).Elem(), VirtualServiceSpecHttpCorspolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpCorspolicyPtrInput)(nil)).Elem(), VirtualServiceSpecHttpCorspolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpDelegateInput)(nil)).Elem(), VirtualServiceSpecHttpDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpDelegatePtrInput)(nil)).Elem(), VirtualServiceSpecHttpDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpDirectresponseInput)(nil)).Elem(), VirtualServiceSpecHttpDirectresponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpDirectresponsePtrInput)(nil)).Elem(), VirtualServiceSpecHttpDirectresponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpFaultInput)(nil)).Elem(), VirtualServiceSpecHttpFaultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpFaultPtrInput)(nil)).Elem(), VirtualServiceSpecHttpFaultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersPtrInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersRequestInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersRequestPtrInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersResponseInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersResponsePtrInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMatchInput)(nil)).Elem(), VirtualServiceSpecHttpMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMatchArrayInput)(nil)).Elem(), VirtualServiceSpecHttpMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorPtrInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorPortInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorPortPtrInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorpercentageInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorpercentageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorpercentagePtrInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorpercentageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRetriesInput)(nil)).Elem(), VirtualServiceSpecHttpRetriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRetriesPtrInput)(nil)).Elem(), VirtualServiceSpecHttpRetriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRewriteInput)(nil)).Elem(), VirtualServiceSpecHttpRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRewritePtrInput)(nil)).Elem(), VirtualServiceSpecHttpRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteInput)(nil)).Elem(), VirtualServiceSpecHttpRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteArrayInput)(nil)).Elem(), VirtualServiceSpecHttpRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationInput)(nil)).Elem(), VirtualServiceSpecHttpRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationPtrInput)(nil)).Elem(), VirtualServiceSpecHttpRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationPortInput)(nil)).Elem(), VirtualServiceSpecHttpRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationPortPtrInput)(nil)).Elem(), VirtualServiceSpecHttpRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersPtrInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersRequestInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersRequestPtrInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersResponseInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersResponsePtrInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpInput)(nil)).Elem(), VirtualServiceSpecTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpArrayInput)(nil)).Elem(), VirtualServiceSpecTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpMatchInput)(nil)).Elem(), VirtualServiceSpecTcpMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpMatchArrayInput)(nil)).Elem(), VirtualServiceSpecTcpMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteInput)(nil)).Elem(), VirtualServiceSpecTcpRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteArrayInput)(nil)).Elem(), VirtualServiceSpecTcpRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationInput)(nil)).Elem(), VirtualServiceSpecTcpRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationPtrInput)(nil)).Elem(), VirtualServiceSpecTcpRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationPortInput)(nil)).Elem(), VirtualServiceSpecTcpRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationPortPtrInput)(nil)).Elem(), VirtualServiceSpecTcpRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsInput)(nil)).Elem(), VirtualServiceSpecTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsArrayInput)(nil)).Elem(), VirtualServiceSpecTlsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsMatchInput)(nil)).Elem(), VirtualServiceSpecTlsMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsMatchArrayInput)(nil)).Elem(), VirtualServiceSpecTlsMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteInput)(nil)).Elem(), VirtualServiceSpecTlsRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteArrayInput)(nil)).Elem(), VirtualServiceSpecTlsRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationInput)(nil)).Elem(), VirtualServiceSpecTlsRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationPtrInput)(nil)).Elem(), VirtualServiceSpecTlsRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationPortInput)(nil)).Elem(), VirtualServiceSpecTlsRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationPortPtrInput)(nil)).Elem(), VirtualServiceSpecTlsRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadEntrySpecInput)(nil)).Elem(), WorkloadEntrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadEntrySpecPtrInput)(nil)).Elem(), WorkloadEntrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupSpecInput)(nil)).Elem(), WorkloadGroupSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupSpecPtrInput)(nil)).Elem(), WorkloadGroupSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupSpecMetadataInput)(nil)).Elem(), WorkloadGroupSpecMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupSpecMetadataPtrInput)(nil)).Elem(), WorkloadGroupSpecMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupSpecTemplateInput)(nil)).Elem(), WorkloadGroupSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupSpecTemplatePtrInput)(nil)).Elem(), WorkloadGroupSpecTemplateArgs{})
	pulumi.RegisterOutputType(DestinationRuleSpecOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsArrayOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolHttpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyOutlierdetectionPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsArrayOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsPortPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyPortlevelsettingsTlsPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyTlsOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyTlsPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyTunnelOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficpolicyTunnelPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyConnectionpoolOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyConnectionpoolPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyConnectionpoolHttpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyConnectionpoolHttpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyConnectionpoolTcpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyConnectionpoolTcpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepaliveOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyConnectionpoolTcpTcpkeepalivePtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyOutlierdetectionOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyOutlierdetectionPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsArrayOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolHttpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepaliveOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsConnectionpoolTcpTcpkeepalivePtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsOutlierdetectionPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsPortOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsPortPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyPortlevelsettingsTlsPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyTlsOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyTlsPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyTunnelOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficpolicyTunnelPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecWorkloadselectorOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecWorkloadselectorPtrOutput{})
	pulumi.RegisterOutputType(GatewaySpecOutput{})
	pulumi.RegisterOutputType(GatewaySpecPtrOutput{})
	pulumi.RegisterOutputType(GatewaySpecServersOutput{})
	pulumi.RegisterOutputType(GatewaySpecServersArrayOutput{})
	pulumi.RegisterOutputType(GatewaySpecServersPortOutput{})
	pulumi.RegisterOutputType(GatewaySpecServersPortPtrOutput{})
	pulumi.RegisterOutputType(GatewaySpecServersTlsOutput{})
	pulumi.RegisterOutputType(GatewaySpecServersTlsPtrOutput{})
	pulumi.RegisterOutputType(ProxyConfigSpecOutput{})
	pulumi.RegisterOutputType(ProxyConfigSpecPtrOutput{})
	pulumi.RegisterOutputType(ProxyConfigSpecImageOutput{})
	pulumi.RegisterOutputType(ProxyConfigSpecImagePtrOutput{})
	pulumi.RegisterOutputType(ProxyConfigSpecSelectorOutput{})
	pulumi.RegisterOutputType(ProxyConfigSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecPtrOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecEndpointsOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecEndpointsArrayOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecPortsOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecPortsArrayOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecWorkloadselectorOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecWorkloadselectorPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecOutput{})
	pulumi.RegisterOutputType(SidecarSpecPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecEgressOutput{})
	pulumi.RegisterOutputType(SidecarSpecEgressArrayOutput{})
	pulumi.RegisterOutputType(SidecarSpecEgressPortOutput{})
	pulumi.RegisterOutputType(SidecarSpecEgressPortPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressArrayOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressPortOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressPortPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressTlsOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressTlsPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecOutboundtrafficpolicyOutput{})
	pulumi.RegisterOutputType(SidecarSpecOutboundtrafficpolicyPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecOutboundtrafficpolicyEgressproxyOutput{})
	pulumi.RegisterOutputType(SidecarSpecOutboundtrafficpolicyEgressproxyPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecOutboundtrafficpolicyEgressproxyPortOutput{})
	pulumi.RegisterOutputType(SidecarSpecOutboundtrafficpolicyEgressproxyPortPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecWorkloadselectorOutput{})
	pulumi.RegisterOutputType(SidecarSpecWorkloadselectorPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpCorspolicyOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpCorspolicyPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpDelegateOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpDelegatePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpDirectresponseOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpDirectresponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpFaultOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpFaultPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersRequestOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersRequestPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersResponseOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMatchOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMatchArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorPortOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorPortPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorpercentageOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorpercentagePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRetriesOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRetriesPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRewriteOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRewritePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteDestinationOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteDestinationPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteDestinationPortOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteDestinationPortPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersRequestOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersResponseOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpMatchOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpMatchArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteDestinationOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteDestinationPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteDestinationPortOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteDestinationPortPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsMatchOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsMatchArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteDestinationOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteDestinationPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteDestinationPortOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteDestinationPortPtrOutput{})
	pulumi.RegisterOutputType(WorkloadEntrySpecOutput{})
	pulumi.RegisterOutputType(WorkloadEntrySpecPtrOutput{})
	pulumi.RegisterOutputType(WorkloadGroupSpecOutput{})
	pulumi.RegisterOutputType(WorkloadGroupSpecPtrOutput{})
	pulumi.RegisterOutputType(WorkloadGroupSpecMetadataOutput{})
	pulumi.RegisterOutputType(WorkloadGroupSpecMetadataPtrOutput{})
	pulumi.RegisterOutputType(WorkloadGroupSpecTemplateOutput{})
	pulumi.RegisterOutputType(WorkloadGroupSpecTemplatePtrOutput{})
}
